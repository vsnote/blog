<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zed on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/zed/</link>
    <description>Recent content in Zed on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 17 May 2014 05:50:36 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/zed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Zed包管理器</title>
      <link>https://www.zfanw.com/blog/zed-package-manager.html</link>
      <pubDate>Sat, 17 May 2014 05:50:36 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/zed-package-manager.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 安装与管理&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 深入&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 开发你自己的应用包&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    &lt;strong&gt;本文译自&lt;a href=&#34;http://zedapp.org/2014/05/zed-package-manager/&#34;&gt;Zed Package Manager | Zed&lt;/a&gt;。&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    前阵子，我们给Zed加了一个很酷的特性ZPM，不过没有大肆宣传。你可以猜到，ZPM表示&amp;#8221;Zed Package Manager&amp;#8221;，它最初由&lt;a href=&#34;https://github.com/TheKiteEatingTree&#34;&gt;Andrew Stephan&lt;/a&gt;完成。
  &lt;/p&gt;
  
  &lt;p&gt;
    可以想知，ZPM在将来会大有改进，但现在，还是让我说说，它是怎么运作的：怎样安装、管理应用包，自己如何开发应用包来扩展Zed的功能。
  &lt;/p&gt;
  
  &lt;p&gt;
    让我们先从安装与管理说起。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;安装与管理&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    安装Zed应用包很简单，你所需要的，是一份Zed(废话)和你要安装的应用包的URI地址(关于URI后面会聊更多)。
  &lt;/p&gt;
  
  &lt;p&gt;
    想看看现在都安装了哪些应用包？在编辑窗口里运行&lt;code&gt;Tools:Zpm:Installed Packages&lt;/code&gt;命令，它会打开一个会话，列出目前安装的所有应用包，你还可以在这里卸载、更新、更新所有应用包，当然，也可以安装新应用包。列表用普通Zed文件当用户界面，你可以用键盘(移动光标到“按钮”然后按&lt;strong&gt;回车&lt;/strong&gt;)或鼠标(鼠标直接点击某个“按钮”)操作。需注意的是，Zed预安装的应用包是不能卸载的(界面上确实有一个卸载选项，但其实没用)。
  &lt;/p&gt;
  
  &lt;p&gt;
    要安装新应用包，请点击&amp;#8221;Install New&amp;#8221;按钮。你也可以运行&lt;code&gt;Tools:Zpm:Install&lt;/code&gt;(任何地方都可以，不强制一定要从已安装应用包界面)。然后，输入应用包URI。你可以试试一个简单的应用包&lt;code&gt;gh:zefhemel/sample-zed-package&lt;/code&gt;(后面我们会说明如何开发)。安装完成后，你应该有了一个新命令&lt;code&gt;My Test Command&lt;/code&gt;，执行后会弹出&amp;#8221;Hello world&amp;#8221;对话框。
  &lt;/p&gt;
  
  &lt;p&gt;
    Awesomeness。
  &lt;/p&gt;
  
  &lt;p&gt;
    Zed目前的应用包是分散的，没有Sublime或Atom那样的中心库。不过暂时可以用&lt;a href=&#34;https://github.com/zedapp/zed/wiki/Packages&#34;&gt;Zed wiki&lt;/a&gt;替代。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;深入&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    本质上说，应用包不过是提供一种简单方法，帮你安装一些文件到configuration项目。你可以查看Configuration项目下的&lt;code&gt;/packages&lt;/code&gt;(这里借助树型结构是最方便的：&lt;code&gt;Command-T/Ctrl-T&lt;/code&gt;)文件夹，你能看到一些预安装的应用包。截至写下这篇的时候，以下模式是以Zed应用包形式分发的：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://github.com/zedapp/javascript-mode&#34;&gt;JavaScript mode &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://github.com/zedapp/json-mode&#34;&gt;JSON mode&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://github.com/zedapp/json5-mode&#34;&gt;JSON5 mode&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://github.com/zedapp/php-mode&#34;&gt;PHP mode&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://github.com/zedapp/css-mode&#34;&gt;CSS mode&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://github.com/zedapp/jsx-mode&#34;&gt;JSX mode&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    以后，会有更多的内置模式迁移到Zed应用包上，不过这个任务不轻，所以会花些时间。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果你打开你的Configuration项目下的&lt;code&gt;/default.json&lt;/code&gt;文件，你能看到一个&lt;code&gt;packages&lt;/code&gt;键：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;packages: [
    &#34;gh:zedapp/javascript-mode&#34;,
    &#34;gh:zedapp/json-mode&#34;,
    &#34;gh:zedapp/json5-mode&#34;,
    &#34;gh:zedapp/php-mode&#34;,
    &#34;gh:zedapp/css-mode&#34;,
    &#34;gh:zedapp/jsx-mode&#34;
]
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    Zed会确保这里列出的应用包都已安装，并自动更新。如果你自个安装了一个应用包，则可以在你的&lt;code&gt;/user.json&lt;/code&gt;文件里找到它。
  &lt;/p&gt;
  
  &lt;p&gt;
    那么，这些应用包从哪儿来？一个应用包的URI可以是一个完整的HTTP链接，指向一个目录，目录下包含一个&lt;code&gt;package.json&lt;/code&gt;文件。当然，你也可以使用快捷方式。一个快捷URI带有&lt;code&gt;gh:&lt;/code&gt;(github)或&lt;code&gt;bb:&lt;/code&gt;(bitbucket)前缀(目前是这样)。它们会扩展(举&lt;code&gt;gh:zedapp/javascript-mode&lt;/code&gt;来说)成&lt;code&gt;https://raw.githubusercontent.com/zedapp/javascript-mode/master/&lt;/code&gt;。ZPM据此补缀&lt;code&gt;package.json&lt;/code&gt;，找到一个类似如下的JSON文件：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;{
    &#34;name&#34;: &#34;JavaScript mode&#34;,
    &#34;uri&#34;: &#34;gh:zedapp/javascript-mode&#34;,
    &#34;version&#34;: &#34;0.2&#34;,
    &#34;description&#34;: &#34;JavaScript mode for Zed&#34;,
    &#34;files&#34;: [
        &#34;beautify-js.js&#34;,
        &#34;beautify.js&#34;,
        &#34;check.js&#34;,
        &#34;index.js&#34;,
        &#34;jshint.js&#34;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    所需的键如下：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;code&gt;uri&lt;/code&gt;：该URI与人们用来安装你的应用包使用的URI必须一致(否则的话，你可能遭遇不对劲)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;code&gt;name&lt;/code&gt;：显示在UI中的应用包的名称
    &lt;/li&gt;
    &lt;li&gt;
      &lt;code&gt;description&lt;/code&gt;：显示在UI中的描述内容
    &lt;/li&gt;
    &lt;li&gt;
      &lt;code&gt;version&lt;/code&gt;：版本号，你一旦更新这个数字，则那些已安装你应用包的人们就能自动升级它们(ZPM每隔几小时检查一次更新)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;code&gt;files&lt;/code&gt;：组成应用包的文件的相对路径列表(&lt;code&gt;package.json&lt;/code&gt;和&lt;code&gt;config.json&lt;/code&gt;会自动包含，你不必自己添加它们到列表)
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    每一个应用包，除了&lt;code&gt;package.json&lt;/code&gt;文件外，至少还应该有一个&lt;code&gt;config.json&lt;/code&gt;文件，文件中包含常见的Zed配置，比如&lt;a href=&#34;http://zedapp.org/2014/02/configuration/&#34;&gt;定义新命令，模式，样式主题&lt;/a&gt;或任何其他你的应用包提供的东西。譬如这个&lt;a href=&#34;https://github.com/zedapp/javascript-mode/blob/master/config.json&#34;&gt;JavaScript模式的配置&lt;/a&gt;。其余的文件多数只是些JavaScript文件，用于落实config文件中列出的命令。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;开发你自己的应用包&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;h3&gt;
    准备
  &lt;/h3&gt;
  
  &lt;p&gt;
    你要做的第一件事，是将你的configuration项目保存到一个本地目录(而不是SyncFS，这是Chrome版Zed默认保存的位置)。原因是你可能需要上传或推送你的应用包到诸如Github这样的地方，这样你就需要能直接访问这些文件。在Chrome版中，你可以运行&lt;code&gt;Configuration:Store in Local Folder&lt;/code&gt;命令。如果你用的是独立版本的Zed，则Linux下，你的配置文件保存在&lt;code&gt;~/.config/zed/config&lt;/code&gt;，Mac下则保存在&lt;code&gt;~/Library/Application Support/zed/config&lt;/code&gt;。如果你想把配置文件保存到其他地方，则使用&lt;code&gt;Configuration:Set Configuration Directory&lt;/code&gt;命令。我个人是把我的配置保存在我的Dropbox文件夹中。
  &lt;/p&gt;
  
  &lt;h3&gt;
    想想在哪儿托管你的应用包
  &lt;/h3&gt;
  
  &lt;p&gt;
    我建议你在Gihub或Bitbucket上给你的应用包创建一个公共代码库。本篇中，我们会拿&lt;a href=&#34;https://github.com/zefhemel/sample-zed-package&#34;&gt;我托管在我&lt;code&gt;zefhemel&lt;/code&gt; github账户上的一个叫做&lt;code&gt;sample-zed-package&lt;/code&gt;的Github库&lt;/a&gt;作例子。
  &lt;/p&gt;
  
  &lt;h3&gt;
    创建应用包
  &lt;/h3&gt;
  
  &lt;p&gt;
    Configuration项目里有些专为开发者设计的命令，可以让你迅速开工。运行命令&lt;code&gt;Tools:Zpm:Create Package&lt;/code&gt;。这会弹出对话框要求你输入应用包的URI。我们且输入&lt;code&gt;gh:zefhemel/sample-zed-package&lt;/code&gt;(可替换成你的任一库名)。
  &lt;/p&gt;
  
  &lt;p&gt;
    这样我们就在&lt;code&gt;/packages/gh/zefhemel/sample-zed-package/&lt;/code&gt;目录下创建了两个文件，&lt;code&gt;package.json&lt;/code&gt;和&lt;code&gt;config.json&lt;/code&gt;。默认会打开&lt;code&gt;package.json&lt;/code&gt;文件。请根据你的意思修改它的默认值，比如：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;{
    &#34;name&#34;: &#34;My First Zed Package&#34;,
    &#34;uri&#34;: &#34;gh:zefhemel/sample-zed-package&#34;,
    &#34;version&#34;: &#34;1.0&#34;,
    &#34;description&#34;: &#34;A useful new package&#34;,
    &#34;files&#34;: []
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    接下来，让我们打开同一目录下的&lt;code&gt;config.json&lt;/code&gt;文件(小贴士：按&lt;kbd&gt;Command-E&lt;/kbd&gt;/&lt;kbd&gt;Ctrl-E&lt;/kbd&gt;调出Goto后按空格键补全当前目录完整路径，然后选择&lt;code&gt;config.json&lt;/code&gt;)。
  &lt;/p&gt;
  
  &lt;p&gt;
    就我们的情况，只需定义一个命令样例：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;commands: {
        &#34;My Test Command&#34;: {
            scriptUrl: &#34;./command.js&#34;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    接下来，让我们新建&lt;code&gt;/packages/gh/zefhemel/sample-zed-package/command.js&lt;/code&gt;(同样使用Goto小贴士)：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;var ui = require(&#34;zed/ui&#34;);

module.exports = function(info) {
    return ui.prompt(&#34;Hello world!&#34;);
};
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    如你所见，Zed的命令是用CommonJS风格模块化的。它导出一个函数，该函数接收一个变量(info)。取决于你的配置，变量会包含一些命令执行环境的有用信息。Zed不断有增加API，允许你与编辑器互动，所有的这些API都可以通过&lt;code&gt;require&lt;/code&gt; &lt;code&gt;zed/*&lt;/code&gt;模块取得。你可以看看你Configuration项目里&lt;code&gt;/api/zed&lt;/code&gt;目录下有什么。我得承认，这些API的文档还很欠缺，因此在文档完善前，建议多看些示例。比如Configuration项目：所有的已安装的应用包，模式，主题样式和各种命令的代码都在那儿，随你查阅。如果你有特定的问题，请加入&lt;a href=&#34;https://groups.google.com/forum/#!forum/zed-user&#34;&gt;Zed Google Group&lt;/a&gt;提问！
  &lt;/p&gt;
  
  &lt;p&gt;
    为测试我们新创建的项目，我们需要将它添加到&lt;code&gt;/user.json&lt;/code&gt;里的应用包列表：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;packages: [
    &#34;gh:zefhemel/sample-zed-package&#34;
]
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    你的配置会自动重载，因此新命令已经可用。你可以运行&lt;code&gt;My Test Command&lt;/code&gt;命令验证一下。如果没有，可以使用&lt;code&gt;Configuration:Reload&lt;/code&gt;命令强制重载你的配置。如果你改的是&lt;code&gt;config.json&lt;/code&gt;文件，则每次都需要强制重载。另一个你会经常用到的命令是&lt;code&gt;Sandbox:Reset&lt;/code&gt;，它会确保你的JavaScript代码在下一次它被调用时重载。
  &lt;/p&gt;
  
  &lt;h3&gt;
    发布你的应用包
  &lt;/h3&gt;
  
  &lt;p&gt;
    在发布你的应用包前，我们需要记住一个重要的事情：更新我们的&lt;code&gt;package.json&lt;/code&gt;文件，引入所有其余的文件(指除开package.json与config.json外的文件)。好在Zed有提供一个便利的命令：切换到你的&lt;code&gt;package.json&lt;/code&gt;文件，然后执行&lt;code&gt;Tools:Zpm:Update Package.json File List&lt;/code&gt;。这个命令会自动扫描你的项目，然后更新&lt;code&gt;package.json&lt;/code&gt;文件来引用&lt;code&gt;command.js&lt;/code&gt;文件。
  &lt;/p&gt;
  
  &lt;p&gt;
    Zed方面就这些了。总之，剩下要做的，就是把我们的应用包目录变成一个git目录，commit所有文件，然后push到github。
  &lt;/p&gt;
  
  &lt;p&gt;
    首先，打开命令窗口，&lt;code&gt;cd&lt;/code&gt;到你的Zed Configuration目录，然后&lt;code&gt;cd&lt;/code&gt;到我们的应用包目录：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ cd packages/gh/zefhemel/sample-zed-package
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    在目录下初始化一个git库，然后添加所有文件并commit：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ git init
$ git add *
$ git commit -m &#34;Initial checkin&#34;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    将我们之前创建的github库配置为远程并把代码推上去。我的情况：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ git remote add origin git@github.com:zefhemel/sample-zed-package.git
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    就这样。
  &lt;/p&gt;
  
  &lt;h3&gt;
    测试你的应用包
  &lt;/h3&gt;
  
  &lt;p&gt;
    在告知我们所有的朋友前，我们还需要测试下应用包。我通常是另外备一份Zed(我或者是用独立版本做开发，Chrome版本做测试或者反过来，或者是使用安装在Chrome Canary上的Zed)。此外你也可以切换你的Zed配置到一个全新、干净的目录，随后再切换回来。目的就只是准备一个还没有安装过你的应用包的Zed。你甚至可以换一台电脑(比如你的Chromebook）。
  &lt;/p&gt;
  
  &lt;p&gt;
    要安装你的应用包，请在你干净版的Zed运行&lt;code&gt;Tools:Zpm:Install&lt;/code&gt;命令，然后输入应用包URI。如果一切顺利，你的命令应该已经可用了。除了执行&lt;code&gt;Tools:Zpm:Install&lt;/code&gt;命令外，你也可以手动更新配置中的&lt;code&gt;packages&lt;/code&gt;列表，增加你的应用包URI。效果是一样的。
  &lt;/p&gt;
  
  &lt;p&gt;
    管用？恭喜，请务必将你的应用包添加到我们的&lt;a href=&#34;https://github.com/zedapp/zed/wiki/Packages&#34;&gt;维基页面&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;h3&gt;
    开发与调试贴士
  &lt;/h3&gt;
  
  &lt;p&gt;
    为了开发Zed应用包，你最好把Configuration项目当成一个开发环境。我通常是先添加新模式与命令到&lt;code&gt;/user.json&lt;/code&gt;文件里，如果没问题，再迁移到应用包里。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Logging&lt;/strong&gt;：每个项目都有一个&lt;code&gt;zed::log&lt;/code&gt;文件，会列出Zed给出的提示，错误与警告以及沙箱代码。如果你的应用包或脚本不能正常运行，请先检查&lt;code&gt;zed::log&lt;/code&gt;找找头绪，看哪里可能出错了。你也可以在你的JavaScript中使用&lt;code&gt;console.log&lt;/code&gt;等来调试，它们输出的结果也会显示在&lt;code&gt;zed::log&lt;/code&gt;中(&lt;code&gt;[Sandbox]&lt;/code&gt;前缀)。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;重载/重启&lt;/strong&gt;：通过沙箱运行的方式，Zed严格地把所有应用包和扩展代码从编辑器本身区分开来，这样你无需重启或重开编辑器窗口就可以编辑应用包并马上测试结果。只是你需要重载你的配置文件(&lt;code&gt;config.json&lt;/code&gt;)，为此你可以运行&lt;code&gt;Configuration:Reload&lt;/code&gt;命令。如果你修改你的JavaScript代码，运行&lt;code&gt;Sandbox:Reset&lt;/code&gt;命令，Zed会重载这些文件，你就可以看到修改的情况。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;Protip&lt;/strong&gt;：如果你要做很多Zed应用包的开发工作，最好是把&lt;code&gt;Configuration:Reload&lt;/code&gt;和&lt;code&gt;Sandbox:Reset&lt;/code&gt;命令绑定给键组合。譬如我在我的&lt;code&gt;/user.json&lt;/code&gt;文件里：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;keys: {
    &#34;Sandbox:Reset&#34;: &#34;Ctrl-Shift-S&#34;,
    &#34;Configuration:Reload&#34;: &#34;Ctrl-Alt-Shift-S&#34;
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;strong&gt;常见问题&lt;/strong&gt;：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      如果在你添加你的应用包到&lt;code&gt;/user.json&lt;/code&gt;文件中的&lt;code&gt;packages&lt;/code&gt;键后，配置一直在重载，一个可能的原因是，&lt;code&gt;package.json&lt;/code&gt;中定义的URI与应用包的路径不匹配。换句话说，如果你的的应用包URI是&lt;code&gt;gh:abc/def&lt;/code&gt;，则你的&lt;code&gt;package.json&lt;/code&gt;必须放在&lt;code&gt;/packages/gh/abc/def/package.json&lt;/code&gt;位置。如果不是，循环的问题就会出现。
    &lt;/li&gt;
    &lt;li&gt;
      如果安装或运行应用包时，你在&lt;code&gt;zed::log&lt;/code&gt;里看到404错误，则问题很可能出在你&lt;code&gt;package.json&lt;/code&gt;文件中的&lt;code&gt;files&lt;/code&gt;列表。如果安装应用包时出现404,请确保&lt;code&gt;package.json&lt;/code&gt;里&lt;code&gt;files&lt;/code&gt;键列出的文件均存在。如果404出现在安装后的测试中，则确保Zed声称找不到的文件出现在你的&lt;code&gt;package.json&lt;/code&gt;文件里的&lt;code&gt;files&lt;/code&gt;键下。
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    这就好了！让我们看看你能开发出什么！
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Zed使用小贴士</title>
      <link>https://www.zfanw.com/blog/zed-app-tips.html</link>
      <pubDate>Mon, 05 May 2014 11:14:50 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/zed-app-tips.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 创建新文件&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 打开文件&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    Zed文档里，有一些细节没有写出来，最后往往会在Github issues上，以问题的形式出现。答案均出自Zed作者，因为我也碰到过，所以略作整理。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;创建新文件&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    按&lt;kbd&gt;Ctrl-e&lt;/kbd&gt;调出goto UI后，输入一个当前项目下不存在的文件名即可创建一个新文件。但是，这个新文件的位置是&lt;strong&gt;项目根目录&lt;/strong&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    而大部分时候，我们是想在当前编辑的文件同一级目录下创建新文件。
  &lt;/p&gt;
  
  &lt;p&gt;
    有一个快速输入当前编辑的文件的路径的方法：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;kbd&gt;Ctrl-e&lt;/kbd&gt;调出goto UI
    &lt;/li&gt;
    &lt;li&gt;
      按空格键自动补全当前编辑文件的路径
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;打开文件&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;kbd&gt;Ctrl-e&lt;/kbd&gt;调出goto UI后，输入你要编辑的文件名称。但这里有一个细节，即goto UI只会在文件名称里查找，不会在文件夹名称里查找。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果你打算编辑 wp-content/themes/zfanw/index.php 文件，却只输入&lt;code&gt;zfanw index&lt;/code&gt;是不行的。文件夹部分，需要在后面跟上 “/”，比如 &lt;code&gt;zfanw/index&lt;/code&gt; 这样，才能正确定位到该文件。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Zed编辑器</title>
      <link>https://www.zfanw.com/blog/editor-zed-app.html</link>
      <pubDate>Sat, 03 May 2014 05:53:56 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/editor-zed-app.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#Zed&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; Zed的界面&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#Zed-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; Zed支持的平台&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 初次见面&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 主题样式&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#Zed-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; 配置Zed&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;6&lt;/span&gt; 文件操作&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-4&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;7&lt;/span&gt; 命令&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-5&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;8&lt;/span&gt; 多游标&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-6&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;9&lt;/span&gt; 多面板&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-7&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;10&lt;/span&gt; 自动更新&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    我用Vim&lt;fnref target=&#34;12411.1&#34; /&gt;，但不是Vim狂热分子。看到有人说Sublime Text&lt;fnref target=&#34;12411.3&#34; /&gt;不错，我会下载一个试试 &amp;#8211; 确实有过人之处。LightTable&lt;fnref target=&#34;12411.4&#34; /&gt;说自己是下一代代码编辑器，我也会试试 &amp;#8211; 十分新颖。Brackets&lt;fnref target=&#34;12411.5&#34; /&gt;专为Web开发打造，我是做前端开发的，听起来量身定制。Github十年磨一剑的姿态，出了Atom&lt;fnref target=&#34;12411.6&#34; /&gt;，号称为21世纪而造。可惜我没有Mac系统，否则也愿意试试。
  &lt;/p&gt;
  
  &lt;p&gt;
    我个人对软件之名没有执念。
  &lt;/p&gt;
  
  &lt;p&gt;
    Zed&lt;fnref target=&#34;12411.7&#34; /&gt;是我最近看到的一款编辑器，tagline写着「Rethinking Code Editing」。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;Zed&#34;&gt;Zed的界面&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyZed&#34; href=&#34;#Zed&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    看图(图片来自Zed网站)：
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img src=&#34;http://zedapp.zed.netdna-cdn.com/wp-content/uploads/2014/02/zed-new.png&#34; alt=&#34;Zed App&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    看上去，这界面跟Sublime Text、Atom很像。
  &lt;/p&gt;
  
  &lt;p&gt;
    但是，Zed的顶部没有菜单栏，也没有标签页，左侧也没有文件管理树。&lt;strong&gt;界面极简&lt;/strong&gt;。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;Zed-2&#34;&gt;Zed支持的平台&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyZed-2&#34; href=&#34;#Zed-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Zed目前支持的平台有：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Chrome浏览器 &amp;#8211; Zed作为一个Chrome App存在
    &lt;/li&gt;
    &lt;li&gt;
      Mac系统
    &lt;/li&gt;
    &lt;li&gt;
      Windows系统
    &lt;/li&gt;
    &lt;li&gt;
      Linux 32位系统
    &lt;/li&gt;
    &lt;li&gt;
      Linux 64位系统
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    安装过程非常简单，下载压缩包，解压即可使用。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;初次见面&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    初次打开Zed的界面如下：
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img src=&#34;http://drp.io/files/5357c7274a734.png&#34; alt=&#34;zed start&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    这是Zed项目选择窗。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果你不曾打开过项目，则窗口中有三条菜单：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Open Local Folder &amp;#8211; 打开本地文件夹
    &lt;/li&gt;
    &lt;li&gt;
      Configuration &amp;#8211; 配置
    &lt;/li&gt;
    &lt;li&gt;
      Manual &amp;#8211; 手册
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    如果你曾经开过项目，则Zed会把项目路径追加到Manual菜单下，通过移动箭头或鼠标点击选择项目。
  &lt;/p&gt;
  
  &lt;p&gt;
    第一次打开项目文件夹，Zed会显示一个只读帮助文件，介绍一些快捷键的使用，比如：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;kbd&gt;ctrl-e&lt;/kbd&gt; &amp;#8211; 打开文件
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;主题样式&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Zed 默认的主题样式是暗黑色，但非常容易切换：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;kbd&gt;Ctrl-.&lt;/kbd&gt; 调出顶部的命令栏(goto UI)
    &lt;/li&gt;
    &lt;li&gt;
      输入&lt;code&gt;configurationthemexcode&lt;/code&gt;，因为Zed支持命令模糊匹配，所以输入&lt;code&gt;themxo&lt;/code&gt;也同样可以定位到命令。事实上，不管你输入什么，只要能唯一定位出命令，都是可以的
    &lt;/li&gt;
    &lt;li&gt;
      按回车键，Zed界面的样式已经变成Xcode的
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    但你可能好奇，样式更改是在哪里进行的？或说更改是怎么保存的？
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;Zed-3&#34;&gt;配置Zed&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyZed-3&#34; href=&#34;#Zed-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Zed有一个user.json文件，用于保存用户配置。譬如上面的主题样式更改，会自动保存到user.json文件中&lt;code&gt;preferences&lt;/code&gt;属性里，如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;{
    imports: [
        &#34;/default.json&#34;
    ],
    preferences: {
        theme: &#34;xcode&#34;
    },
    modes: {},
    keys: {},
    commands: {},
    handlers: {},
    themes: {},
    packages: [    ]
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    user.json文件里，modes可以增加对文件格式的支持，keys可以增加按键组合或重新定义按键，commands可以定义新的命令。
  &lt;/p&gt;
  
  &lt;p&gt;
    打开user.json文件要绕点路，你要在Zed项目选择窗里，选择&lt;code&gt;Configuration&lt;/code&gt;菜单项，回车后会打开一个新Zed窗口，两栏，左侧显示README.md文件，右侧显示user.json文件。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果你正在编辑项目，突然想更改user.json，则可以先按&lt;kbd&gt;Ctrl-Shift-o&lt;/kbd&gt;快速切换到Zed的项目选择窗 &amp;#8211; 不过，你要保证项目选择窗口还开着。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;文件操作&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;h3&gt;
    打开文件
  &lt;/h3&gt;
  
  &lt;p&gt;
    在你进入一个项目后，可以用&lt;kbd&gt;Ctrl-e&lt;/kbd&gt;调出goto UI，然后输入要打开的文件名称。
  &lt;/p&gt;
  
  &lt;p&gt;
    切换文件或新建文件，也同样使用&lt;kbd&gt;Ctrl-e&lt;/kbd&gt;。因为认真的说，无论是切换文件还是新建文件，都是在打开一个文件 &amp;#8211; 不管它存在或不存在。
  &lt;/p&gt;
  
  &lt;p&gt;
    所以Zed把这几个文件操作方式合并。这是它的一个&lt;strong&gt;特性&lt;/strong&gt;。Zed里，没有单独的&lt;kbd&gt;Ctrl-o&lt;/kbd&gt;来打开对话框选择文件，也没有单独的&lt;kbd&gt;Ctrl-n&lt;/kbd&gt;创建新文件 &amp;#8211; 要创建文件，你只要输入一个不存在的文件名。
  &lt;/p&gt;
  
  &lt;h3&gt;
    保存文件
  &lt;/h3&gt;
  
  &lt;p&gt;
    在Zed中，打开A文件后，要打开B文件，因为只有一个窗口，所以B会替代A，占据当前窗口。在VIM中，如果A文件做修改，却还没有保存，会要求我们先保存A然后才能打开B。但Zed允许你直接打开B，不会有任何提示要求你先保存A。
  &lt;/p&gt;
  
  &lt;p&gt;
    这是因为，它已经保存好了。默认情况下，没有键击，则2秒后Zed会自动保存文件。以下三种情况下，Zed也会&lt;strong&gt;自动保存&lt;/strong&gt;文件：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      编辑器失去焦点
    &lt;/li&gt;
    &lt;li&gt;
      切换文件
    &lt;/li&gt;
    &lt;li&gt;
      关闭窗口
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    但自动保存的功能可能会带来一些问题。
  &lt;/p&gt;
  
  &lt;p&gt;
    譬如我用&lt;code&gt;gulp watch&lt;/code&gt;命令监控coffeeScript文件的变化并自动编译，有时候用Zed打一半代码，又切换到其他窗口做点事情，再回来，因为自动保存好了，&lt;code&gt;gulp watch&lt;/code&gt;捕捉到无法编译的问题，就自动退出，于是又得重开&lt;code&gt;gulp watch&lt;/code&gt;命令。
  &lt;/p&gt;
  
  &lt;p&gt;
    但Zed必须有自动保存的功能。如果没有，则我们切换文件时，Zed就要提醒我们：保存当前文件吗？又或者我们可以在新标签页中打开另一文件，但如上面所说，Zed没有标签页。
  &lt;/p&gt;
  
  &lt;p&gt;
    当然，这种问题交给编辑器去解决，我觉得想法本身就有些问题，我们有&lt;a href=&#34;hhttp://www.zfanw.com/blog/gulp-js-watch-error-handle.html&#34;&gt;其他方法解决&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-4&#34;&gt;命令&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-4&#34; href=&#34;#i-4&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Zed没有菜单栏，所以许多操作除了使用快捷键外，都需要通过命令完成。
  &lt;/p&gt;
  
  &lt;p&gt;
    所有的命令都可以通过goto UI来调用。goto UI是Zed的一个命令入口，平时隐藏起来，但可以通过一些特殊按键唤出，比如&lt;kbd&gt;Ctrl-.&lt;/kbd&gt;或&lt;kbd&gt;Ctrl-Shift-.&lt;/kbd&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    当然，你也可以重新定义按键组合，比如在user.json中增加：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;keys: {
        &#34;Command:Enter Command&#34;: {
            win: &#34;Ctrl-Shift-P&#34;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    goto UI支持模糊匹配，所以我们不需要记住完整的命令，只大概知道几个单词或者字母就可以。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-5&#34;&gt;多游标&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-5&#34; href=&#34;#i-5&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    虽说它的功能跟查找/替换相近，但多游标似乎成了现下编辑器的标配。Sublime Text里有，Adobe Brackets在Sprint 38版本中也加入该功能，Zed同样提供多游标。
  &lt;/p&gt;
  
  &lt;p&gt;
    首先，将光标置于要编辑的文本中(当然你也可以先选中文本)，然后，
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      按&lt;kbd&gt;Ctrl-Alt-Right&lt;/kbd&gt;，Zed会选中随后的同一文本；
    &lt;/li&gt;
    &lt;li&gt;
      或者也可以按&lt;kbd&gt;Ctrl-Alt-Left&lt;/kbd&gt;选择此前的同一文本；
    &lt;/li&gt;
    &lt;li&gt;
      &lt;kbd&gt;Ctrl-Alt-F&lt;/kbd&gt;则选中所有相同文本。
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    在选择好多处文本后，按上、下、左、右方向键就可以移动多处光标的位置，也就可以同时编辑多处文本。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-6&#34;&gt;多面板&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-6&#34; href=&#34;#i-6&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    虽然Zed没有标签页功能，但它也提供了一个多面板功能。
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;kbd&gt;Ctrl-2&lt;/kbd&gt; &amp;#8211; 将窗口分割为左右两个面板
    &lt;/li&gt;
    &lt;li&gt;
      &lt;kbd&gt;Ctrl-3&lt;/kbd&gt; &amp;#8211; 将窗口分割为三个等宽面板
    &lt;/li&gt;
    &lt;li&gt;
      &lt;kbd&gt;Ctrl-1&lt;/kbd&gt; &amp;#8211; 恢复原状
    &lt;/li&gt;
    &lt;li&gt;
      &lt;kbd&gt;Ctrl-0&lt;/kbd&gt; &amp;#8211; 多面板间切换焦点
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    如果你编辑的是Markdown文件或是CoffeeScript文件，按&lt;kbd&gt;Ctrl-p&lt;/kbd&gt;可以在右侧面板实时预览编译效果，非常便利。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-7&#34;&gt;自动更新&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-7&#34; href=&#34;#i-7&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Zed的作者目前全职开发Zed，所以编辑器的更改会很频繁，不过Zed具备自动更新功能，所以不需要我们频繁跟踪进度。只需要在软件提醒更新时，重启Zed就好。
  &lt;/p&gt;
  
  &lt;footnotes&gt;
    &lt;fn name=&#34;12411.1&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://www.vim.org/&#34;&gt;welcome home : vim online&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;12411.3&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text: The text editor you&amp;#8217;ll fall in love with&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;12411.4&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://www.lighttable.com/&#34;&gt;Light Table&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;12411.5&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://brackets.io/&#34;&gt;Brackets &amp;#8211; The Free, Open Source Code Editor for the Web&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;12411.6&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;12411.7&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://zedapp.org/&#34;&gt;Zed | Zed — Rethinking Code Editing&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
  &lt;/footnotes&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>