<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/php/</link>
    <description>Recent content in Php on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 12 Jan 2013 04:05:34 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHP 中构建查询语句</title>
      <link>https://www.zfanw.com/blog/php-mysql-query-sprintf.html</link>
      <pubDate>Sat, 12 Jan 2013 04:05:34 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/php-mysql-query-sprintf.html</guid>
      <description>&lt;p&gt;如果是很直白的一条 SQL 查询语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM `SAM`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就没什么好说的。但是，更多时候需要从用户返回的变量中构建查询语句。比如，一个表单，提交给服务器上的 PHP 文件 &lt;code&gt;$_POST[&#39;when&#39;]&lt;/code&gt;，&lt;code&gt;$_POST[&#39;why&#39;]&lt;/code&gt; 两个变量。常见的构建查询语句方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = &amp;quot;SELECT * FROM `SAM` WHERE Reason =&#39;&amp;quot; . $_POST[&#39;why&#39;] . &amp;quot;&#39; AND WHERE Time = &#39;&amp;quot;. $_POST[&#39;when&#39;] . &amp;quot;&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是上述写法，则不仅易出错，而且让人头大，也很难看出它表达了什么。&lt;/p&gt;

&lt;p&gt;更快捷、直观的方法，是使用 sprintf() 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = sprintf(&amp;quot;SELECT * FROM `SAM` WHERE Reason = &#39;%s&#39; AND WHERE Time = &#39;%s&#39;&amp;quot;,%_POST[&#39;why&#39;],%_POST[&#39;when&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就将变量从中区别开来，传递给 sprintf 函数的第一个参数即我们的 SQL 语句，只是用类似占位符的东西替代变量，这样的句子接近自然语言，很容易知道它是做什么，之后我们再将变量传入，函数将其替代后再返回字符串。&lt;/p&gt;

&lt;p&gt;换一个角度说，其实许多模板语言比如 Smarty 也是接近这样的思路，把变量与结构区别开来，一来有助于理解，二来也便于修改。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP printf() 函数</title>
      <link>https://www.zfanw.com/blog/php-printf.html</link>
      <pubDate>Fri, 28 Dec 2012 12:40:15 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/php-printf.html</guid>
      <description>&lt;p&gt;说实话，我感觉我从来就没看懂过 PHP 官网上对任何一个函数的解释，比如这 &lt;a href=&#34;http://php.net/manual/en/function.printf.php&#34;&gt;printf()&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;printf() 函数与 print() 函数很接近，但后者只是简单地输出，你喂给它什么，它就吐出什么，前者则有格式化处理后再输出。&lt;/p&gt;

&lt;p&gt;来看看 PHP 官网上对它的描述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;int printf ( string $format [, mixed $args [, mixed $... ]] )
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;int 是指函数返回的是一个数值，表示输出的字符串的长度。重点是 $format 这个字符串。&lt;/p&gt;

&lt;p&gt;这个 $format 有5个可选部分，并且有一定顺序：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;填充指示符 &amp;#8211; 默认为空格&lt;/li&gt;
&lt;li&gt;对齐指示符 &amp;#8211; 默认为右对齐&lt;/li&gt;
&lt;li&gt;宽度指示符&lt;/li&gt;
&lt;li&gt;精度指示符&lt;/li&gt;
&lt;li&gt;类型指示符&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;举一个这5个可选部分全都有的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$num=4;
printf(&amp;quot;陈三与%&#39;,-10.3f个月亮&amp;quot;,$num);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上语句会输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;陈三与4.000,,,,,个月亮
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来看看上面例子中 $format 部分 「&lt;code&gt;%&#39;,-10.3f&lt;/code&gt;」，可以分解如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; 指示格式化的部分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;,&lt;/code&gt; 指示填充符号为 &lt;code&gt;,&lt;/code&gt;，默认为空格，可以不写，但使用其他符号填充时，前面需要加一个单引号来指示，比如 &lt;code&gt;&#39;&#39;&lt;/code&gt; 使用单引号填充，比如 &lt;code&gt;&#39;.&lt;/code&gt; 使用点号填充&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; 负号表示左对齐，填充在右边，默认为右对齐，上述例子中如果没有负号，则会显示成『陈三与,,,,,4.000个月亮』&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10&lt;/code&gt; 指示字符串填充到多少宽度，上例中即 &lt;code&gt;4.000,,,,&lt;/code&gt; 部分的宽度，10位；你可能会好奇当它太小时会怎样，比如上例中写成2，则根据后一个规则来调整&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.3&lt;/code&gt; 指示输出的小数位数，只影响浮点类型的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; 指示类型，f 表示浮点，s 表示字符串，d 表示整数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至于与 printf() 相近的 sprintf() 函数，返回的是格式化后的字符串，而非长度。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>