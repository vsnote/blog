<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sprintf on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/sprintf/</link>
    <description>Recent content in Sprintf on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 12 Jan 2013 04:05:34 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/sprintf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHP 中构建查询语句</title>
      <link>https://www.zfanw.com/blog/php-mysql-query-sprintf.html</link>
      <pubDate>Sat, 12 Jan 2013 04:05:34 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/php-mysql-query-sprintf.html</guid>
      <description>&lt;p&gt;如果是很直白的一条 SQL 查询语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM `SAM`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就没什么好说的。但是，更多时候需要从用户返回的变量中构建查询语句。比如，一个表单，提交给服务器上的 PHP 文件 &lt;code&gt;$_POST[&#39;when&#39;]&lt;/code&gt;，&lt;code&gt;$_POST[&#39;why&#39;]&lt;/code&gt; 两个变量。常见的构建查询语句方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = &amp;quot;SELECT * FROM `SAM` WHERE Reason =&#39;&amp;quot; . $_POST[&#39;why&#39;] . &amp;quot;&#39; AND WHERE Time = &#39;&amp;quot;. $_POST[&#39;when&#39;] . &amp;quot;&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是上述写法，则不仅易出错，而且让人头大，也很难看出它表达了什么。&lt;/p&gt;

&lt;p&gt;更快捷、直观的方法，是使用 sprintf() 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = sprintf(&amp;quot;SELECT * FROM `SAM` WHERE Reason = &#39;%s&#39; AND WHERE Time = &#39;%s&#39;&amp;quot;,%_POST[&#39;why&#39;],%_POST[&#39;when&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就将变量从中区别开来，传递给 sprintf 函数的第一个参数即我们的 SQL 语句，只是用类似占位符的东西替代变量，这样的句子接近自然语言，很容易知道它是做什么，之后我们再将变量传入，函数将其替代后再返回字符串。&lt;/p&gt;

&lt;p&gt;换一个角度说，其实许多模板语言比如 Smarty 也是接近这样的思路，把变量与结构区别开来，一来有助于理解，二来也便于修改。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>