<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Npm on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/npm/</link>
    <description>Recent content in Npm on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 30 Jun 2016 06:32:13 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/npm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>peerDependencies</title>
      <link>https://www.zfanw.com/blog/peerdependencies.html</link>
      <pubDate>Thu, 30 Jun 2016 06:32:13 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/peerdependencies.html</guid>
      <description>&lt;p&gt;写 npm package 时，接触最多的，当属 &lt;a href=&#34;https://www.zfanw.com/blog/difference-between-dependencies-and-devdependencies.html&#34;&gt;dependencies 与 devDependencies&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如果一个包定义了 &lt;code&gt;dependencies&lt;/code&gt; 与 &lt;code&gt;devDependencies&lt;/code&gt;，则我们在安装这个包时，会连着它的依赖们一同安装。&lt;/p&gt;

&lt;p&gt;比如一个 react-native 的包，它依赖于 &lt;code&gt;react&lt;/code&gt; 与 &lt;code&gt;react-native&lt;/code&gt;，如果我们把 &lt;code&gt;react&lt;/code&gt; 及 &lt;code&gt;react-native&lt;/code&gt; 定义在 &lt;code&gt;dependencies&lt;/code&gt; 下，则安装完这个包后，它的目录结构是这样：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ProjectRoot/node_modules/package_name/node_modules/react&lt;/li&gt;
&lt;li&gt;ProjectRoot/node_modules/package_name/node_modules/react-native&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们又下载了一遍 react 与 react-native，这显得多余，可能还会导致冲突问题。&lt;/p&gt;

&lt;p&gt;这时我们就可以使用 &lt;a href=&#34;https://nodejs.org/en/blog/npm/peer-dependencies/&#34;&gt;&lt;code&gt;peerDependencies&lt;/code&gt;&lt;/a&gt;，通过它，我们能够声明第三方包正常运行的环境 &amp;#8211; 要安装我，你的环境该是如何，否则将无法运行。当然，没人会无聊到在一个 ember.js 项目中安装一个 react-native 的第三方包。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dependencies 与 devDependencies 的区别</title>
      <link>https://www.zfanw.com/blog/difference-between-dependencies-and-devdependencies.html</link>
      <pubDate>Fri, 23 May 2014 17:36:09 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/difference-between-dependencies-and-devdependencies.html</guid>
      <description>&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt; 在安装 npm 包时，有两种命令参数可以把它们的信息写入 &lt;code&gt;package.json&lt;/code&gt; 文件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;#8211;save&lt;/li&gt;
&lt;li&gt;&amp;#8211;save-dev&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但它的文档里&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12811-1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12811-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，只提到一个小区别，&lt;code&gt;--save&lt;/code&gt; 会把依赖包名称添加到 &lt;code&gt;package.json&lt;/code&gt; 文件 &lt;code&gt;dependencies&lt;/code&gt; 键下，&lt;code&gt;--save-dev&lt;/code&gt; 则添加到 &lt;code&gt;package.json&lt;/code&gt; 文件 &lt;code&gt;devDependencies&lt;/code&gt; 键下，譬如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;yo&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.0&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {},
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;grunt&amp;quot;: &amp;quot;~0.4.1&amp;quot;,
    &amp;quot;grunt-contrib-copy&amp;quot;: &amp;quot;~0.4.1&amp;quot;,
    &amp;quot;grunt-contrib-concat&amp;quot;: &amp;quot;~0.3.0&amp;quot;,
    &amp;quot;grunt-contrib-uglify&amp;quot;: &amp;quot;~0.2.0&amp;quot;,
    &amp;quot;grunt-contrib-compass&amp;quot;: &amp;quot;~0.7.0&amp;quot;,
    &amp;quot;grunt-contrib-jshint&amp;quot;: &amp;quot;~0.7.0&amp;quot;,
    &amp;quot;grunt-contrib-cssmin&amp;quot;: &amp;quot;~0.7.0&amp;quot;,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过这只是它们的表面区别。它们真正的区别是，&lt;code&gt;devDependencies&lt;/code&gt; 下列出的模块，是我们开发时用的，比如 grunt-contrib-uglify，我们用它混淆 js 文件，它们不会被部署到生产环境。&lt;code&gt;dependencies&lt;/code&gt; 下的模块，则是我们生产环境中需要的依赖。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:12811-1&#34;&gt;&lt;a href=&#34;https://www.npmjs.org/doc/cli/npm-install.html&#34;&gt;npm-install&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12811-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>NPM 安装目录问题</title>
      <link>https://www.zfanw.com/blog/npm-install-current-location.html</link>
      <pubDate>Fri, 04 Jan 2013 10:00:08 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/npm-install-current-location.html</guid>
      <description>&lt;p&gt;因为要安装 &lt;a href=&#34;https://npmjs.org/package/grunt-contrib-less&#34;&gt;Grunt-contrib-less&lt;/a&gt; 用于 less 自动 compile 成 CSS，按其说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install grunt-contrib-less
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再到 grunt.js 文件中添加相应配置，然后在命令行运行命令，问题来了：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Local Npm module &amp;#8220;grunt-contrib-less&amp;#8221; not found. Is it installed?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;运行 &lt;code&gt;npm ls&lt;/code&gt;，可以看到，grunt-contrib-less 安装到用户目录 /home/sam/ 下。而按 NPM 上的说明，如果不曾加参数 『-g』，是应该安装在当前目录下的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm config ls&lt;/code&gt; 查看其配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ; cli configs
    registry = &amp;quot;https://registry.npmjs.org/&amp;quot;

    ; userconfig /home/sam/.npmrc
    https-proxy = &amp;quot;http://127.0.0.1:8118/&amp;quot;
    proxy = &amp;quot;http://127.0.0.1:8118/&amp;quot;

    ; node bin location = /usr/bin/nodejs
    ; cwd = /home/sam/tmp/
    ; HOME = /home/sam
    ; &#39;npm config ls -l&#39; to show all defaults.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并无不妥的地方。&lt;/p&gt;

&lt;p&gt;而且，无论我切换到哪个目录下按装 NPM 包，除非带上参数 『-g』，否则全部都安装后 「/home/sam/node_modules」 目录下。&lt;/p&gt;

&lt;p&gt;解决办法是，在当前目录下创建一个 node_modules 目录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir node_modules
npm install grunt-contrib-less
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以安装到当前目录下而非用户主目录下。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NPM 安装包</title>
      <link>https://www.zfanw.com/blog/npm-install-package.html</link>
      <pubDate>Wed, 26 Dec 2012 12:38:57 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/npm-install-package.html</guid>
      <description>

&lt;p&gt;打算安装个 &lt;a href=&#34;http://twitter.github.com/bower/&#34;&gt;Bower&lt;/a&gt; 用于一些库文件的管理，Nodejs、NPM 安装完后，运行命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令卡住很久，然后出错了,大抵是 『tunnel&amp;#8230;socket&amp;#8230;unknown protocol』 之类。&lt;/p&gt;

&lt;p&gt;网络是处于完全畅通状态。&lt;/p&gt;

&lt;p&gt;有人说是 proxy 的问题，我的系统下安装有 &lt;a href=&#34;http://www.privoxy.org/&#34;&gt;privoxy&lt;/a&gt;，启用了 http 与 https 代理为 『127.0.0.1：8118』。&lt;/p&gt;

&lt;p&gt;在 Zsh 下输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $http_proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示为 『&lt;a href=&#34;http://127.0.0.1:8118/』，调用&#34;&gt;http://127.0.0.1:8118/』，调用&lt;/a&gt; &lt;code&gt;unset $http_proxy&lt;/code&gt;，再安装 bower，仍然失败。可能因为这个环境变量不是通过 &lt;code&gt;export&lt;/code&gt; 命令设置的。&lt;/p&gt;

&lt;p&gt;且不说其成功与否，光是为了用 NPM 安装包文件就要取消这系统代理，不免不合理。&lt;/p&gt;

&lt;p&gt;再找资料，则知道可以通过 &lt;code&gt;npm config&lt;/code&gt; 命令来配置其环境：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm config set proxy http://127.0.0.1:8118
npm config set https-proxy http://127.0.0.1:8118
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后再运行 &lt;code&gt;npm install&lt;/code&gt; 就完全正常 &amp;#8211; 因为安装中使用 /usr/lib/ 目录，所以可能需要管理员权限，在 Ubuntu 下是运行 &lt;code&gt;sudo npm install...&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;安装完 bower 后，就可以安装 JavaScript 库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install jquery
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://jjasonclark.com/how-to-setup-node-behind-web-proxy&#34;&gt;How to setup Node.js and Npm behind a corporate web proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://npmjs.org/doc/config.html&#34;&gt;Manage the npm configuration file&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>