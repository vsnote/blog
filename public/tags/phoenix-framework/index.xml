<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phoenix Framework on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/phoenix-framework/</link>
    <description>Recent content in Phoenix Framework on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 08 Jun 2016 03:15:58 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/phoenix-framework/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>no matching action clause to process request</title>
      <link>https://www.zfanw.com/blog/no-matching-action-clause-to-process-request.html</link>
      <pubDate>Wed, 08 Jun 2016 03:15:58 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/no-matching-action-clause-to-process-request.html</guid>
      <description>&lt;p&gt;本文基于 phoenix framework 1.1.4。&lt;/p&gt;

&lt;p&gt;我在 phoenix 项目里，定义了这样一个函数，用来过滤用户：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def index(conn, %{&amp;quot;email&amp;quot; =&amp;gt; email, &amp;quot;codename&amp;quot; =&amp;gt; codename}) do
    # ... get the user with the filters
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问以下两个路径：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:4000/api/users?codename=Plator&#34;&gt;http://localhost:4000/api/users?codename=Plator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:4000/api/users?email=chenxsan@example.com&#34;&gt;http://localhost:4000/api/users?email=chenxsan@example.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;均会报告以下错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Phoenix.ActionClauseError at GET /api/users&lt;/p&gt;

&lt;p&gt;bad request to IngressRun.UserController.index, no matching action clause to process request&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但如果访问&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:4000/api/users?email=chenxsan@example.com&amp;amp;codename=Plator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;却是能正常响应的。&lt;/p&gt;

&lt;p&gt;看&lt;a href=&#34;http://elixirforum.com/t/am-i-doing-this-right-pattern-matching-in-controller-methods/249/2&#34;&gt;这篇&lt;/a&gt;的意思，我有多少个过滤条件，过滤条件组合一下，我就要定义多少个 action &amp;#8211; 并不现实，也很傻。&lt;/p&gt;

&lt;p&gt;比较靠谱的做法是&lt;a href=&#34;https://medium.com/@kaisersly/filtering-from-params-in-phoenix-27b85b6b1354#.oebhg9kbm&#34;&gt;这一篇&lt;/a&gt;。不过它的示例里：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post
|&amp;gt; where(^filters)
|&amp;gt; Repo.all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在我的测试中，会报一个编译错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cannot use ^filters outside of match clauses&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;换成以下形式就没问题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from(p in Post, where: ^filters) |&amp;gt; Repo.all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外我好奇的是，为什么这种过滤资源的常用功能，许多框架都不集成，phoenix 里我没见到，express.js 里也没有。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elixir Guardian 库的 current_user</title>
      <link>https://www.zfanw.com/blog/elixir-guardian-authentication-current_user.html</link>
      <pubDate>Sun, 22 May 2016 04:50:32 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/elixir-guardian-authentication-current_user.html</guid>
      <description>&lt;p&gt;如果你用 &lt;a href=&#34;http://www.phoenixframework.org/docs/sessions&#34;&gt;Phoenix framework 的 session&lt;/a&gt; 管理会话，那么你的登录函数大概是这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def login(conn, user) do
    conn
    |&amp;gt; assign(:current_user, user)
    |&amp;gt; put_session(:user_id, user.id)
    |&amp;gt; configure_session(renew: true)
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 &lt;code&gt;assign(:current_user, user)&lt;/code&gt; 允许我们在模板中直接使用 &lt;code&gt;@current_user&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&#34;https://github.com/ueberauth/guardian&#34;&gt;Guardian&lt;/a&gt; 下，因为我们把会话管理交给 guardian，所以代码大概是这么写的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case IngressRun.Auth.login_by_email_and_pass(conn, email, pass, repo: Repo) do
      {:ok, user} -&amp;gt;
        conn
        |&amp;gt; Guardian.Plug.sign_in(user)
        |&amp;gt; put_flash(:info, &amp;quot;Welcome back!&amp;quot;)
        |&amp;gt; redirect(to: page_path(conn, :index))
      {:error, _reason, conn} -&amp;gt;
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Invalid email/password combination&amp;quot;)
        |&amp;gt; render(&amp;quot;new.html&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么有一个问题，在 guardian 下，我们的模板要怎样取到 &lt;code&gt;current_user&lt;/code&gt; 的值？&lt;/p&gt;

&lt;p&gt;guardian 提供了方法，让我们取得当前的用户资源：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Guardian.Plug.current_resource(conn)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以要在模板中使用 &lt;code&gt;@current_user&lt;/code&gt;，我们的 controller 函数大概是这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defmodule IngressRun.AboutController do
  use IngressRun.Web, :controller

  def index(conn, _params) do
    conn
    |&amp;gt; assign(:current_user, Guardian.Plug.current_resource(conn))
    |&amp;gt; render(&amp;quot;index.html&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;guardian 还提供了 Phoenix 助手，所以在 controller 中我们可以把上面的代码改写如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defmodule IngressRun.AboutController do
  use IngressRun.Web, :controller
  use Guardian.Phoenix.Controller

  def index(conn, _params, user, _claims) do
    conn
    |&amp;gt; assign(:current_user, user)
    |&amp;gt; render(&amp;quot;index.html&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但因为这个 &lt;code&gt;current_user&lt;/code&gt; 每个页面都要用到，则每个 controller 里的每个 action 都要写一遍 &lt;code&gt;assign(:current_user, user)&lt;/code&gt;，未免太棘手。&lt;/p&gt;

&lt;p&gt;这时我们就可以用上 &lt;a href=&#34;https://github.com/elixir-lang/plug#the-plugconn&#34;&gt;plug&lt;/a&gt; &amp;#8211; 如果你写过 express.js，则这个概念与中间件类似：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plug :assign_current_user
# ...
defp assign_current_user(conn, _opts) do
    assign(conn, :current_user, Guardian.Plug.current_resource(conn))
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以把这个 plug 定义在 controller 里，但如前面所说的，整个站点都要用到它，则定义在 &lt;code&gt;pipeline&lt;/code&gt; 里会更合适，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipeline :browser_session do
    plug Guardian.Plug.VerifySession
    plug Guardian.Plug.LoadResource
    plug :assign_current_user
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就可以继续在模板中使用 &lt;code&gt;&amp;lt;%= @current_user %&amp;gt;&lt;/code&gt; 了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>