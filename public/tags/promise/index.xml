<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Promise on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/promise/</link>
    <description>Recent content in Promise on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 06 Apr 2015 05:17:25 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/promise/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>jQuery 动画 Promise</title>
      <link>https://www.zfanw.com/blog/jquery-animate-promise.html</link>
      <pubDate>Mon, 06 Apr 2015 05:17:25 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/jquery-animate-promise.html</guid>
      <description>&lt;p&gt;jQuery 的 &lt;code&gt;show&lt;/code&gt;、&lt;code&gt;hide&lt;/code&gt; 方法大家都好熟悉的，也知道它可以接受一个回调函数，用于动画完成后执行。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;.js-sam&#39;).hide(&#39;slow&#39;, function() {
    alert(&#39;你刚刚隐藏了 sam&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，jQuery 1.8 以后版本还提供了另一种书写风格，即 Promise &amp;#8211; 这个中文翻译好难，目前看到有叫&lt;strong&gt;承诺&lt;/strong&gt;的 &amp;#8211; 我还是继续用 Promise 的叫法。譬如上面的示例代码，我们可以改成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var promiseMeHideSam = $(&#39;.js-sam&#39;).hide(&#39;slow&#39;).promise();

function whenDone() {
    alert(&#39;你刚刚隐藏了 sam&#39;);
}

promiseMeHideSam.done(whenDone);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，&lt;code&gt;promise()&lt;/code&gt; 方法未传递参数，则默认为 &lt;code&gt;fx&lt;/code&gt;，表示动画效果。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://promisesaplus.com/&#34;&gt;Promise&lt;/a&gt; 比起回调（callback），有非常多好处，最明显的一个，我们可以把动画完成后要执行的所有回调动作解构。因为给 &lt;code&gt;hide&lt;/code&gt; 函数传递回调的话，我们只能把所有动作写入该回调中，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;.js-sam&#39;).hide(&#39;slow&#39;, function() {

  // 触发一

  // 触发二

  // 触发三

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但如果是 Promise 的写法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func1() {}
func2() {}
func3() {}
promiseMehideSam.done(func1);
promiseMehideSam.done(func2);
promiseMehideSam.done(func3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以把三个触发结果分解到三个函数中，而不必写入一个庞大的回调函数里，一来不便维护代码，二来也不易阅读。&lt;/p&gt;

&lt;p&gt;另外一种常见情形，比如我们要在动画 A 与动画 B 都结束后执行某个回调。如果照第一种传递回调函数的方法 &amp;#8211; 就我所知，没法写。但 Promise 就可以：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var animate1 = $(&#39;.js-sam&#39;).hide().promise();
var animate2 = $(&#39;.js-hi&#39;).show().promise();

function whenBothEnd() {

  // animate1 与 animate2 结束后执行
  console.log(&#39;动画全部结束&#39;);
}

$.when(animate1, animate2).done(whenBothEnd);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;非常优雅。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>