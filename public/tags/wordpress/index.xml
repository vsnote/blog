<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wordpress on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/wordpress/</link>
    <description>Recent content in Wordpress on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 02 Nov 2014 01:11:55 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/wordpress/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>WordPress 迁移</title>
      <link>https://www.zfanw.com/blog/wordpress-move.html</link>
      <pubDate>Sun, 02 Nov 2014 01:11:55 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-move.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 备份旧服务器上的数据库&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 备份旧服务器上的文件&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 导入旧数据库到新服务器&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-4&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 复制旧文件到新服务器&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-5&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; 解析域名&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-6&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;6&lt;/span&gt; 错误情况&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    前些日子我终于下定决心买 VPS，然后就把这个博客从虚拟主机上迁移过去。因为域名不变，只是换空间，所以大部分步骤是按 &lt;a href=&#34;http://codex.wordpress.org/Moving_WordPress#Keeping_Your_Domain_Name_and_URLs&#34;&gt;WordPress 提供的文档&lt;/a&gt;操作。不过过程中碰上不少问题，最终且算是解决了，所以做一总结。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;备份旧服务器上的数据库&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    旧的虚拟主机上提供有 cPanel 界面，所以&lt;a href=&#34;http://codex.wordpress.org/Backing_Up_Your_Database&#34;&gt;操作&lt;/a&gt;十分简单。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;备份旧服务器上的文件&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    同样可以借助 cPanel。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;导入旧数据库到新服务器&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    因为 VPS 上没有 cPanel，所以数据库的导入是通过&lt;a href=&#34;http://codex.wordpress.org/Restoring_Your_Database_From_Backup&#34;&gt;命令行执行&lt;/a&gt;的。
  &lt;/p&gt;
  
  &lt;p&gt;
    首先通过 &lt;a href=&#34;http://www.zfanw.com/blog/ssh-usage.html&#34;&gt;SSH 登录&lt;/a&gt;到服务器：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;ssh zfanw
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后执行 MySQL 命令：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sam@zfanw.com: mysql -u mysqlusername -p databaseName &amp;lt; zfanw.com.bak.sql
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    导入的过程非常快，如果不确信是否成功，可以执行 MySQL 命令查看：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;use zfanwcom;
show tables;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    结果如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+---------------------------+
| Tables_in_zfanwcom |
+---------------------------+
| wp_PopularPostsdata       |
| wp_commentmeta            |
| wp_comments               |
| wp_links                  |
| wp_options                |
| wp_postmeta               |
| wp_posts                  |
| wp_sucuri_lastlogins      |
| wp_term_relationships     |
| wp_term_taxonomy          |
| wp_terms                  |
| wp_usermeta               |
| wp_users                  |
+---------------------------+
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-4&#34;&gt;复制旧文件到新服务器&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-4&#34; href=&#34;#i-4&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    数据库导入完成后，将虚拟主机上备份的文件上传到 VPS 并解压到相应目录。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-5&#34;&gt;解析域名&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-5&#34; href=&#34;#i-5&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    将域名重新解析到新的 IP 上。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-6&#34;&gt;错误情况&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-6&#34; href=&#34;#i-6&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    解析完成后访问新 IP 上的博客，就出现了各种情况。
  &lt;/p&gt;
  
  &lt;p&gt;
    先来看下 &lt;em&gt;/etc/apache2/vhosts.d/&lt;/em&gt; 目录下 &lt;em&gt;zfanw.com.conf&lt;/em&gt; 这个虚拟主机文件的配置：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName zfanw.com
    ServerAlias www.zfanw.com
    ServerAdmin chenxsan@gmail.com

    DocumentRoot /srv/www/vhosts/zfanw.com

    &amp;lt;Directory &#34;/srv/www/vhosts/zfanw.com&#34;&amp;gt;
        AllowOverride All
        Options FollowSymLinks

        Order allow,deny
        Allow from all

    &amp;lt;/Directory&amp;gt;

&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h3&gt;
    404 错误
  &lt;/h3&gt;
  
  &lt;p&gt;
    我碰到的情况中，有一种错误是这样：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      Object not found!
    &lt;/p&gt;
    
    &lt;p&gt;
      The requested URL was not found on this server. The link on the referring page seems to be wrong or outdated. Please inform the author of that page about the error.
    &lt;/p&gt;
    
    &lt;p&gt;
      If you think this is a server error, please contact the webmaster.
    &lt;/p&gt;
    
    &lt;p&gt;
      Error 404
    &lt;/p&gt;
    
    &lt;p&gt;
      www.zfanw.com
    &lt;/p&gt;
    
    &lt;p&gt;
      Apache/2.4.6 (Linux/SUSE)
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    网上的资料有说是 &lt;em&gt;.htaccess&lt;/em&gt; 文件的问题，因为我自定义了 WordPress 的固定链接。但我的 &lt;em&gt;.htaccess&lt;/em&gt; 文件内容如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;# BEGIN WordPress
&amp;lt;IfModule mod_rewrite.c&amp;gt;
RewriteEngine On
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
&amp;lt;/IfModule&amp;gt;
# END WordPress
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这是 &lt;a href=&#34;http://codex.wordpress.org/htaccess#Basic_WP&#34;&gt;WordPress 默认&lt;/a&gt;的。另外，使用&lt;a href=&#34;http://www.zfanw.com/blog/apache-mod_deflate.html&#34;&gt;上一篇&lt;/a&gt;介绍的方法，可以看到我的服务器上已经安装了 &lt;em&gt;mod_rewrite&lt;/em&gt; 模块。
  &lt;/p&gt;
  
  &lt;p&gt;
    我的情况下，问题出在 &lt;em&gt;/etc/apache2/httpd.conf&lt;/em&gt; 文件，&lt;a href=&#34;http://codex.wordpress.org/Permalinks#Fixing_Other_Issues&#34;&gt;WordPress 说明如下&lt;/a&gt;：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      Your server may not have the AllowOverride directive enabled. If the AllowOverride directive is set to None in your Apache httpd.config file, then .htaccess files are completely ignored. In this case, the server will not even attempt to read .htaccess files in the filesystem. When this directive is set to All, then any directive which has the .htaccess Context is allowed in .htaccess files.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    如果 Apache 的 &lt;em&gt;httpd.conf&lt;/em&gt; (openSUSE 下安装的 Apache 里配置文件是叫这个) 中 &lt;code&gt;AllowOverride&lt;/code&gt; 被设置为 &lt;em&gt;None&lt;/em&gt;，则 &lt;em&gt;.htaccess&lt;/em&gt; 文件完全被忽视，所以我需要修改 &lt;em&gt;httpd.conf&lt;/em&gt; 文件内容，结果如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt; &amp;lt;Directory /&amp;gt;
    Options FollowSymLinks
    AllowOverride All
 &amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    重启 Apache 服务器：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo rcapache2 restart
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    再度访问博客，问题消失了。
  &lt;/p&gt;
  
  &lt;p&gt;
    不过这篇是事后整理，碰上的许多枝末问题已经遗忘，不一定完整。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress body_class添加自定义类</title>
      <link>https://www.zfanw.com/blog/wordpress-body_class-customize.html</link>
      <pubDate>Sat, 09 Aug 2014 14:47:51 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-body_class-customize.html</guid>
      <description>&lt;p&gt;WordPress的PHP代码里，有如下一段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body &amp;lt;?php body_class(); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:13295-1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:13295-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;根据当前页面的状态，输出相应的CSS类，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body class=&amp;quot;single single-post postid-13295 single-format-standard logged-in&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些CSS类都是WordPress自动计算的，如果我们要添加自定义的CSS类，却不能直接在PHP代码中添加。而需要通过WordPress提供的filter。&lt;/p&gt;

&lt;p&gt;打开functions.php文件，添加如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function add_custom_body_class( $classes ) {
  global $post;
  if ( isset( $post ) ) {
    $classes[] = &#39;Grid&#39;;
  }
  return $classes;
}
add_filter( &#39;body_class&#39;, &#39;add_custom_body_class&#39; );
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就给WordPress的&lt;code&gt;body&lt;/code&gt;标签加了一个&lt;code&gt;Grid&lt;/code&gt;的CSS自定义类。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:13295-1&#34;&gt;&lt;a href=&#34;http://codex.wordpress.org/Function_Reference/body_class&#34;&gt;Function Reference/body class « WordPress Codex&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:13295-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 脚注</title>
      <link>https://www.zfanw.com/blog/wordpress-footnote.html</link>
      <pubDate>Thu, 26 Dec 2013 23:03:47 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-footnote.html</guid>
      <description>&lt;p&gt;至今为止，我的博客末尾，都是一个「扩展阅读」的外部链接。很多时候，其实想以脚注&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11153-1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11153-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;的形式展现，但 WordPress 并没有便捷的工具；写 HTML 代码的话，又嫌冗繁，也就没弄。&lt;/p&gt;

&lt;p&gt;前些日子在某个 feed 里看到 Bigfoot &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11153-2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11153-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;这个 jQuery 脚注插件，便收藏起来，想着有空试试。今天一试，还是要写不少 HTML 代码，而我在 WordPress 里是用 Markdown  &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11153-3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11153-3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;写的。要在 Markdown 简洁的语法中混入 HTML 代码，于我实在不忍心。想着又要放弃，结果莫名地又查了遍 PHP Markdown Extra &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11153-4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11153-4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;的文档，赫然发现有脚注的用法。&lt;/p&gt;

&lt;p&gt;用法非常简单。&lt;/p&gt;

&lt;p&gt;首先，在要插入脚注的位置插入 &lt;code&gt;[^1]&lt;/code&gt; 这样的内容。&lt;/p&gt;

&lt;p&gt;然后在底部插入 &lt;code&gt;[^1]: 这里是脚注的内容&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Markdown Extra 插件会自动生成相应的 HTML 代码。需要注意，如果有多个脚注内容，它们之间要换行隔开，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[^1]: 我是脚注内容1

[^2]: 我是脚注内容2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终效果见文末。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:11153-1&#34;&gt;&lt;a href=&#34;http://zh.wikipedia.org/wiki/Help:脚注&#34;&gt;脚注的概念&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11153-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11153-2&#34;&gt;&lt;a href=&#34;http://cmsauve.com/labs/bigfoot/&#34;&gt;Bigfoot&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11153-2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11153-3&#34;&gt;&lt;a href=&#34;http://www.zfanw.com/blog/wordpress-markdown.html&#34;&gt;WordPress 的 Markdown 用法&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11153-3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11153-4&#34;&gt;&lt;a href=&#34;http://michelf.ca/projects/php-markdown/extra/#footnotes&#34;&gt;PHP Markdown Extra 文档&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11153-4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 代码高亮插件 Highlight.js</title>
      <link>https://www.zfanw.com/blog/wordpress-plugin-syntax-highlight-js.html</link>
      <pubDate>Wed, 24 Apr 2013 23:40:46 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-plugin-syntax-highlight-js.html</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt; 支持71种程序代码的语法高亮，提供&lt;a href=&#34;http://highlightjs.org/static/test.html&#34;&gt;44种样式&lt;/a&gt;及各种&lt;a href=&#34;http://softwaremaniacs.org/soft/highlight/en/addons/&#34;&gt;扩展插件&lt;/a&gt;，其中包括 &lt;a href=&#34;http://wordpress.org/extend/plugins/wp-highlightjs/&#34;&gt;WordPress 插件&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但用 WordPress 插件做&lt;strong&gt;代码高亮&lt;/strong&gt;时，&lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights&#34;&gt;Google PageSpeed 测试中&lt;/a&gt;，会出现如下建议：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following external CSS files were included after an external JavaScript file in &lt;a href=&#34;http://www.zfanw.com/blog/wordpress-add-jquery.html&#34;&gt;http://www.zfanw.com/blog/wordpress-add-jquery.html&lt;/a&gt;. To ensure CSS files are downloaded in parallel, always include external CSS before external JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zfanw.com/blog/wp-content/plugins/wp-highlightjs/styles/default.css&#34;&gt;http://www.zfanw.com/blog/wp-content/plugins/wp-highlightjs/styles/default.css&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Highlight.js 插件将 CSS 文件附加到 JS 文件后，并且插件设置中没有提供任何调整顺序的选项。这会导致 CSS 文件不能并行请求。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;类似于 Google 提供的第三方库 CDN 服务，Yandex(俄罗斯的搜索引擎) 也有提供&lt;a href=&#34;http://api.yandex.ru/jslibs/libs.xml&#34;&gt;类似的公共服务&lt;/a&gt;，并且有 highlight.js，我可以在 WordPress 里直接引用 highlight 的 js 与 css 文件，文件出现的顺序就变得可控。&lt;/p&gt;

&lt;p&gt;打开 WordPress 的 functions.php 文件，加入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    function zfanw_add_highlight_js(){
        wp_enqueue_style(&#39;highlightcss&#39;,&#39;http://yandex.st/highlightjs/8.0/styles/default.min.css&#39;);
        wp_enqueue_script(&#39;highlightjs&#39;,&#39;http://yandex.st/highlightjs/8.0/highlight.min.js&#39;,array(),null,true);
    }
    add_action(&#39;wp_enqueue_scripts&#39;, &#39;zfanw_add_highlight_js&#39;);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后在 Footer.php 或 Header.php 文件中触发：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后，highlight.js 会查找页面内的代码片段，自动判断语言类型，并根据 CSS 样式主题高亮显示不同语法。如本页面所示的代码样式。&lt;/p&gt;

&lt;p&gt;如果要换掉代码高亮的样式主题，则只要将调用的 CSS 路径替换掉即可，比如，要从默认主题换成 Zenburn 主题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; wp_enqueue_style(&#39;highlightcss&#39;,&#39;http://yandex.st/highlightjs/8.0/styles/zenburn.min.css&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/isagalaev/highlight.js&#34;&gt;highlight.js 说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codex.wordpress.org/Function_Reference/wp_enqueue_script&#34;&gt;wp_enqueue_script&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WordPress RSS 标题重复</title>
      <link>https://www.zfanw.com/blog/wordpress-rss-title-duplicate.html</link>
      <pubDate>Mon, 18 Mar 2013 13:17:47 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-rss-title-duplicate.html</guid>
      <description>&lt;p&gt;我的博客标题为「陈三」，RSS 地址为 &lt;a href=&#34;http://www.zfanw.com/blog/feed&#34;&gt;http://www.zfanw.com/blog/feed&lt;/a&gt;，古怪的是，这个 feed 地址的标题重复了一次，显示为「陈三陈三」。&lt;/p&gt;

&lt;p&gt;WordPress 网站上也有人报告过&lt;a href=&#34;http://wordpress.org/support/topic/rss-feed-title-doubled&#34;&gt;同样问题&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在本地安装了全新的 WordPress 3.5.1，然后逐个安装插件进行排查，依然没有结果。至于以前安装的插件是否造成现在的影响，则是不得而知了。&lt;/p&gt;

&lt;p&gt;一个粗暴、简单的解决办法是，打开 &lt;code&gt;wp-include/feed-rss2.php&lt;/code&gt; 文件，查找如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;channel&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;?php bloginfo_rss(&#39;name&#39;);wp_title_rss(); ?&amp;gt;&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 &lt;code&gt;bloginfo_rss(&#39;name&#39;)&lt;/code&gt; 部分移除。&lt;/p&gt;

&lt;p&gt;但是，如上所说的，这个方法太过粗暴了。&lt;/p&gt;

&lt;p&gt;根据 &lt;a href=&#34;http://codex.wordpress.org/Plugin_API/Filter_Reference/wp_title&#34;&gt;WordPress&lt;/a&gt; 上关于 wp_title 过滤器的说明，则是我在写 wp_title 这个 filter 时少写了如下判断语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ( is_feed() )
    return $title;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 wp_title 函数中增加该语句后，RSS 的标题就不再重复了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BackWPup 更新至3.0.4</title>
      <link>https://www.zfanw.com/blog/backwpup-3-0-4.html</link>
      <pubDate>Mon, 04 Mar 2013 23:39:22 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/backwpup-3-0-4.html</guid>
      <description>&lt;p&gt;BackWPup 是我用的一个免费 WordPress 插件，用于定期将网站数据库、文件备份至 Dropbox，但从版本3开始后，在备份数据库过程出现如下错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ERROR: No MySQLi extension found. Please install it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为 BackWPup 自版本3起使用 MySQLi 扩展备份数据库，服务器不曾安装 MySQLi，数据库的备份只能失败并抛出错误。&lt;/p&gt;

&lt;p&gt;而且，看作者的意思，是不打算做任何 fallback 的。&lt;/p&gt;

&lt;p&gt;所以，解决办法是，在服务器上安装 MySQLi 这个 PHP 扩展，或者继续使用 BackWPup 2.xx 版本。&lt;/p&gt;

&lt;p&gt;附：&lt;a href=&#34;http://wordpress.org/extend/plugins/backwpup/changelog/&#34;&gt;它的版本变化说明&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;2014.4.9 目前 BackWpup 已经更新至3.1.2版本，并且我的情况可正常备份，不知道是作者想不开又继续支持 MySQL 还是主机商安装 MySQLi 了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 使用 Markdown 语法</title>
      <link>https://www.zfanw.com/blog/wordpress-markdown.html</link>
      <pubDate>Fri, 28 Sep 2012 16:59:07 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-markdown.html</guid>
      <description>

&lt;p&gt;现在很多网站都支持 &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; 语法，比如 StackOverflow，tumblr。WordPress 官方目前没有提供 Markdown 支持，不过 WordPress 扩展性很强，有插件可以使用。&lt;/p&gt;

&lt;p&gt;我安装的这个 WordPress 插件叫 PHP Markdown，安装很简单：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先从&lt;a href=&#34;http://michelf.ca/projects/php-markdown/&#34;&gt;它的网站&lt;/a&gt;下载 zip 压缩包&lt;/li&gt;
&lt;li&gt;登录 WordPress 后台&lt;/li&gt;
&lt;li&gt;选择 插件 -&amp;gt; 新插件&lt;/li&gt;
&lt;li&gt;选择下载的 zip 包，安装并启用插件&lt;/li&gt;
&lt;li&gt;此后新建的 post 及 page 的内容区域都将默认使用 Markdown 语法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PHP Markdown 所应用的 Markdown 语法是忠于原语法的，更加适用平时仅仅是写作的人们使用。而如果要处理其他，比如很多代码，则会带来一些麻烦。譬如我要在 post 里输入代码，则需要按四个空格或一个 Tab 缩进来表示，这还算好，如果要在列表里输入代码呢？需要空出八个空格或两个 Tab 缩进来表示。当然，我可以用 wp-sytax 这样的代码高亮工具管理，但这是题外话。&lt;/p&gt;

&lt;p&gt;也因此，上面介绍的这款插件其实还有加强版的，&lt;a href=&#34;http://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;。在这个加强版里，可以做到很多超出 Markdown 默认语法的东西，比如，可以给标题加 id：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##这是用 Markdown 语法写的标题二 {#markdown}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转换成 html 后是下面这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2 id=&amp;quot;markdown&amp;quot;&amp;gt;这是用 Markdown 语法写的标题二&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过，目前这种用法仅限于标题。&lt;/p&gt;

&lt;p&gt;另外，代码块还可以使用上下两条波浪线包围，注意它们的数量必须大于或等于 3,并且上下两条线数量要一致：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~~~
~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而如果是表格，可以使用以下格式，而不用直接书写 table、thead 等一堆 HTML 代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;语文|英语|数学
---|---|----
80|90|100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果是如下表格：&lt;/p&gt;

&lt;table class=&#34;table table-bordered table-striped table-condensed&#34;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      语文
    &lt;/th&gt;
    
    &lt;th&gt;
      英语
    &lt;/th&gt;
    
    &lt;th&gt;
      数学
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      80
    &lt;/td&gt;
    
    &lt;td&gt;
      90
    &lt;/td&gt;
    
    &lt;td&gt;
      100
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;比直接书写 table 的代码快捷。&lt;/p&gt;

&lt;p&gt;这样，很多时候，我甚至不用启动 &lt;a href=&#34;http://www.zfanw.com/blog/zencoding-vim-tutorial-chinese.html&#34;&gt;vim + zencoding.vim 写 html 代码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;附一张用 Markdown 写的这篇 blog 的截图，这比满屏的 html 代码可读性强多了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/09/Screenshot-from-2012-09-28-231357.png&#34; alt=&#34;php markdown 内容&#34; width=&#34;590&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;：2014.8.28 发现评论区域也可以使用 Markdown。&lt;/p&gt;

&lt;h2 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_Markdown_implementations&#34;&gt;markdown 的各种实施&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 搜索框追加到菜单列表中</title>
      <link>https://www.zfanw.com/blog/wordpress-seach-form-append-to-menu.html</link>
      <pubDate>Thu, 13 Sep 2012 01:33:19 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-seach-form-append-to-menu.html</guid>
      <description>

&lt;p&gt;我之前的博客，最上面是一个导航条，导航条左侧是博客名称，右侧是菜单。在这个菜单的右边有个搜索框，后来被我撤掉。原先放上去是因为我经常会用到搜索框来查找博客内容，而后来撤掉则是觉得可以用 Google 搜索，没有必要放个搜索框在页面上占空间，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/09/wordpress-search-form-append-menu.png&#34; alt=&#34;wordpress 菜单中的搜索框&#34; width=&#34;401&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果分开实现，则菜单的实现很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php wp_nav_menu(array(&#39;menu&#39; =&amp;gt; &#39;nav&#39; )); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 wp_nav_menu 函数调用主题定义的菜单即可，默认情况下会生成一个无序列表 ul。&lt;/p&gt;

&lt;p&gt;搜索框的单独调用也很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php get_search_form(); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认情况下会生成一个 form 表单。&lt;/p&gt;

&lt;p&gt;那么，要把这个搜索框追加到菜单列表中，即是将 form 表单包含到 li 条目里，可以使用 WordPress 的 filter 功能：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function search_box_function( $nav, $args ) {
   return $nav.&amp;quot;&amp;lt;li class=&#39;menu-item-search&#39;&amp;gt;&amp;quot;.get_search_form(false).&amp;quot;&amp;lt;/li&amp;gt;&amp;quot;;
}
add_filter(&#39;wp_nav_menu_items&#39;,&#39;search_box_function&#39;, 10, 2);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上，首先定义一个过滤函数 search_box_function，函数用于返回一个改造过的菜单，之后将这个函数挂勾到过滤动作 wp_nav_menu_items 上。这样，就把 WordPress 的搜索框追加到菜单列表最后一个 li 中。&lt;/p&gt;

&lt;h2 id=&#34;鸣谢&#34;&gt;鸣谢&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://codex.wordpress.org/Function_Reference/wp_nav_menu&#34;&gt;http://codex.wordpress.org/Function_Reference/wp_nav_menu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codex.wordpress.org/Function_Reference/get_search_form&#34;&gt;http://codex.wordpress.org/Function_Reference/get_search_form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codex.wordpress.org/Function_Reference/add_filter&#34;&gt;http://codex.wordpress.org/Function_Reference/add_filter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>给 WordPress 博客外部链接添加小图标</title>
      <link>https://www.zfanw.com/blog/wordpress-external-link-icon-jquery.html</link>
      <pubDate>Tue, 04 Sep 2012 03:58:09 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-external-link-icon-jquery.html</guid>
      <description>

&lt;p&gt;我的博客里，凡外部链接，它的右侧都有个小图标，用于标示出站链接，比如 &lt;a href=&#34;http://wordpress.org/&#34;&gt;WordPress&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最早打算使用 CSS 属性选择器，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.storycontent a{
    text-decoration:none;
    color:#000;
    padding-right:16px;
    background:url(http://www.zfanw.com/blog/wp-content/uploads/2012/08/icon_external.png)
        right center no-repeat;
}
.storycontent a[href^=&amp;quot;http://www.zfanw.com/blog&amp;quot;],
.storycontent a[href^=&amp;quot;#&amp;quot;]{
    background:none;
    padding-right:0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但这有个不足，IE6 不支持属性选择符(时至2013-10-25，你还要支持 IE6 吗，我真同情你)。&lt;/p&gt;

&lt;p&gt;另外一个办法，就是给外部链接加 class，比如 .external，然后赋予类某种样式，就没有浏览器兼容性问题。&lt;/p&gt;

&lt;p&gt;这个方法要用到 WordPress 的 filter，the_content。&lt;/p&gt;

&lt;p&gt;首先，在 functions.php 文件里创建一个函数 addExternalClass，用于过滤页面内容，之后再添加过滤勾子，这样内容在输出到屏幕前会按照我们的设定进行预处理：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function addExternalClass($content) {
    $content = str_replace(&#39;&amp;lt;a href=&#39;, &#39;&amp;lt;a class=&amp;quot;external&amp;quot; href=&#39;, $content);
    //首先将页面里所有链接都加上 .external 类
    $content = str_replace(&#39;&amp;lt;a class=&amp;quot;external&amp;quot; href=&amp;quot;http://www.zfanw.com&#39;, &#39;&amp;lt;a href=&amp;quot;http://www.zfanw.com&#39;, $content);
    //将带本站 url 地址 http://www.zfanw.com 的链接的类 .external 移除。
    $content = str_replace(&#39;&amp;lt;a class=&amp;quot;external&amp;quot; href=&amp;quot;#&#39;, &#39;&amp;lt;a href=&amp;quot;#&#39;, $content);
    //将锚链接的 .external 类移除
    return $content;
    //返回处理过的内容
}
add_filter(&#39;the_content&#39;, &#39;addExternalClass&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再之后，就是到 style.css 里给类 .external 写个规则：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.external{
    text-decoration:none;
    border-bottom:1px dashed #333;
    color:#000;
    padding-right:16px;
    background:url(http://www.zfanw.com/blog/wp-content/uploads/2012/08/icon_external.png)
        right center no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要让外部链接在新窗口打开，过滤函数里加个 &amp;#8220;target=&amp;#8217;_blank&amp;rsquo;&amp;#8221; 就可以。&lt;/p&gt;

&lt;p&gt;第三种办法，通过 jQuery filter 函数选择所有外部链接并添加 .external 类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jQuery(&#39;a&#39;).filter(function() {
   return this.hostname &amp;amp;&amp;amp; this.hostname !== location.hostname;
}).addClass(&amp;quot;external&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;鸣谢&#34;&gt;鸣谢&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://codex.wordpress.org/Plugin_API/Filter_Reference/the_content&#34;&gt;http://codex.wordpress.org/Plugin_API/Filter_Reference/the_content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://api.jquery.com/filter/&#34;&gt;http://api.jquery.com/filter/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://css-tricks.com/snippets/jquery/target-only-external-links/&#34;&gt;http://css-tricks.com/snippets/jquery/target-only-external-links/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 引用 jQuery</title>
      <link>https://www.zfanw.com/blog/wordpress-add-jquery.html</link>
      <pubDate>Mon, 06 Aug 2012 12:56:54 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-add-jquery.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 方法&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 时机&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 参考&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    WordPress 安装文件中默认包含有 jQuery 库，因此如果要引用 jQuery，可以直接引用安装文件中（在 wp-includes/js/jquery/ 文件夹下）的 jquery.js，也可以使用 Google 等 CDN 提供的 &amp;#8211; 它们间的区别仅在于安装文件中的 jquery.js 在文件最后加了一行：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;jQuery.noConflict()
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    该语句用于保证 WordPress 下 jQuery 库与其他库如 prototype.js 的兼容。
  &lt;/p&gt;
  
  &lt;p&gt;
    但无论是哪种引用方法，WordPress 都不推荐使用硬编码的方式，那样一来可能导致库文件多次载入，二来无法处理代码间的依存关系。所以，WordPress 推荐使用 wp_enqueue_script() 函数。注：以下代码均需写入 functions.php 文件。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;方法&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    简单的用法如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;wp_enqueue_script(&#39;jquery&#39;);
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    而如果要从 Google 的 CDN 上引用：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;wp_deregister_script( &#39;jquery&#39; );
wp_register_script( &#39;jquery&#39;, &#39;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&#39;);
wp_enqueue_script( &#39;jquery&#39; );
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    先在 WordPress 中取消注册 jquery，然后将其注册到 googleapis 上的地址，最后再引用。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;时机&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    上面讲的是 WordPress 引用 jQuery 的方法，这里讲的是时机，即什么情况下引用 jQuery。
  &lt;/p&gt;
  
  &lt;h3&gt;
    1. 前台页面引用
  &lt;/h3&gt;
  
  &lt;p&gt;
    wp_enqueue_scripts 是一个 WordPress action（动作），可以保证仅在前台页面里引用 jquery。用法如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;?php
function add_jquery_support() {
    wp_deregister_script( &#39;jquery&#39; );
    wp_register_script( &#39;jquery&#39;, &#39;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&#39;);
    wp_enqueue_script( &#39;jquery&#39; );
}    
add_action(&#39;wp_enqueue_scripts&#39;, &#39;add_jquery_support&#39;);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h3&gt;
    2. 后台引用
  &lt;/h3&gt;
  
  &lt;p&gt;
    使用 admin_enqueue_scripts 动作勾子，用法同上。但这个要谨慎使用，因为可能造成后台管理功能或插件功能的丢失。
  &lt;/p&gt;
  
  &lt;h3&gt;
    3. 针对某些页面引用
  &lt;/h3&gt;
  
  &lt;p&gt;
    比如，在创建新的主题时，可能会在后台增加一个管理页面，用于设置一些选项(options)，那么，我们可能想只针对这个页面引用 jquery 及其他脚本。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;?php
add_action(&#39;admin_menu&#39;, &#39;create_theme_options_menu&#39;);
function create_theme_options_menu() {  
    $themepage=add_theme_page(&#39;Theme Options&#39;, &#39;Theme Options&#39;, &#39;administrator&#39;, __FILE__, &#39;build_options_page&#39;);
    add_action(&#39;admin_print_styles-&#39; . $themepage, &#39;my_theme_admin_styles&#39;);
}
function my_theme_admin_styles(){
    wp_enqueue_script(&#39;media-upload&#39;);
        wp_enqueue_script(&#39;thickbox&#39;);
        wp_enqueue_script(&#39;jquery&#39;);
        wp_enqueue_style(&#39;thickbox&#39;);
        wp_enqueue_script(&#39;farbtastic&#39;);
        wp_enqueue_style(&#39;farbtastic&#39;);
        wp_enqueue_script(//加载 jQuery 运行函数
        &#39;color-picker-script&#39;, get_template_directory_uri() . &#39;/js/colorpicker.js&#39;, array (
            &#39;farbtastic&#39;,
            &#39;jquery&#39;
        ));
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    上面的代码在 WordPress 后台 Appearance 下生成一个 Theme options 管理页面，并且仅在该页面加载上面代码列出的脚本。这样就不会对其他管理页面造成未知的影响了。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;参考&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://codex.wordpress.org/Function_Reference/wp_enqueue_script&#34;&gt;http://codex.wordpress.org/Function_Reference/wp_enqueue_script&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://codex.wordpress.org/Function_Reference/add_theme_page&#34;&gt;add_theme_page&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress wp_title 过滤器</title>
      <link>https://www.zfanw.com/blog/wordpress-wp_title-filter.html</link>
      <pubDate>Fri, 13 Jul 2012 10:54:09 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-wp_title-filter.html</guid>
      <description>

&lt;p&gt;WordPress 里，wp_title() 函数用于显示或返回页面标题 (title of page)，可以用在 header.php 里，但是 WordPress 的文档中又不建议直接在 header.php 中使用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The wp_title() function should not be used by a theme in conjunction with other strings or functions (like concocting with bloginfo(&amp;#8216;name&amp;#8217;) ) to set the title because it will render plugins unable to rewrite page titles correctly. The best practice is to use the wp_title filter with a callback function. This method is now a requirement for themes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就是说，以下形式的用法并不推荐，因为可能会造成 WordPress 插件无法正确重写标题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    wp_title();
    bloginfo(&#39;name&#39;);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WordPress 文档的建议的方法是使用 wp_title 过滤器(filter)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;filter function takes as input the unmodified data, and returns modified data (or in some cases, a null value to indicate the data should be deleted or disregarded).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按上述定义，过滤器函数接受数据，然后返回改变后的数据。&lt;/p&gt;

&lt;p&gt;也就是说，我们把 wp_title() 函数用 wp_title 过滤器改造。但这个改造有两个条件，一是过滤函数 &amp;#8211; 下面语句中的 $function_to_add，决定怎么改造，一个是过滤勾子(hook) &amp;#8211; 如下的 $tag，决定改造什么内容。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php add_filter( $tag, $function_to_add, $priority, $accepted_args ); ?&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们先在 function.php 中定义一个 wp_title 过滤函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    function yl_filter_wp_title($title,$sep,$seplocation){
    global $paged,$page;//$paged 定义博客分页的页码，$page 定义单篇内容分页处理的页码
        $sep=&amp;quot; &amp;quot;.$sep.&amp;quot; &amp;quot;;//给分隔符号前后添加空格
    if ($seplocation==&#39;right&#39;){//判断分隔符位置是左还是右
        $title=$title.get_bloginfo(&#39;name&#39;);
    }else{
        $title=get_bloginfo(&#39;name&#39;).$title;
        }
    if ( $paged &amp;gt;= 2 || $page &amp;gt;= 2 ){
        if ($seplocation==&#39;right&#39;)
        $title=sprintf( __( &#39;Page %s&#39;, &#39;&#39; ), max( $paged, $page ) ).$sep.$title;
        else
            $title.=$sep.sprintf( __( &#39;Page %s&#39;, &#39;&#39; ), max( $paged, $page ) );
    }
    return $title;//返回处理后的 $title 值
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着在 function.php 中加入过滤勾子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    add_filter(&#39;wp_title&#39;,&#39;yl_filter_wp_title&#39;,10,3);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后在 header.php 中调用 wp_title() 时就会触发过滤器函数，根据具体情况打印出不同页面标题。&lt;/p&gt;

&lt;p&gt;在编写过滤器函数时，我曾经使用函数名 filter_wp_title，然后出现错误：Warning: Cannot modify header information &amp;#8211; headers already sent by (output started at&amp;#8230;&amp;#8230;，将函数名称改成 yl_filter_wp_title 后错误就消失，大概是函数名已然被占用。&lt;/p&gt;

&lt;h2 id=&#34;扩展阅读&#34;&gt;扩展阅读：&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://codex.wordpress.org/Function_Reference/wp_title&#34;&gt;http://codex.wordpress.org/Function_Reference/wp_title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codex.wordpress.org/Plugin_API/Filter_Reference/wp_title&#34;&gt;http://codex.wordpress.org/Plugin_API/Filter_Reference/wp_title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kutailang.com/wordpress/158.html/&#34;&gt;http://www.kutailang.com/wordpress/158.html/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 放弃支持 IE6</title>
      <link>https://www.zfanw.com/blog/wordpress-drop-ie6-support.html</link>
      <pubDate>Thu, 09 Jun 2011 16:48:46 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-drop-ie6-support.html</guid>
      <description>&lt;p&gt;WordPress 在其&lt;a href=&#34;http://en.blog.wordpress.com/2011/05/19/just-write/&#34; title=&#34;wordpress 官方博客&#34;&gt;博客&lt;/a&gt;中称，将在 3.2 版本中放弃 IE6 的支持。届时，使用 IE6 的 WordPress 用户会在控制面板中看到红色警示，提醒用户使用的浏览器过时不安全，并建议更新。&lt;/p&gt;

&lt;p&gt;IE6 于 2001 推出，其中许多技术已经过时，不符当下 Web 标准。但据 StatCounter 的监测，IE6 目前还占有全球浏览器市场百分六点多的份额，微软的 &lt;a href=&#34;https://www.modern.ie/en-us/ie6countdown&#34;&gt;IE6 倒计时&lt;/a&gt;显示，IE6 在中国的份额仍旧很大，约有33.9%。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>