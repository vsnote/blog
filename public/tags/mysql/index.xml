<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/mysql/</link>
    <description>Recent content in Mysql on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 19 Apr 2014 16:44:14 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>空密码登录被禁止 (参见 允许空密码)</title>
      <link>https://www.zfanw.com/blog/login-without-a-password-is-forbidden-by-configuration.html</link>
      <pubDate>Sat, 19 Apr 2014 16:44:14 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/login-without-a-password-is-forbidden-by-configuration.html</guid>
      <description>&lt;p&gt;在openSUSE上，我是通过命令安装的phpMyAdmin：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo zypper in phpMyAdmin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为是在本机上开发，所以偷懒，没给MySQL数据库root用户设置密码。&lt;/p&gt;

&lt;p&gt;通过&lt;a href=&#34;http://127.0.0.1/phpMyAdmin/&#34;&gt;http://127.0.0.1/phpMyAdmin/&lt;/a&gt;登录时会出现错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;空密码登录被禁止 (参见 允许空密码)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;phpMyAdmin的文档&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12391-2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12391-2&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;说需要修改配置文件config.inc.php里的配置项$cfg[&amp;#8216;Servers&amp;#8217;][$i][&amp;#8216;AllowNoPassword&amp;#8217;]。&lt;/p&gt;

&lt;p&gt;打开命令行工具：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /etc
su
cd phpMyAdmin
vi config.inc.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查找$cfg[&amp;#8216;Servers&amp;#8217;][$i][&amp;#8216;AllowNoPassword&amp;#8217;]，将它的值false改成true，保存。&lt;/p&gt;

&lt;p&gt;当然，你也可以用其他文本编辑工具。&lt;/p&gt;

&lt;p&gt;这里之所以要用su命令，是因为我的情况下，sudo的权限还不够进入该目录。&lt;/p&gt;

&lt;p&gt;之后再用空密码登录，就可以正常进入phpMyAdmin的管理界面。&lt;/p&gt;

&lt;p&gt;如果在phpMyAdmin界面操作时会出现如下错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Table &amp;#8216;phpmyadmin.pma__table_uiprefs&amp;#8217; doesn&amp;#8217;t exist&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;则请打开config.inc.php配置文件，把$cfg[&amp;#8216;Servers&amp;#8217;][$i][&amp;#8216;table_uiprefs&amp;#8217;]的值修改为空值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cfg[&#39;Servers&#39;][$i][&#39;table_uiprefs&#39;]       = &#39;&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后的操作就正常了。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:12391-2&#34;&gt;&lt;a href=&#34;http://docs.phpmyadmin.net/en/latest/config.html#cfg_Servers_AllowNoPassword&#34;&gt;Configuration — phpMyAdmin 4.2.0-beta1 documentation&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12391-2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>PHP 中构建查询语句</title>
      <link>https://www.zfanw.com/blog/php-mysql-query-sprintf.html</link>
      <pubDate>Sat, 12 Jan 2013 04:05:34 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/php-mysql-query-sprintf.html</guid>
      <description>&lt;p&gt;如果是很直白的一条 SQL 查询语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM `SAM`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就没什么好说的。但是，更多时候需要从用户返回的变量中构建查询语句。比如，一个表单，提交给服务器上的 PHP 文件 &lt;code&gt;$_POST[&#39;when&#39;]&lt;/code&gt;，&lt;code&gt;$_POST[&#39;why&#39;]&lt;/code&gt; 两个变量。常见的构建查询语句方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = &amp;quot;SELECT * FROM `SAM` WHERE Reason =&#39;&amp;quot; . $_POST[&#39;why&#39;] . &amp;quot;&#39; AND WHERE Time = &#39;&amp;quot;. $_POST[&#39;when&#39;] . &amp;quot;&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是上述写法，则不仅易出错，而且让人头大，也很难看出它表达了什么。&lt;/p&gt;

&lt;p&gt;更快捷、直观的方法，是使用 sprintf() 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sql = sprintf(&amp;quot;SELECT * FROM `SAM` WHERE Reason = &#39;%s&#39; AND WHERE Time = &#39;%s&#39;&amp;quot;,%_POST[&#39;why&#39;],%_POST[&#39;when&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就将变量从中区别开来，传递给 sprintf 函数的第一个参数即我们的 SQL 语句，只是用类似占位符的东西替代变量，这样的句子接近自然语言，很容易知道它是做什么，之后我们再将变量传入，函数将其替代后再返回字符串。&lt;/p&gt;

&lt;p&gt;换一个角度说，其实许多模板语言比如 Smarty 也是接近这样的思路，把变量与结构区别开来，一来有助于理解，二来也便于修改。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>