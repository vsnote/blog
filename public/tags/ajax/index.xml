<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ajax on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/ajax/</link>
    <description>Recent content in Ajax on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 01 Nov 2013 11:52:58 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/ajax/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScript 同源策略</title>
      <link>https://www.zfanw.com/blog/javascript-same-origin-policy.html</link>
      <pubDate>Fri, 01 Nov 2013 11:52:58 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/javascript-same-origin-policy.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 同源的定义&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 同源策略的内容&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    最近大量用 ajax，自然要面对跨域问题。什么是跨域？先来定义同源。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;同源的定义&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    同源指两个网页，它们的协议（protocal）、端口（port）和主机（host）一致。
  &lt;/p&gt;
  
  &lt;p&gt;
    比如下面这两个网页：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      http://www.example.com/sam.html
    &lt;/li&gt;
    &lt;li&gt;
      https://www.example.com/sam.html
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    它们的协议不一，一个是 &lt;code&gt;http&lt;/code&gt;，一个是 &lt;code&gt;https&lt;/code&gt;，所以不同源。同理可推端口、主机。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;不同源，即跨域。&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;同源策略的内容&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    同源策略是出于安全考虑设计的，那么，它具体指什么？
  &lt;/p&gt;
  
  &lt;p&gt;
    MDN 上是&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&#34;&gt;这样说的&lt;/a&gt;：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      The same-origin policy restricts how a document or script loaded from one origin can interact with a resource from another origin.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    “同源策略限制了一个域的文档或脚本如何与另一个域的资源交互”。
  &lt;/p&gt;
  
  &lt;p&gt;
    啥？我们可以分几种情况说明。
  &lt;/p&gt;
  
  &lt;h3&gt;
    读取资源
  &lt;/h3&gt;
  
  &lt;p&gt;
    我们通常说的跨域，多是针对 XMLHttpRequest &amp;#8211; ajax 技术的基础之一。
  &lt;/p&gt;
  
  &lt;p&gt;
    假设我在本地搭建了一个服务器环境，网址是 &lt;code&gt;http://localhost/&lt;/code&gt;，主页 &lt;code&gt;index.html&lt;/code&gt; 中有一段 JavaScript 代码如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$(function(){
   $.get(&#39;sam.html&#39;,function(data){
       $(&#39;body&#39;).html(data)
   })
})
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;sam.html&lt;/code&gt; 文件位于 &lt;code&gt;index.html&lt;/code&gt; 同一文件夹下。结果显示，我们成功 &lt;code&gt;GET&lt;/code&gt; 到 &lt;code&gt;sam.html&lt;/code&gt; 文件的内容。
  &lt;/p&gt;
  
  &lt;p&gt;
    那么再尝试一下，从本地 GET 远程文件如何。这里代码中加入一个对照组：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$(function(){
   $.get(&#39;http://www.zfanw.com/?12132313232&#39;,function(data){
       $(&#39;body&#39;).html(data);
   });
    $.get(&#39;sam.html&#39;,function(data){
        console.log(data);
    })
});
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    我们看看 Google Chrome 30.0.1599.114 控制台下的情况：
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/10/google-chrome-console-log.png&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/10/google-chrome-console-log.png&#34; alt=&#34;google chrome 控制台信息&#34; width=&#34;493&#34; height=&#34;48&#34; class=&#34;alignnone size-full wp-image-10878&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/10/google-chrome-console-log.png 493w, https://www.zfanw.com/blog/wp-content/uploads/2013/10/google-chrome-console-log-300x29.png 300w&#34; sizes=&#34;(max-width: 493px) 100vw, 493px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Google Chrome 控制台报错了：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      XMLHttpRequest cannot load http://www.zfanw.com/?12132313232. Origin http://127.0.0.1 is not allowed by Access-Control-Allow-Origin.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    因为 &lt;code&gt;http://localhost&lt;/code&gt; 与 &lt;code&gt;http://www.zfanw.com&lt;/code&gt; 不同源，所以浏览器会禁止来自 localhost 的脚本访问跨域资源。
  &lt;/p&gt;
  
  &lt;p&gt;
    这很容易理解，你家里当然不会允许陌生人随便进去，要进，得要你邀请了才行。Chrome 控制台中提到的 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;，正是我们邀请其它域的脚本访问的方法，具体用法请看 &lt;a href=&#34;http://enable-cors.org/&#34;&gt;enable cross-origin resource sharing 网站的说明&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;h3&gt;
    写入
  &lt;/h3&gt;
  
  &lt;p&gt;
    跨域写入的情况可以参照读取部分的说明，这也是时下非常常见的，比如我有一个 API 服务器部署在另一个域名下，但我依然可以通过 ajax 请求将数据存储到 API 服务器中，只要我们在 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 中许可了来自其它源的请求。
  &lt;/p&gt;
  
  &lt;h3&gt;
    执行
  &lt;/h3&gt;
  
  &lt;p&gt;
    出于安全考虑，同源策略默认不允许源 A 的脚本读取源 B 的资源，但却允许执行源 B 的资源。
  &lt;/p&gt;
  
  &lt;p&gt;
    这个概念也有些拗⼝。
  &lt;/p&gt;
  
  &lt;p&gt;
    简单说，我这个博客，调用了 Google CDN 提供的 jQuery，它的源显然与我的博客不同，但我却可以用它来操作我的博客页面 DOM，它也可以读取我的 cookie、localStorage 等。
  &lt;/p&gt;
  
  &lt;p&gt;
    假设一个场景，Google CDN 上的 jQuery 被注入了恶意代码，或者被劫持，指向另一个带有恶意代码的 jQuery，则引用它的网站就很危险了，因为这恶意 jQuery 现在可以读取我们网站的内容，并且向其它地方写入。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>