<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/html/</link>
    <description>Recent content in Html on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 29 Sep 2014 12:44:02 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/html/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Picture 元素的故事</title>
      <link>https://www.zfanw.com/blog/a-new-picture-element-in-html.html</link>
      <pubDate>Mon, 29 Sep 2014 12:44:02 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/a-new-picture-element-in-html.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_Web&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 响应式 Web 设计&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#Picture&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; Picture 元素的引入&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 理想很丰满，现实如何&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 未来&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    &lt;em&gt;前阵子，我看了 arstechnica 的一篇 &lt;a href=&#34;http://arstechnica.com/information-technology/2014/09/how-a-new-html-element-will-make-the-web-faster/&#34;&gt;picture 元素的文章&lt;/a&gt;。这是一篇讲英雄故事的文章，几个英雄人物在紧要时刻出现，最终促成 picture 元素诞生、成长。我觉得故事很有意思，就想译成中文，然后贴到博客。当时，我的打算是，先翻译完，然后联系他们，请求授权让我贴出译文。等我翻译完，请求的邮件发出去，过了两三天，得到的回复是：抱歉，没办法。我有些失望，但也无可奈何。只是心里琢磨着，找个时间，踩着 arstechnica 的肩膀，自己整理一篇 &amp;#8211; 这样说的话，好像有抄袭嫌疑，但我尽力避免。&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Web 历史里，有很长一段时间，我们所谓的网站，就是给桌面浏览器准备的。但移动互联网兴起后，所有的网站都傻眼了。因为用户要在移动设备上浏览网站，只能不停地放大、&lt;strong&gt;移动&lt;/strong&gt;页面，根本没有什么体验可言。
  &lt;/p&gt;
  
  &lt;p&gt;
    针对新出现的移动设备，当时盛行的解决办法是，让服务器检查用户代理（user agent），如果确认请求来自移动设备，就重定向到一个类似 m.domain.com 的移动专用网址上。但这样的话，开发者经常就需要维护两个、甚至两个以上站点。另外，重定向还经常出现失败的情况，比如用户访问某一具体的页面，结果却被重定向到移动端站点的首页。
  &lt;/p&gt;
  
  &lt;p&gt;
    好在这 m.domain.com 的做法没有大范围铺开。一个更好的解决办法马上要来了。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_Web&#34;&gt;响应式 Web 设计&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_Web&#34; href=&#34;#_Web&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    2010 年，Web 开发人员 Ethan Marcotte 写了篇文章，聊些他称为&lt;a href=&#34;http://alistapart.com/article/responsive-web-design&#34;&gt;响应式 Web 设计&lt;/a&gt;的东西。
  &lt;/p&gt;
  
  &lt;p&gt;
    Ethan 说，新设备不断涌现，我们不能一直被动，如果要给每一种新设备都开发一个专用站点，那么，某种程度上，这是个零和游戏。
  &lt;/p&gt;
  
  &lt;p&gt;
    他建议拥抱 Web 天生的灵活性，让&lt;a href=&#34;(http://d.alistapart.com/responsive-web-design/ex/ex-site-FINAL.html)&#34;&gt;页面&lt;/a&gt;基于设备特征自动适应。
  &lt;/p&gt;
  
  &lt;p&gt;
    这样，在 Ethan Marcotte 的推动，响应式设计开始正式进入舞台。
  &lt;/p&gt;
  
  &lt;p&gt;
    响应式 Web 设计在一开始，只有少数开发者用来开发个人站点，真正使之走上正轨，是在 &lt;a href=&#34;http://filamentgroup.com/lab/introducing-the-new-responsive-designed-bostonglobecom.html&#34;&gt;Marcotte 和 Filament Group、Upstatement&lt;/a&gt; 的开发者重新设计&lt;a href=&#34;http://www.bostonglobe.com/&#34;&gt;波士顿全球报站点&lt;/a&gt;，使之自适应以后。全球报站点在 2011 年 9 月的全新设计表明，响应式设计不是只能小打小闹，被开发者拿来自娱自乐的东西，它是拥抱未来的真正道路。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img src=&#34;http://filamentgroup.com/images/bostonglobe-feat-promo.jpg&#34; alt=&#34;波士顿全球报在电脑、平板、手机上的全貌&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;em&gt;波士顿全球报在电脑、平板、手机上的全貌（&lt;a href=&#34;http://filamentgroup.com/lab/introducing-the-new-responsive-designed-bostonglobecom.html&#34;&gt;图片来源&lt;/a&gt;）&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    站在用户角度看，全球站的重新设计是成功的，但背后，Macotte 他们却碰上一些问题，特别是图像一块。Marcotte 最初的文章里，使用 CSS 对图片做缩放处理。这使得图片能自动适应屏幕大小，不破坏内容布局，但同时也意味着，移动设备经常要加载不必要的、多余的像素。
  &lt;/p&gt;
  
  &lt;p&gt;
    哪怕是今天，你在移动设备上浏览的许多网站还是这样的情况。开发者们知道这是个问题。但问题远没有第一眼看上去那么简单。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;Picture&#34;&gt;Picture 元素的引入&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyPicture&#34; href=&#34;#Picture&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Picture 元素的故事源于波士顿全球报的重构者们，这其中包括 Mat Marquis。
  &lt;/p&gt;
  
  &lt;p&gt;
    一开始，Mat 和其他开发人员想出解决图片问题的办法&lt;fnref target=&#34;13804.1&#34; /&gt;是，在页面 img 标记中使用移动端的图片，JavaScript 加载到客户端后，马上检测屏幕大小并写入 cookie，如果屏幕尺寸大于约定的 480px，则在 HTML head 中插入一个 &lt;code&gt;base&lt;/code&gt; 元素，将页面所有静态资源引用包括 JavaScript、CSS 以及图片等重定向到服务器上一个虚构的目录。服务器检查 cookie 里的屏幕尺寸，配合 .htaccess 规则给所有需要置换的移动端图片返回一个 1 像素大小的占位 gif 图片。接着，在页面加载完成后，JavaScript 移除 &lt;code&gt;base&lt;/code&gt; 代码，并将移动端图片置换成大图。
  &lt;/p&gt;
  
  &lt;p&gt;
    但这里还有一个问题，就是在大屏幕设备上，用户需要加载两次图片：一次是 1 像素大小的占位 gif，一次是置换过的大图。
  &lt;/p&gt;
  
  &lt;p&gt;
    不管怎么说，当时的条件下，这可能是他们所能想到的最好解决办法。
  &lt;/p&gt;
  
  &lt;p&gt;
    只不过，大约在波士顿全球报上线前一个月左右时间，几大新式浏览器推出它们的「图片预加载」功能。这个功能允许浏览器在解读 HTML 过程中提前加载页面上的图片，而不管图片的位置及大小。
  &lt;/p&gt;
  
  &lt;p&gt;
    这个功能的推出，让 Mat 他们的办法报废，一来重定向失效，用户可能在置换图片前看到移动端图片，而不是 1 像素大小的占位 gif；二来使用 JavaScript 置换图片，是在反抗浏览器的「图片预加载」功能。
  &lt;/p&gt;
  
  &lt;p&gt;
    这样，绕了一圈，Mat 他们又回到最初的问题上。
  &lt;/p&gt;
  
  &lt;p&gt;
    最后，波士顿全球报在上线时，也没能解决这个问题，用户在移动设备浏览的话，还是会下载大图片。
  &lt;/p&gt;
  
  &lt;p&gt;
    当然，事情并没有结束。关于响应式图片的讨论仍在进行。
  &lt;/p&gt;
  
  &lt;p&gt;
    Mat 他们后来意识到，要解决这个问题，必须进入&lt;strong&gt;标记语言&lt;/strong&gt;层面。他们开始在 WHATWG 邮件列表上讨论。但&lt;a href=&#34;http://lists.w3.org/Archives/Public/public-whatwg-archive/2012Feb/0194.html&#34;&gt;有人建议&lt;/a&gt;他们移师社区小组(Community Group)里讨论。于是 2012 年 2 月，参加讨论的人员在 Mat Marquis 主导下，成立&lt;a href=&#34;http://www.w3.org/community/respimg/&#34;&gt;响应式图片社区小组&lt;/a&gt;，3 月的时候，他们大致&lt;a href=&#34;http://www.w3.org/community/respimg/2012/03/07/14/&#34;&gt;拟定 &lt;code&gt;picture&lt;/code&gt; 元素&lt;/a&gt;：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;picture alt=&#34;Alt tag should accurately describe the image represented by all sources, though cropping and zooming may differ.&#34;&amp;gt;
  &amp;lt;source src=&#34;mobile.jpg&#34; /&amp;gt; &amp;lt;!-- Matches by default. --&amp;gt;
  &amp;lt;source src=&#34;high-res.jpg&#34; media=&#34;min-width: 800px&#34; /&amp;gt; &amp;lt;!-- Overrides the previous source over 800px before any assets are fetched, resulting in a single request. --&amp;gt;
  &amp;lt;img src=&#34;mobile.jpg&#34; /&amp;gt; &amp;lt;!-- Fallback content, in the event the &amp;lt;picture&amp;gt; tag is completely unsupported by the user’s browser. --&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这个新元素的语法参考了 &lt;code&gt;video&lt;/code&gt; 元素，是对 &lt;code&gt;img&lt;/code&gt; 标签的一层封装，假如浏览器不支持它，则会回落到 img，不会给旧浏览器造成问题。而支持 picture 的浏览器可以根据规则，自动选择一张最合适的图片。最重要的，浏览器的「图片预加载」功能对其一样适用。
  &lt;/p&gt;
  
  &lt;p&gt;
    与此同时，他们也了解到，早在 2007 年，同样的元素就有出现在 W3C 的公开邮件列表中，之后类似的主题也多次在 WHATWG 跟 W3C 的讨论列表中出现，只是每次都没有结果。
  &lt;/p&gt;
  
  &lt;p&gt;
    那么这一次，随着响应式 web 设计的兴起，是否会有不一样的结果呢？
  &lt;/p&gt;
  
  &lt;p&gt;
    2012 年 &lt;a href=&#34;http://www.w3.org/community/respimg/2012/05/11/respimg-proposal/&#34;&gt;5 月 11 号&lt;/a&gt;，Mat 发现一个苹果员工于 5 月 10 号提交一份使用 img 标签 &lt;code&gt;set&lt;/code&gt; 属性的响应式图片&lt;a href=&#34;http://lists.w3.org/Archives/Public/public-whatwg-archive/2012May/0138.html&#34;&gt;语法&lt;/a&gt;到 WHATWG，这份语法只是解决 RICG 罗列的所有用例中的几个；更进一步，Mat 发现大部分 WHATWG 成员对 RICG 以及他们讨论的 picture 元素基本&lt;a href=&#34;http://krijnhoetmer.nl/irc-logs/whatwg/20120510#l-747&#34;&gt;一无所知&lt;/a&gt; &amp;#8211; 社区小组与 HTML 工作小组的联系根本不是 Mat 他们想像的那种关系。Mat 把这件事发到社区小组内讨论，但紧接着，在 5 月 15 号，Ian Hickson &lt;a href=&#34;http://lists.w3.org/Archives/Public/public-whatwg-archive/2012May/0247.html&#34;&gt;宣布&lt;/a&gt;将 &lt;code&gt;set&lt;/code&gt; 加入标准草案。RICG 社区一片哗然，Twitter 上讨论纷纷。
  &lt;/p&gt;
  
  &lt;p&gt;
    一边是 WHATWG 声称浏览器厂商更支持 &lt;code&gt;set&lt;/code&gt;，一边是开发者社区强烈支持 &lt;code&gt;picture&lt;/code&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    甚至后来，HTML 的另一个工作小组 W3C 都出来掺一脚：
  &lt;/p&gt;
  
  &lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://twitter.com/scottjehl&#34;&gt;@scottjehl&lt;/a&gt; &lt;a href=&#34;https://twitter.com/eddiemachado&#34;&gt;@eddiemachado&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/tkadlec?src=hash&#34;&gt;#tkadlec&lt;/a&gt; we are looking at this situation&amp;#8230;please stay tuned (in meetings this week)
    &lt;/p&gt;&amp;mdash; W3C (@w3c) 
    
    &lt;a href=&#34;https://twitter.com/w3c/status/202379977944084481&#34;&gt;May 15, 2012&lt;/a&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    好在双方后来开始妥协，愿意彼此合作。
  &lt;/p&gt;
  
  &lt;p&gt;
    最终，修订过的 Picture 元素被纳入 HTML 标准，Web 羸了。大家都很高兴。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;理想很丰满，现实如何&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    picture 诚然是被纳入标准了，但如果浏览器厂商没有实现它，那 picture 也只是个美好的愿望。
  &lt;/p&gt;
  
  &lt;p&gt;
    虽然 Firefox、Chrome 都表示愿意在未来实现 picture，但对二者来说，要优先考虑 Picture 的话，那可能还得几年。
  &lt;/p&gt;
  
  &lt;p&gt;
    介绍下 Yoav Weiss。Yoav 是个跨越 Web 开发与浏览器开发两个世界的人。一方面，他是 RICG 参与者，熟悉响应式图片的问题及解决办法，另一方面，他还是 Blink &amp; Webkit 的贡献者。
  &lt;/p&gt;
  
  &lt;p&gt;
    在和 Blink 团队沟通过后，Yoav 开始着手相关的基础架构。起初他是在业余时间里做这件事，但他的业余时间实在不多，于是考虑转为全职做这件事。Mat Marquis 他们发起了一个&lt;a href=&#34;https://www.indiegogo.com/projects/picture-element-implementation-in-blink#home&#34;&gt;众筹活动&lt;/a&gt;。出人意料的是，活动不仅成功达到目标，还远远超过目标。这样 Yoav 就有足够的精力在 Blink 上实现 picture 元素，并且把它移植到 Webkit，使得基于 Webkit 的浏览器也能使用 picture 元素。与此同时，RICG 的另一个贡献者 Caceres 开始在 Mozilla 工作，帮助推动 Firefox &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=870022&#34;&gt;实现 Picture&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    截止今天，Picture 元素已经在 Chrome 38 以上版本实现并推出，Firefox 33 版本后可以通过 flag 开启，IE 也在考虑支持，Webkit 则也已经实现 picture 规范的子集 srcset。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;未来&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    这是一个 Web 开发者们共同努力，让 Web 变得更加美好的故事。整个过程看起来有点像烂俗肥皂剧，但不得不承认，我们的 Web 就是这么来的。只是这一次，RICG 的努力，为我们打开一个全新的局面，那就是，Web 开发者可以、也应该努力参与 Web 标准的制定过程，因为他们自己更知道自己需要什么。
  &lt;/p&gt;
  
  &lt;footnotes&gt;
    &lt;fn name=&#34;13804.1&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://alistapart.com/article/responsive-images-how-they-almost-worked-and-what-we-need&#34;&gt;Responsive Images: How they Almost Worked and What We Need · An A List Apart Article&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
  &lt;/footnotes&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>垂直居中对齐浮动的元素</title>
      <link>https://www.zfanw.com/blog/vertical-center-float-element.html</link>
      <pubDate>Thu, 23 May 2013 15:03:31 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/vertical-center-float-element.html</guid>
      <description>&lt;p&gt;类似如下的 HTML 代码非常常见：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;你好标题一&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot; title=&amp;quot;查看更多&amp;quot;&amp;gt;查看更多&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，&lt;code&gt;span&lt;/code&gt; 部分是右浮动的，字体也比较小，我们需要它与其他文本在垂直方向上对齐。&lt;/p&gt;

&lt;p&gt;有几个办法很容易想到的办法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;给右浮动的 span 元素设置 padding-top 或 margin-top 值；&lt;/li&gt;
&lt;li&gt;绝对定位右浮动的 span 元素&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但这两种办法在我来看，动作都有些大。一个我认为清爽的做法是，给 span 元素设置 line-height 值。&lt;/p&gt;

&lt;p&gt;假定如下 h1 样式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;h1{
    font-size:18px;
    line-height:1.5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以计算出，h1 的行框高度为 18*1.5=27px，这样，我们将 span 元素的 line-height 设置为27px，CSS 会扣除 span 的 font-size 值，并对半开后分别添加到 span 上/下空间里，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;span{
    float:right;
    font-size:12px;
    line-height:27px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就很轻松达到垂直方向上对齐文本的效果。&lt;/p&gt;

&lt;p&gt;附：&lt;a href=&#34;http://jsfiddle.net/chenxsan/MebhE/2/&#34;&gt;jsfiddle 示例&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IE6 下的浮动换行问题</title>
      <link>https://www.zfanw.com/blog/ie6-float-new-line.html</link>
      <pubDate>Sun, 12 May 2013 04:13:44 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/ie6-float-new-line.html</guid>
      <description>&lt;p&gt;如下 HTML 代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;普通的行内元素&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;普通的行内元素&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;fl-r&amp;quot;&amp;gt;普通的行内元素 - 右浮动&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS 样式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.fl-r{float:right;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在现代浏览器下，它会显示成一行，但 IE6 下，右浮动的元素显示在新一行，这样 &lt;code&gt;p&lt;/code&gt; 元素的高度就增加了，如下图：&lt;/p&gt;

&lt;div id=&#34;attachment_8911&#34; style=&#34;width: 563px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2013/05/ie6-float-new-line.jpg&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2013/05/ie6-float-new-line.jpg&#34; alt=&#34;ie6 浮动换行&#34; width=&#34;553&#34; height=&#34;55&#34; class=&#34;size-full wp-image-8911&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/05/ie6-float-new-line.jpg 553w, https://www.zfanw.com/blog/wp-content/uploads/2013/05/ie6-float-new-line-300x29.jpg 300w&#34; sizes=&#34;(max-width: 553px) 100vw, 553px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    ie6 浮动换行
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;解决办法有多个，比如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将前两个 a 元素左浮动&lt;/li&gt;
&lt;li&gt;将 p 元素相对定位 &lt;code&gt;position:relative&lt;/code&gt;，并且将最后一个 a 绝对定位&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但这两种办法多少都有些过头，最简单的方法，将右浮动的元素提到最前：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;fl-r&amp;quot;&amp;gt;普通的行内元素 - 右浮动&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;普通的行内元素&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;普通的行内元素&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样 IE6 下它们就显示在同一行。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emmet-vim CSS 写法</title>
      <link>https://www.zfanw.com/blog/zencoding-vim-html-css.html</link>
      <pubDate>Fri, 22 Jul 2011 01:46:44 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/zencoding-vim-html-css.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 附录&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 修订历史&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    Emmet（原来叫 Zen Coding） 通过按键触发来展开缩写词。
  &lt;/p&gt;
  
  &lt;p&gt;
    在 Vim 下，使用 &lt;a href=&#34;https://github.com/mattn/emmet-vim&#34; title=&#34;emmet for vim 代码库&#34;&gt;Emmet-vim&lt;/a&gt; 编辑 CSS 文件，首先需要检查文件类型，
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;:set ft?
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    如果显示结果不是 &lt;code&gt;filetype=css&lt;/code&gt;，则需要先设定文件类型：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;:set ft=css
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后你就可以开始写 CSS 规则。
  &lt;/p&gt;
  
  &lt;p&gt;
    比如要给 &lt;code&gt;body&lt;/code&gt; 写一个 &lt;code&gt;margin-right:10px;&lt;/code&gt;，则可以在 Vim 输入：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;mr10
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后按触发键，默认为 &lt;kbd&gt;Ctrl+y,&lt;/kbd&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    又或者要给 &lt;code&gt;div&lt;/code&gt; 块加一个 &lt;code&gt;position:absolute;&lt;/code&gt;，则可以输入：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;pos:a
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后按触发键。
  &lt;/p&gt;
  
  &lt;p&gt;
    接下来要给 &lt;code&gt;div&lt;/code&gt; 增加 &lt;code&gt;top:20px;right:10px;&lt;/code&gt;，
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;t20+r10
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后按触发键。
  &lt;/p&gt;
  
  &lt;p&gt;
    很简单吧。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;附录&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Zen Coding 站上的 &lt;a href=&#34;https://zen-coding.googlecode.com/files/ZenCodingCheatSheet.pdf&#34;&gt;Cheatsheet&lt;/a&gt; 提供有更多缩略词列表
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://docs.emmet.io/css-abbreviations/&#34;&gt;Emmet 上关于 CSS 扩展的说明&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;div class=&#39;timeline&#39;&gt;
    &lt;h2 class=&#34;storycontent-h2&#34;&gt;
      &lt;span id=&#34;i-2&#34;&gt;修订历史&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
    &lt;/h2&gt;
    
    &lt;ol&gt;
      &lt;li&gt;
        &lt;span itemprop=&#39;dateModified&#39;&gt;2015-06-17&lt;/span&gt;：修改 zencoding.vim 为 emmet-vim。
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>