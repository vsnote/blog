<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unit Test on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/unit-test/</link>
    <description>Recent content in Unit Test on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 16 Feb 2013 13:59:17 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/unit-test/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Jasmine.js 简介</title>
      <link>https://www.zfanw.com/blog/jasmine-js.html</link>
      <pubDate>Sat, 16 Feb 2013 13:59:17 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/jasmine-js.html</guid>
      <description>&lt;p&gt;这是一个 JavaScript &lt;a href=&#34;http://pivotal.github.com/jasmine/&#34;&gt;测试工具&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;对我这样基本没机会写上大而复杂的程序的人来说，其实感觉有些多余，但玩玩还是有点意思。&lt;/p&gt;

&lt;p&gt;所以，这一篇完全是「新手篇」。因为阅读过&lt;a href=&#34;https://www.adobe.com/devnet/html5/articles/unit-test-javascript-applications-with-jasmine.html&#34;&gt;很多&lt;/a&gt; jasmine.js 的&lt;a href=&#34;http://ivanjovanovic.com/2011/07/22/introduction-to-javascript-bdd-testing-with-jasmine-library/&#34;&gt;文&lt;/a&gt;&lt;a href=&#34;http://net.tutsplus.com/tutorials/javascript-ajax/testing-your-javascript-with-jasmine/&#34;&gt;章&lt;/a&gt;，多数只是举它所提供的示例文件再阐述一遍。而作为新手，我觉得最重要的弄明白&lt;strong&gt;为什么&lt;/strong&gt;，我为什么要用它，用它有什么好处，清楚了目的，再操弄工具的话，就不至于一头雾水而最后觉得根本是屠龙之术要来无用而放弃其实利器的东西。&lt;/p&gt;

&lt;p&gt;平常写 js 程序，不可避免地要调试或除错(debug)，目前一般使用 firebug，但其实效率低下，有点暗箱操作的意思。出问题最好，没出问题其实也不是很清除它到底是运行正常了或其实不正常而无法知道。&lt;/p&gt;

&lt;p&gt;这是 Jasmine.js 这样的测试工具的意义。&lt;/p&gt;

&lt;p&gt;在写程序时，我们会有个预期，比如，一个加法函数，两个数字相加，我可以预计，1 + 1 = 2，1 + 1 ！= 3，当我们的程序通过这样的测试，即搞明白一加一等于多少不等于多少时，我们就可以确认，它是正确的。&lt;/p&gt;

&lt;p&gt;写一个简单的加法 js 程序如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function add(a,b){
  return a+b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则 jasmine.js 的测试语句可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;describe(&#39;add function&#39;,function(){
  it(&#39;should be 2&#39;,function(){
    expect(add(1,1)).toBe(2);
  });
  it (&#39;shouldn not be 3&#39;,function(){
    expect(add(1,1)).not.toBe(3);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将上述两段代码拷入在线的 Jasmine.js 测试工具 &lt;a href=&#34;http://tryjasmine.com/&#34;&gt;http://tryjasmine.com/&lt;/a&gt; 里，然后按左上角的 &lt;kbd&gt;try jasmine!&lt;/kbd&gt;，可以看到通过测试的说明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;specs 2 specs, 0 failures in 0.069s (see results)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再来说说它的结构。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;describe&lt;/code&gt; 指示一个测试单元，&lt;code&gt;it&lt;/code&gt; 则用于描述可能的预期，相当于将具体参数置入，运行程序。它们都是 JavaScript 函数，也因些遵循 JavaScript 的许多规则，比如函数的作用域等。&lt;/p&gt;

&lt;p&gt;这样我们就清楚地知道程序运行的情况，而不是任由浏览器去运行，给出个无法确认的结果。&lt;/p&gt;

&lt;p&gt;而且，Jasmine.js 跟我们的文件是分离的(不过 describe 与 it 仅仅只是函数，我们甚至可以将整个要测试的代码写入其中 &amp;#8211; jasmine.js 主页上列出的 Matchers 演示即是那样，不过那并不推荐在实际中使用，因为只会让测试代码变得一团糟)，我们只是通过 &lt;code&gt;script&lt;/code&gt; 标签链接到要测试的 js 文件，然后在 jasmine.js 的框架下编写测试，不需要其他依赖。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>