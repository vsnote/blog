<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Telegram on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/telegram/</link>
    <description>Recent content in Telegram on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 27 Feb 2016 14:16:36 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/telegram/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node.js 开发 Telegram bot</title>
      <link>https://www.zfanw.com/blog/telegram-bot-with-nodejs.html</link>
      <pubDate>Sat, 27 Feb 2016 14:16:36 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/telegram-bot-with-nodejs.html</guid>
      <description>&lt;p&gt;昨天 Ingress 厦门的 telegram 群里大家在逗机器人，于是自己也想开发一个玩。&lt;/p&gt;

&lt;p&gt;首先，在 telegram 里找 &lt;a href=&#34;https://telegram.me/botfather&#34;&gt;@BotFather&lt;/a&gt; ，跟它对话，让它创建一个 bot，并且讨要一个 token，token 大概长这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，我们与 bot 对话，或是在带了 bot 玩的群里说话，bot 都能够读取到，它相当于中间的传话者，服务器与 bot 对话的方式有两种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://core.telegram.org/bots/api#getupdates&#34;&gt;getUpdates&lt;/a&gt; &amp;#8211; 我们的服务器主动读取&lt;/p&gt;

&lt;p&gt;拿上面那个假 token 说，GET &lt;code&gt;https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/getUpdates&lt;/code&gt; 就可以得到数据。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://core.telegram.org/bots/api#setwebhook&#34;&gt;setWebhook&lt;/a&gt; &amp;#8211; telegram bot 在得到消息后，会主动往我们通过 setWebhook 接口设定的服务器 url POST 数据。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setWebhook&lt;/code&gt; 的用法是，在浏览器中访问 &lt;code&gt;https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/setWebhook?url=https://example.org&lt;/code&gt;，页面会返回结果：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{&amp;#8220;ok&amp;#8221;:true,&amp;#8221;result&amp;#8221;:true,&amp;#8221;description&amp;#8221;:&amp;#8221;Webhook was set&amp;#8221;}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;返回结果表示 Webhook 设定成功，之后 telegram 就会往 &lt;a href=&#34;https://example.org&#34;&gt;https://example.org&lt;/a&gt; 地址 POST 新数据。&lt;/p&gt;

&lt;p&gt;webhook 的地址必需是 https 的，telegram 文档中有提到证书 &amp;#8211; 除非你的网站是自己签名的，否则可以不理会该参数。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外，&lt;code&gt;getUpdates&lt;/code&gt; 方法与 &lt;code&gt;setWebhook&lt;/code&gt; 只能二选一，不能同时使用。&lt;/p&gt;

&lt;p&gt;我用的 node.js 框架是 &lt;a href=&#34;http://hapijs.com/&#34;&gt;hapi.js&lt;/a&gt;，整个代码大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const Hapi = require(&#39;hapi&#39;)
const ajax = require(&#39;request&#39;)

// Create a server with a host and port
const server = new Hapi.Server()
const token = require(&#39;./token&#39;)
const api = `https://api.telegram.org/bot${token}/`

server.connection({
  host: &#39;localhost&#39;,
  port: 8888
})

// Add the route
server.route({
  method: &#39;GET&#39;,
  path: &#39;/&#39;,
  handler: function (request, reply) {
    return reply(&#39;hello world&#39;)
  }
})
server.route({
  method: &#39;POST&#39;,
  path: &#39;/&#39; + token,
  handler: function (req, reply) {
    reply(&#39;done&#39;)
    const message = req.payload.message
    const chat_id = message.from.id
    ajax.post(api + &#39;sendMessage&#39;,
          {
            form: {chat_id: chat_id, text: message.text}
          }, (err, response, body) =&amp;gt; {
            if (err) console.log(err)
            console.log(&#39;everything is ok: &#39;, body)
          })
  }
})

// Start the server
server.start((err) =&amp;gt; {
  if (err) {
    throw err
  }
  console.log(&#39;Server running at:&#39;, server.info.uri)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把代码上传到 vps 上，通过 &lt;a href=&#34;http://pm2.keymetrics.io/docs/usage/quick-start/&#34;&gt;pm2&lt;/a&gt; 启动，并配置 Apache，将&lt;a href=&#34;https://www.zfanw.com/blog/apache-proxy-node-js.html&#34;&gt;指定路由的流量全部转发给 node.js 服务器上&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>