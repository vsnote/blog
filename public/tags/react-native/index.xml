<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React Native on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/react-native/</link>
    <description>Recent content in React Native on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 28 Jun 2016 10:41:27 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/react-native/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>react-native 滑动删除</title>
      <link>https://www.zfanw.com/blog/react-native-swipeable-listview.html</link>
      <pubDate>Tue, 28 Jun 2016 10:41:27 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/react-native-swipeable-listview.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：本文基于 react-native 0.29.0-rc.0，仅针对 iOS 平台。&lt;/p&gt;

&lt;p&gt;iOS 下的列表，通常都可以往左滑动，显示快捷菜单 &amp;#8211; 比如删除。&lt;/p&gt;

&lt;p&gt;只是 react-native 下的 ListView 不具备这种功能。&lt;/p&gt;

&lt;p&gt;但实际上，react-native 官方库里，就有一个 &lt;a href=&#34;https://github.com/facebook/react-native/tree/master/Libraries/Experimental/SwipeableRow&#34;&gt;SwipeableListView&lt;/a&gt;，只不过是放在 &lt;code&gt;Experimental&lt;/code&gt; 目录下，表示还不成熟 &amp;#8211; 目前也是没有文档的，只能自己阅读源代码。&lt;/p&gt;

&lt;p&gt;其实用法非常简单，大部分跟 ListView 是一致的，只是多了些 prop。&lt;/p&gt;

&lt;p&gt;来看一个示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;React&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color: #000000&#34;&gt;ScrollView&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;View&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;TouchableHighlight&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;Text&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;SwipeableListView&lt;/span&gt; } &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;react-native&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color: #000000&#34;&gt;connect&lt;/span&gt; } &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;react-redux&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;styles&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;./styles&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;formatListViewDataSource&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;../../utils/formatListViewDataSource&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;WantHome&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;React&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;Component&lt;/span&gt; {
  &lt;span style=&#34;color: #000000&#34;&gt;componentDidMount&lt;/span&gt; () {
    &lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;dispatch&lt;/span&gt;({
      &lt;span style=&#34;color: #000000&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;USER_ENTERED_WANT_HOME&amp;#39;&lt;/span&gt;
    })
  }
  &lt;span style=&#34;color: #000000&#34;&gt;render&lt;/span&gt; () {
    &lt;span style=&#34;color: #A90D91&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ds&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;SwipeableListView&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;getNewDataSource&lt;/span&gt;()
    &lt;span style=&#34;color: #A90D91&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;formatListViewDataSource&lt;/span&gt;(&lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;want&lt;/span&gt;)
    &lt;span style=&#34;color: #000000&#34;&gt;ds&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ds&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;cloneWithRowsAndSections&lt;/span&gt;(...&lt;span style=&#34;color: #000000&#34;&gt;obj&lt;/span&gt;)
    &lt;span style=&#34;color: #A90D91&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #000000&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;want&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;length&lt;/span&gt;) {
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;View&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{[&lt;span style=&#34;color: #000000&#34;&gt;styles&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;container&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;styles&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;center&lt;/span&gt;]}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;Text&amp;gt;暂无内容，请点击右上角按钮添加&amp;lt;/Text&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
      )
    } &lt;span style=&#34;color: #A90D91&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;ScrollView&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{[&lt;span style=&#34;color: #000000&#34;&gt;styles&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;body&lt;/span&gt;]}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;SwipeableListView&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;bounceFirstRowOnMount&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;maxSwipeDistance=&lt;/span&gt;{&lt;span style=&#34;color: #1C01CE&#34;&gt;100&lt;/span&gt;}
            &lt;span style=&#34;color: #000000&#34;&gt;dataSource=&lt;/span&gt;{&lt;span style=&#34;color: #000000&#34;&gt;ds&lt;/span&gt;}
            &lt;span style=&#34;color: #000000&#34;&gt;renderQuickActions=&lt;/span&gt;{(&lt;span style=&#34;color: #000000&#34;&gt;rowData&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;sectionID&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;rowID&lt;/span&gt;) &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; {
              &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; (
                &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;View&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                  &lt;span style=&#34;color: #000000&#34;&gt;flex:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;,
                  &lt;span style=&#34;color: #000000&#34;&gt;flexDirection:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;row&amp;#39;&lt;/span&gt;,
                  &lt;span style=&#34;color: #000000&#34;&gt;justifyContent:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;flex-end&amp;#39;&lt;/span&gt;,
                  &lt;span style=&#34;color: #000000&#34;&gt;alignItems:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;
                }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;TouchableHighlight&lt;/span&gt;
                    &lt;span style=&#34;color: #000000&#34;&gt;onPress=&lt;/span&gt;{() &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; {
                      &lt;span style=&#34;color: #000000&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;)
                    }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;View&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                      &lt;span style=&#34;color: #000000&#34;&gt;backgroundColor:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,
                      &lt;span style=&#34;color: #000000&#34;&gt;flex:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;,
                      &lt;span style=&#34;color: #000000&#34;&gt;alignItems:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;,
                      &lt;span style=&#34;color: #000000&#34;&gt;flexDirection:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;row&amp;#39;&lt;/span&gt;,
                      &lt;span style=&#34;color: #000000&#34;&gt;paddingHorizontal:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;10&lt;/span&gt;
                    }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                      &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;Text&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                        &lt;span style=&#34;color: #000000&#34;&gt;color:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;,
                        &lt;span style=&#34;color: #000000&#34;&gt;fontSize:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;16&lt;/span&gt;
                      }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;删除&amp;lt;/Text&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/TouchableHighlight&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
              )
            }}
            &lt;span style=&#34;color: #000000&#34;&gt;renderRow=&lt;/span&gt;{(&lt;span style=&#34;color: #000000&#34;&gt;rowData&lt;/span&gt;) &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; {
              &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; (
                &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;View&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                  &lt;span style=&#34;color: #000000&#34;&gt;paddingVertical:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;10&lt;/span&gt;,
                  &lt;span style=&#34;color: #000000&#34;&gt;backgroundColor:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;#fff&amp;#39;&lt;/span&gt;
                }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;Text&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                    &lt;span style=&#34;color: #000000&#34;&gt;fontSize:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;16&lt;/span&gt;
                  }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                    {&lt;span style=&#34;color: #000000&#34;&gt;rowData&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;text&lt;/span&gt;}
                  &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/Text&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
              )
            }}
          &lt;span style=&#34;color: #000000&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/ScrollView&amp;gt;&lt;/span&gt;
      )
    }
  }
}
&lt;span style=&#34;color: #A90D91&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;mapStateToProps&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;) &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; ({
  &lt;span style=&#34;color: #000000&#34;&gt;want:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;want&lt;/span&gt;
})
&lt;span style=&#34;color: #A90D91&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color: #000000&#34;&gt;mapStateToProps&lt;/span&gt;)(&lt;span style=&#34;color: #000000&#34;&gt;WantHome&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里有几个需要注意的属性值：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dataSource&lt;/code&gt; &amp;#8211; 我们要渲染的数据列表。&lt;/p&gt;

&lt;p&gt;通常我们会有一个数组，比如 &lt;code&gt;[&#39;咸饭&#39;, &#39;粥&#39;]&lt;/code&gt;，数据需要处理成 &lt;code&gt;SwipeableListView&lt;/code&gt; 需要的格式，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&#39;s1&#39;: &#39;标题&#39;,
&#39;r1&#39;: &#39;咸饭&#39;,
&#39;r2&#39;: &#39;粥&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这也是上面代码中 &lt;code&gt;formatListViewDataSource&lt;/code&gt; 函数起到的作用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
* @function formatListViewDataSource format data for ListView of react-native
* @param {Array} data - data to be formatted
* @return {Array}
* @example
*   let ds = formatListViewDataSource([1, 2, 3])
*   xxx.cloneWithRowsAndSections(...ds)
*/
export default function formatListViewDataSource (data) {
if (!Array.isArray(data)) {
throw new Error(&#39;function only accept Array&#39;)
}
var dataBlob = {}
var sectionIDs = [&#39;s1&#39;]
var rowIDs = [[]]
data.forEach(function (element, index) {
dataBlob[&#39;r&#39; + index] = {id: &#39;r&#39; + index, text: element}
rowIDs[0].push(&#39;r&#39; + index)
})
dataBlob[&#39;s1&#39;] = &#39;&#39;
return [
dataBlob,
sectionIDs,
rowIDs
]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;maxSwipeDistance&lt;/code&gt; &amp;#8211; 表示滑动的最大距离，必须设置，否则默认为 0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;renderQuickActions&lt;/code&gt; &amp;#8211; 这就是我们滑动后显示的快捷动作了&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;效果如下图：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/react-native-swipeablelist.gif&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/react-native-swipeablelist.gif&#34; alt=&#34;react native swipeableListView&#34; width=&#34;372&#34; class=&#34;alignnone size-full wp-image-18623&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个 react-native 下使用 redux 的错误</title>
      <link>https://www.zfanw.com/blog/react-native-redux-expected-a-component-class-got-object-object.html</link>
      <pubDate>Fri, 17 Jun 2016 08:15:47 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/react-native-redux-expected-a-component-class-got-object-object.html</guid>
      <description>&lt;p&gt;我在 react-native 项目里写的 &lt;code&gt;index.ios.js&lt;/code&gt; 文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;
import { AppRegistry } from &#39;react-native&#39;
import rn from &#39;./src/app&#39;
import { Provider } from &#39;react-redux&#39;
import configureStore from &#39;./src/store/configureStore&#39;
const store = configureStore()
const App = () =&amp;gt; {
  return (
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;rn /&amp;gt;
    &amp;lt;/Provider&amp;gt;
    )
}
AppRegistry.registerComponent(&#39;rn&#39;, () =&amp;gt; App)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行时一直报告这个错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Expected a component class, got [object Object].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;App&lt;/code&gt; 当然是一个 Component，问题出在哪？&lt;/p&gt;

&lt;p&gt;问题出在 &lt;code&gt;AppRegistry.registerComponent&lt;/code&gt; 注册的组件名也叫 &lt;code&gt;rn&lt;/code&gt;，而我在前头 &lt;code&gt;import&lt;/code&gt; 了同样的一个 &lt;code&gt;rn&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;修改如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;
import { AppRegistry } from &#39;react-native&#39;
import Root from &#39;./src/app&#39;
import { Provider } from &#39;react-redux&#39;
import configureStore from &#39;./src/store/configureStore&#39;
const store = configureStore()
const App = () =&amp;gt; {
  return (
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;Root /&amp;gt;
    &amp;lt;/Provider&amp;gt;
    )
}
AppRegistry.registerComponent(&#39;rn&#39;, () =&amp;gt; App)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就不再有问题了。&lt;/p&gt;

&lt;p&gt;一个非常简单却很容易忽略的错误。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Native 下使用 emoji 的 Invalid hex-character pattern in string 问题</title>
      <link>https://www.zfanw.com/blog/react-native-emoji-invalid-hex-character-pattern-in-string.html</link>
      <pubDate>Sat, 07 May 2016 08:32:23 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/react-native-emoji-invalid-hex-character-pattern-in-string.html</guid>
      <description>&lt;p&gt;我在 react native 项目里用到了 emoji，比如笑脸 😁，当然，我不是直接使用表情，而是使用了 unicode。😁 的 unicode 值是 &lt;code&gt;U+1F601&lt;/code&gt;，在 react native 项目里，代码写成了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Text&amp;gt;{&amp;quot;\u{1F601}&amp;quot;}&amp;lt;/Text&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;项目在模拟器下，或 &lt;code&gt;Debug&lt;/code&gt; 模式下的设备上跑，都不会有问题，但是在 &lt;code&gt;Release&lt;/code&gt; 模式下跑设备上，就会出现问题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sat, 07 May 2016 07:02:29 GMT ReactNativePackager:SocketServer server got ipc message { type: &#39;createSocketServer&#39;,
  data: 
   { sockPath: &#39;/var/folders/xk/y5j8r_dd0qg9ckymx96qd81c0000gn/T/react-packager-e36f208f7a835e0174b01026652af058&#39;,
     options: 
      { projectRoots: [Object],
        assetRoots: [Object],
        blacklistRE: [Object],
        transformModulePath: &#39;/Users/sam/Documents/job/fz-app/node_modules/react-native/packager/transformer.js&#39; } } }
[3:02:30 PM] &amp;lt;START&amp;gt; Building Dependency Graph
[3:02:30 PM] &amp;lt;START&amp;gt; Crawling File System
Sat, 07 May 2016 07:02:30 GMT ReactNativePackager:SocketServer Process 45912 listening on socket path /var/folders/xk/y5j8r_dd0qg9ckymx96qd81c0000gn/T/react-packager-e36f208f7a835e0174b01026652af058 for server with options {&amp;quot;projectRoots&amp;quot;:[&amp;quot;/Users/sam/Documents/job/fz-app&amp;quot;],&amp;quot;assetRoots&amp;quot;:[&amp;quot;/Users/sam/Documents/job/fz-app&amp;quot;],&amp;quot;blacklistRE&amp;quot;:{},&amp;quot;transformModulePath&amp;quot;:&amp;quot;/Users/sam/Documents/job/fz-app/node_modules/react-native/packager/transformer.js&amp;quot;,&amp;quot;nonPersistent&amp;quot;:true}
Sat, 07 May 2016 07:02:30 GMT ReactNativePackager:SocketServer succesfully created server
Sat, 07 May 2016 07:02:30 GMT ReactNativePackager:SocketServer connection to server 45912
Sat, 07 May 2016 07:02:30 GMT ReactNativePackager:SocketServer got request { type: &#39;buildBundle&#39;,
  data: 
   { entryFile: &#39;index.ios.js&#39;,
     dev: false,
     minify: true,
     platform: &#39;ios&#39; },
  id: &#39;xru0e36&#39; }
[3:02:30 PM] &amp;lt;START&amp;gt; find dependencies
[3:02:36 PM] &amp;lt;END&amp;gt;   Crawling File System (6361ms)
[3:02:36 PM] &amp;lt;START&amp;gt; Building in-memory fs for JavaScript
[3:02:37 PM] &amp;lt;END&amp;gt;   Building in-memory fs for JavaScript (290ms)
[3:02:37 PM] &amp;lt;START&amp;gt; Building in-memory fs for Assets
[3:02:37 PM] &amp;lt;END&amp;gt;   Building in-memory fs for Assets (204ms)
[3:02:37 PM] &amp;lt;START&amp;gt; Building Haste Map
[3:02:37 PM] &amp;lt;START&amp;gt; Building (deprecated) Asset Map
[3:02:37 PM] &amp;lt;END&amp;gt;   Building (deprecated) Asset Map (105ms)
[3:02:37 PM] &amp;lt;END&amp;gt;   Building Haste Map (229ms)
[3:02:37 PM] &amp;lt;END&amp;gt;   Building Dependency Graph (7105ms)
[3:02:38 PM] &amp;lt;END&amp;gt;   find dependencies (7604ms)
Sat, 07 May 2016 07:02:45 GMT ReactNativePackager:SocketServer request error { message: &#39;Invalid hex-character pattern in string&#39;,
  filename: 0,
  line: 39,
  col: 1,
  pos: 1704,
  stack: &#39;Error\n    at new JS_Parse_Error (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1526:18)\n    at js_error (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1534:11)\n    at parse_error (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1647:9)\n    at hex_bytes (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1704:17)\n    at read_escaped_char (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1688:49)\n    at eval (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1730:27)\n    at eval (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1870:24)\n    at Object.next_token [as input] (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1897:36)\n    at next (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:2012:25)\n    at expect_token (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:2045:20)&#39; }
Sat, 07 May 2016 07:02:45 GMT ReactNativePackager:SocketServer request finished error
Worker Farm: Received message for unknown index for existing child. This should not happen!
Sat, 07 May 2016 07:03:16 GMT ReactNativePackager:SocketServer server dying 45912
Sat, 07 May 2016 07:03:16 GMT ReactNativePackager:SocketServer exit code: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重点在这一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sat, 07 May 2016 07:02:45 GMT ReactNativePackager:SocketServer request error { message: &#39;Invalid hex-character pattern in string&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么 &lt;code&gt;Debug&lt;/code&gt; 模式下没有问题？这是因为 &lt;code&gt;Release&lt;/code&gt; 模式下，会使用 uglifyjs 压缩代码，碰上 &lt;code&gt;\u{1F601}&lt;/code&gt; 导致的。&lt;/p&gt;

&lt;p&gt;解法有两个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;直接使用表情字符 😁&lt;/li&gt;
&lt;li&gt;或者使用 &lt;a href=&#34;https://github.com/jorilallo/react-native-emoji&#34;&gt;react-native-emoji&lt;/a&gt; 这样的第三方库。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>