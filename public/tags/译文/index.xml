<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>译文 on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/%E8%AF%91%E6%96%87/</link>
    <description>Recent content in 译文 on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 06 Oct 2014 06:10:52 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/%E8%AF%91%E6%96%87/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Srcset 和 sizes</title>
      <link>https://www.zfanw.com/blog/srcset-and-sizes.html</link>
      <pubDate>Mon, 06 Oct 2014 06:10:52 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/srcset-and-sizes.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 第一部分：媒体查询有什么问题？&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#srcset_sizes&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 第二部分：srcset + sizes = 太棒了！&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 扩展阅读&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    &lt;strong&gt;译注&lt;/strong&gt;：本文译自 &lt;a href=&#34;http://ericportis.com/posts/2014/srcset-sizes/&#34;&gt;Srcset and sizes&lt;/a&gt;，原文使用 &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;CC BY 3.0&lt;/a&gt; 许可。感谢作者额外提供一套灰色背景图片。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;em&gt;陈三的补充：如果你只是想了解 srcset 与 sizes，可以直接跳到第二部分，或扩展阅读的链接，第一部分作者只是在论证，在响应式图片里如果使用媒体查询会有什么样的困难。&lt;/em&gt;
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;第一部分：媒体查询有什么问题？&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    且说你是在 &lt;a href=&#34;http://1997.webhistory.org/www.lists/www-talk.1993q1/0182.html&#34;&gt;1993.2.23&lt;/a&gt; 到 &lt;a href=&#34;http://alistapart.com/article/responsive-web-design/&#34;&gt;2010.5.25&lt;/a&gt; 期间制作网页。图片真是太简单了！无非就是：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      看看你的定宽布局
    &lt;/li&gt;
    &lt;li&gt;
      量一量，要塞入你手上这张图片，究竟每个用户屏幕上固定需要多少个像素
    &lt;/li&gt;
    &lt;li&gt;
      打开 Photoshop
    &lt;/li&gt;
    &lt;li&gt;
      根据量好的尺寸保存图片
    &lt;/li&gt;
    &lt;li&gt;
      在 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签中引用
    &lt;/li&gt;
    &lt;li&gt;
      给自己倒一杯啤酒(或是打开一罐豌豆罐头)，庆祝任务完成
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-hole.png&#34; rel=&#34;attachment wp-att-13999&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-hole.png&#34; alt=&#34;测量图片所占的空间大小&#34; width=&#34;2118&#34; class=&#34;alignnone size-full wp-image-13999&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-hole.png 2118w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-hole-300x202.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-hole-1024x690.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-hole-100x67.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-hole-768x517.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-hole-520x350.png 520w&#34; sizes=&#34;(max-width: 2118px) 100vw, 2118px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-image.png&#34; rel=&#34;attachment wp-att-13998&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-image.png&#34; alt=&#34;计算图片大小&#34; width=&#34;2448&#34; class=&#34;alignnone size-full wp-image-13998&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-image.png 2448w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-image-300x203.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-image-1024x694.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-image-100x67.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-image-768x520.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/measuring-image-520x352.png 520w&#34; sizes=&#34;(max-width: 2448px) 100vw, 2448px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/hammering.png&#34; rel=&#34;attachment wp-att-14001&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/hammering.png&#34; alt=&#34;把图片放入页面中&#34; width=&#34;2232&#34; class=&#34;alignnone size-full wp-image-14001&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/hammering.png 2232w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/hammering-300x200.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/hammering-1024x683.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/hammering-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/hammering-768x512.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/hammering-520x346.png 520w&#34; sizes=&#34;(max-width: 2232px) 100vw, 2232px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas.png&#34; rel=&#34;attachment wp-att-13994&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas.png&#34; alt=&#34;完工吃豆子&#34; width=&#34;1613&#34; class=&#34;alignnone size-full wp-image-13994&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas.png 1613w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas-150x150.png 150w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas-297x300.png 297w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas-1014x1024.png 1014w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas-100x100.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas-768x775.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/yay-peas-520x524.png 520w&#34; sizes=&#34;(max-width: 1613px) 100vw, 1613px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    在偶尔会有一些先知从荒原里走出，吐露&lt;a href=&#34;http://alistapart.com/article/dao/&#34;&gt;真相&lt;/a&gt;，指出这个方法与生俱来的问题以前，这个方法已经服侍普通的 Web 设计者们二十年了。
  &lt;/p&gt;
  
  &lt;p&gt;
    只是，时代正在改变。
  &lt;/p&gt;
  
  &lt;p&gt;
    四年前，Ethan Marcotte 发表了一篇&lt;a href=&#34;http://alistapart.com/article/responsive-web-design/&#34;&gt;文章&lt;/a&gt;；13 天后，Steve Jobs 发布一台&lt;a href=&#34;http://en.wikipedia.org/wiki/IPhone_4&#34;&gt;手机&lt;/a&gt;；突然之间，&lt;a href=&#34;http://unstoppablerobotninja.com/entry/fluid-images&#34;&gt;弹性&lt;/a&gt;和/或&lt;a href=&#34;http://en.wikipedia.org/wiki/Retina_Display&#34;&gt;高清屏&lt;/a&gt;图片就成形了。随后，各种&lt;a href=&#34;https://www.google.com/search?q=site:lists.whatwg.org+responsive+images&#34;&gt;咬牙切齿&lt;/a&gt;。
  &lt;/p&gt;&lt;video style=&#39;max-width: 100%;&#39; controls=&#34;controls&#34;&gt; &lt;source type=video/mp4 src=http://ericportis.com/assets/2014-03-24-srcset-sizes/oops/oops-720.mp4&gt; &lt;source type=video/ogg src=http://ericportis.com/assets/2014-03-24-srcset-sizes/oops/oops-720.ogv&gt; 您的浏览器不支持 
  
  &lt;code&gt;video&lt;/code&gt;，请下载后用播放器打开。 &lt;/video&gt; 
  
  &lt;p&gt;
    碰上响应式图片，我们的第一直觉，是试试我们在响应式布局上用到的工具：媒体查询。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/media-queries.png&#34; rel=&#34;attachment wp-att-13997&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/media-queries.png&#34; alt=&#34;响应式图片与媒体查询&#34; width=&#34;2221&#34; class=&#34;alignnone size-full wp-image-13997&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/media-queries.png 2221w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/media-queries-300x199.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/media-queries-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/media-queries-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/media-queries-768x511.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/media-queries-520x346.png 520w&#34; sizes=&#34;(max-width: 2221px) 100vw, 2221px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    浏览器无法知道它尚未加载的网站的一切。但它们对自身的渲染环境却总是了解：视口的尺寸，用户屏幕的分辨率，等等。媒体查询的思路是这样的：让 web 开发者根据特定环境做特定的事情。如果视口宽于 1000 像素，那么侧边栏就显示在左边。否则，将它推到主栏下方。如果用户的屏幕是高清屏，那就使用一张大图，否则使用小图。
  &lt;/p&gt;
  
  &lt;p&gt;
    太简单啦。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/easypeas.png&#34; rel=&#34;attachment wp-att-14004&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/easypeas.png&#34; alt=&#34;小意思&#34; width=&#34;2258&#34; class=&#34;alignnone size-full wp-image-14004&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/easypeas.png 2258w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/easypeas-300x199.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/easypeas-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/easypeas-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/easypeas-768x511.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/easypeas-520x346.png 520w&#34; sizes=&#34;(max-width: 2258px) 100vw, 2258px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    但不幸的是，响应式图片的情况里，使用媒体查询通常是非常&lt;a href=&#34;http://www.xanthir.com/b4Su0&#34;&gt;糟糕&lt;/a&gt;的。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/gulp.png&#34; rel=&#34;attachment wp-att-14002&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/gulp.png&#34; alt=&#34;糟糕咬到牙了&#34; width=&#34;2244&#34; class=&#34;alignnone size-full wp-image-14002&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/gulp.png 2244w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/gulp-300x200.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/gulp-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/gulp-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/gulp-768x511.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/gulp-520x346.png 520w&#34; sizes=&#34;(max-width: 2244px) 100vw, 2244px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    这值得花些时间解释。基于媒体查询的响应式图片选择之所以糟糕，是因为大部分响应式设计者是基于一个变量（视口宽度）来决定如何改变页面布局的，而对于响应式图片，我们实际上需要关心三个变量：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      布局中图片的渲染尺寸（CSS 像素尺寸）
    &lt;/li&gt;
    &lt;li&gt;
      像素密度
    &lt;/li&gt;
    &lt;li&gt;
      我们手头可支配的不同尺寸的图片
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &amp;#8230;这些被微妙地简缩成媒体查询。
  &lt;/p&gt;
  
  &lt;p&gt;
    一旦我们知道这三种东西，那么解法就简单了。从给定的资源里，挑出一张最小的，但是尺寸又要比&lt;code&gt;渲染尺寸&lt;/code&gt; * &lt;code&gt;像素密度&lt;/code&gt; 大。
  &lt;/p&gt;
  
  &lt;p&gt;
    但是，很不幸，要确定&lt;code&gt;渲染尺寸&lt;/code&gt;是一件非常困难的事。Web 开发者没法知道它。弹性图片会伸缩；在响应式布局中，一张图片的&lt;code&gt;渲染尺寸&lt;/code&gt;什么可能性都有。还有一点可能也让人吃惊，就是浏览器在加载图片时，也不知道&lt;code&gt;渲染尺寸&lt;/code&gt; &amp;#8211; &lt;code&gt;渲染尺寸&lt;/code&gt;依赖于页面 CSS，通常浏览器是在页面开始加载图片后很久才分析 CSS 的。
  &lt;/p&gt;
  
  &lt;p&gt;
    运气好的是（看起来如此），给我们的源文件附加媒体查询可以绕过这问题，只是要把&lt;code&gt;渲染尺寸&lt;/code&gt;分成两个：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      视口尺寸
    &lt;/li&gt;
    &lt;li&gt;
      相对于视口，图片大小将如何变化
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    &amp;#8230;当然，还需要作者在完成&lt;del&gt;一些&lt;/del&gt;许多&lt;del&gt;简单&lt;/del&gt;复杂的计算后指定视口尺寸与像素密度。
  &lt;/p&gt;
  
  &lt;p&gt;
    怎样的计算呢？让我们看一个例子。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/study-up.png&#34; rel=&#34;attachment wp-att-13995&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/study-up.png&#34; alt=&#34;计算响应式图片规则&#34; width=&#34;2244&#34; class=&#34;alignnone size-full wp-image-13995&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/study-up.png 2244w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/study-up-300x200.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/study-up-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/study-up-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/study-up-768x511.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/study-up-520x346.png 520w&#34; sizes=&#34;(max-width: 2244px) 100vw, 2244px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    （请注意，虽说我会尽量简化，但这个例子存在的理由，只是想告诉你，亲爱的读者们，基于媒体查询的计算过程是繁杂且易出错的。如果你很快就确认了这一点，请跳到第二部分。）
  &lt;/p&gt;
  
  &lt;p&gt;
    假定你有一张图片的三个版本：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;code&gt;large.jpg&lt;/code&gt; (1024 x 768)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;code&gt;medium.jpg&lt;/code&gt; (640 x 480)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;code&gt;small.jpg&lt;/code&gt; (320 x 240)
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    然后在弹性网格 &amp;#8211; 一种开始只一列，大视口中切换成三列的网格，比如&lt;a href=&#34;http://ericportis.com/assets/2014-03-24-srcset-sizes/wolves/&#34;&gt;这样&lt;/a&gt;，你想要挑选一张图片并加载它。
  &lt;/p&gt;
  
  &lt;p&gt;
    你想要支持 1x 和 2x 的&lt;code&gt;设备像素比&lt;/code&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    怎样构造媒体查询？让我们从上开始。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;large.jpg&lt;/code&gt; 只有在绝对必要 &amp;#8211; &lt;code&gt;small.jpg&lt;/code&gt; 和 &lt;code&gt;medium.jpg&lt;/code&gt; 都太小的时候才加载。更确切说，我们只需要如下情况加载 &lt;code&gt;large.jpg&lt;/code&gt;：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;渲染尺寸 x 像素密度 &amp;gt; 尺寸仅次于它的文件长度
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    我们的示例布局里，&lt;code&gt;渲染尺寸&lt;/code&gt;只是&lt;code&gt;视口尺寸&lt;/code&gt;的一个简单百分比。因此：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;渲染尺寸 = 图片相对视口的比例 x 视口尺寸
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;尺寸仅次于它的文件&lt;/code&gt;是 &lt;code&gt;medium.jpg&lt;/code&gt;，所以：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;尺寸仅次于它的文件长度 = 640px
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    汇合一下，则我们得到以下的不等式：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;图片相对视口的比例 x
视口尺寸 x
像素密度
&amp;gt; 640px
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    重排一下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt;
  640px ÷
  (图片相对视口的比例 x 像素密度)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    要构建媒体查询，我们需要求解每个可能的&lt;code&gt;图片相对视口的比例&lt;/code&gt;和&lt;code&gt;像素密度&lt;/code&gt;值下的&lt;code&gt;视口尺寸&lt;/code&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;code&gt;图片相对视口的比例&lt;/code&gt;有两个可能取值：到达断点(36em)前的 100&lt;a href=&#34;http://www.w3.org/TR/css3-values/#viewport-relative-lengths&#34;&gt;vw&lt;/a&gt;及到达断点后的 33.3vw。
  &lt;/p&gt;
  
  &lt;p&gt;
    至于&lt;code&gt;像素密度&lt;/code&gt;&amp;#8230;呃，&lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_displays_by_pixel_density&#34;&gt;取值可能无数&lt;/a&gt;，不过我们前面已经说过，只要支持&lt;code&gt;设备像素比&lt;/code&gt; 1x 和 2x。
  &lt;/p&gt;
  
  &lt;p&gt;
    两种&lt;code&gt;图片相对视口的比例&lt;/code&gt; x 两种&lt;code&gt;设备像素比&lt;/code&gt; = 四种需要我们考虑的情形。且一个一个地来看。
  &lt;/p&gt;
  
  &lt;h3&gt;
    1x，断点前
  &lt;/h3&gt;
  
  &lt;p&gt;
    因为我们的断点是 36em，所以很明显地：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;lt; 36em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    把&lt;code&gt;图片相对视口的比例&lt;/code&gt; = 100vw 和&lt;code&gt;像素密度&lt;/code&gt; = 1x 代入我们此前的不等式中：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt;
  640px ÷ ( 100vw x 1x ) = 640px = 40em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    结合两个不等式，我们得到一个不可能的东西：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;36em &amp;gt; 视口尺寸 &amp;gt; 40em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    所以我们可以不用考虑这种情况 &amp;#8211; 即单列布局下，1x 的设备像素比不需要 &lt;code&gt;large.jpg&lt;/code&gt;。
  &lt;/p&gt;
  
  &lt;h3&gt;
    2x，断点前
  &lt;/h3&gt;
  
  &lt;p&gt;
    再来：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;lt; 36em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    但这回我们代入 2x：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt;
  640px ÷ ( 100vw x 2x ) = 320px = 20em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    结合起来我们得到：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;36em &amp;gt; 视口尺寸 &amp;gt; 20em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    于是视口尺寸在这个范围中时，2x 屏幕上我们要加载 &lt;code&gt;large.jpg&lt;/code&gt;。
  &lt;/p&gt;
  
  &lt;h3&gt;
    1x，断点后
  &lt;/h3&gt;
  
  &lt;p&gt;
    现在我们要比断点宽了：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt; 36em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    而且我们是在 1x 屏幕上的三列布局：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt;
  640px ÷ ( 33.3vw × 1x ) = 1920px = 120em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    当视口大于 120em 时，它始终是大于 36em的，因此我们可以把 36em 丢掉不管。在 1x 屏幕上，我们要加载 &lt;code&gt;large.jpg&lt;/code&gt;的条件：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt; 120em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    Ok，最后一个。
  &lt;/p&gt;
  
  &lt;h3&gt;
    2x，断点后
  &lt;/h3&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt; 36em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    &amp;#8230;而且&amp;#8230;
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt;
  640px ÷ ( 33.3vw × 2x ) = 960px = 60em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    &amp;#8230;结论是，以下情况下在 2x 屏幕加载 &lt;code&gt;large.jpg&lt;/code&gt;：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;视口尺寸 &amp;gt; 60em
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    把所有的组合一起放入媒体查询：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;( (min-device-pixel-ratio: 1.5) and (min-width: 20.001em) and (max-width: 35.999em) ) or
( (max-device-pixel-ratio: 1.5) and (min-width: 120.001em) ) or
( (min-device-pixel-ratio: 1.5) and (min-width: 60.001em) )
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;code&gt;medium.jpg&lt;/code&gt; 的计算过程就留给读者做练习。
  &lt;/p&gt;
  
  &lt;p&gt;
    使用最初的 &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; 提案来标记我们的图片，结果是：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;picture&amp;gt;

  &amp;lt;source src=&#34;large.jpg&#34;
          media=&#34;( (min-device-pixel-ratio: 1.5) and (min-width: 20.001em) and (max-width: 35.999em) ) or
                 ( (max-device-pixel-ratio: 1.5) and (min-width: 120.001em) ) or
                 ( (min-device-pixel-ratio: 1.5) and (min-width: 60.001em) )&#34; /&amp;gt;
  &amp;lt;source src=&#34;medium.jpg&#34;
          media=&#34;( (max-device-pixel-ratio: 1.5) and (min-width: 20.001em) and (max-width: 35.999em) ) or
                 ( (max-device-pixel-ratio: 1.5) and (min-width: 60.001em) ) or
                 ( (min-device-pixel-ratio: 1.5) and (min-width: 10.001em) )&#34; /&amp;gt;
  &amp;lt;source src=&#34;small.jpg&#34; /&amp;gt;

  &amp;lt;!-- fallback --&amp;gt;
  &amp;lt;img src=&#34;small.jpg&#34; alt=&#34;A rad wolf&#34; /&amp;gt;

&amp;lt;/picture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    让人头痛！
  &lt;/p&gt;
  
  &lt;p&gt;
    另外，有一堆的标记不支持超过 2 的&lt;code&gt;设备像素比&lt;/code&gt;，或是低于 1 的&lt;code&gt;设备像素比&lt;/code&gt;，通常是不完美地支持这两者间的数值。如果我们要扩展&lt;code&gt;设备像素比&lt;/code&gt;的支持，则要考虑的情景数量就会陡增。
  &lt;/p&gt;
  
  &lt;p&gt;
    关于标记最糟糕的部分是，如果我们改变任何一个基础变量 &amp;#8211; 源图片的尺寸，要支持的设备分辨率&amp;#8230; 或者影响图片尺寸的布局的任一方面 &amp;#8211; 我们需要重新做过所有的算术。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/barf.png&#34; rel=&#34;attachment wp-att-14006&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/barf.png&#34; alt=&#34;吐&#34; width=&#34;2244&#34; class=&#34;alignnone size-full wp-image-14006&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/barf.png 2244w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/barf-300x200.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/barf-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/barf-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/barf-768x511.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/barf-520x346.png 520w&#34; sizes=&#34;(max-width: 2244px) 100vw, 2244px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    快，还是早点跳到第二部分吧！
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;srcset_sizes&#34;&gt;第二部分：&lt;code&gt;srcset&lt;/code&gt; + &lt;code&gt;sizes&lt;/code&gt; = 太棒了！&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heysrcset_sizes&#34; href=&#34;#srcset_sizes&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    那么，如果媒体查询不是正确的工具的话，现在怎么办？
  &lt;/p&gt;
  
  &lt;p&gt;
    让我们先回到响应式图片的几个基本变量上，这一次，考虑下它们什么时候变，以及谁知道了什么。
  &lt;/p&gt;
  
  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;
        变量
      &lt;/th&gt;
      
      &lt;th&gt;
        作者在写代码时是否清楚？
      &lt;/th&gt;
      
      &lt;th&gt;
        浏览器加载页面时是否清楚？
      &lt;/th&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        视口尺寸
      &lt;/td&gt;
      
      &lt;td&gt;
        no
      &lt;/td&gt;
      
      &lt;td&gt;
        yes
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        图片相对视口的比例
      &lt;/td&gt;
      
      &lt;td&gt;
        yes
      &lt;/td&gt;
      
      &lt;td&gt;
        no
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        像素密度
      &lt;/td&gt;
      
      &lt;td&gt;
        no
      &lt;/td&gt;
      
      &lt;td&gt;
        yes
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        源文件尺寸
      &lt;/td&gt;
      
      &lt;td&gt;
        yes
      &lt;/td&gt;
      
      &lt;td&gt;
        no
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  
  &lt;p&gt;
    注意了！一列 yes 时，另一列总是 no：作者与浏览器所了解的不一样，它们是互补的。我们是钥匙主人，它们是看门人；把我们的力量结合起来，如此，如此。
  &lt;/p&gt;
  
  &lt;p&gt;
    怎样联合起来？
  &lt;/p&gt;
  
  &lt;p&gt;
    媒体查询就像一套紧急预案，“你看，”我们跟浏览器说，“我不清楚视口会有多大，但如果有这么大，那就用这个文件。如果还要大，用那个。如果屏幕是高清屏，那也用那个，但如果我切换到三列布局，那还是不要用那个&amp;#8230;”我们是在给杂七八可能的文件贴标签，根据浏览器知道而我们写代码的无法知道的理由。
  &lt;/p&gt;
  
  &lt;p&gt;
    如我们所见的，实际上，这有太多工作要做。
  &lt;/p&gt;
  
  &lt;p&gt;
    那么，如果我们反过来呢？
  &lt;/p&gt;
  
  &lt;p&gt;
    譬如不再提供给浏览器一些乱七八糟的预案，只是告诉它它所不知道的东西？也就是说，图片相对于视口将怎样变换大小，以及源文件的尺寸。如果我们有办法把这些知识分享给浏览器，那选择源的条件不都就有了吗？
  &lt;/p&gt;
  
  &lt;p&gt;
    是的！实际上，这也是&lt;a href=&#34;http://picture.responsiveimages.org/&#34;&gt;最新的 &lt;picture&gt; 细则中&lt;/a&gt; &lt;code&gt;size&lt;/code&gt; 属性和 &lt;code&gt;srcset&lt;/code&gt; 中的 &lt;code&gt;w&lt;/code&gt; 描述符所做的事。再来看一张表：
  &lt;/p&gt;
  
  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;
        变量
      &lt;/th&gt;
      
      &lt;th&gt;
        作者在写代码时是否清楚？
      &lt;/th&gt;
      
      &lt;th&gt;
        浏览器加载页面时是否清楚？
      &lt;/th&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        视口尺寸
      &lt;/td&gt;
      
      &lt;td&gt;
        no
      &lt;/td&gt;
      
      &lt;td&gt;
        yes
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        图片相对视口的比例
      &lt;/td&gt;
      
      &lt;td&gt;
        yes
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;del&gt;no&lt;/del&gt;yes! 通过 &lt;code&gt;size&lt;/code&gt;！
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        像素密度
      &lt;/td&gt;
      
      &lt;td&gt;
        no
      &lt;/td&gt;
      
      &lt;td&gt;
        yes
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        源文件尺寸
      &lt;/td&gt;
      
      &lt;td&gt;
        yes
      &lt;/td&gt;
      
      &lt;td&gt;
        &lt;del&gt;no&lt;/del&gt;yes! 通过 &lt;code&gt;srcset&lt;/code&gt;！
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/rainbow.png&#34; rel=&#34;attachment wp-att-13993&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/rainbow.png&#34; alt=&#34;彩虹&#34; width=&#34;2208&#34; class=&#34;alignnone size-full wp-image-13993&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/rainbow.png 2208w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/rainbow-300x200.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/rainbow-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/rainbow-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/rainbow-768x512.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/rainbow-520x346.png 520w&#34; sizes=&#34;(max-width: 2208px) 100vw, 2208px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    在我们深入以前，且先搞明白三件事。
  &lt;/p&gt;
  
  &lt;p&gt;
    第一个，也是最重要的，目前(译注：原文写于 2014.3.24，译文的时间里 Chrome 34、Firefox 33 中已经实现)没有一个浏览器实现了它们，但前景看起来很不错，只是规范还没稳定。因此且慢使用。现在不能用，未来也只会出问题。
  &lt;/p&gt;
  
  &lt;p&gt;
    第二：曾经有一个叫 &lt;a href=&#34;http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2012-May/035855.html&#34;&gt;&lt;code&gt;srcset&lt;/code&gt;&lt;/a&gt; 的响应式图片提案。我们要讲的全新提案依赖的属性也叫 &lt;code&gt;srcset&lt;/code&gt;。新旧 &lt;code&gt;srcset&lt;/code&gt; 均在逗号分隔的资源 URLS 列表中使用 &lt;code&gt;w&lt;/code&gt; 描述符，但新旧 &lt;code&gt;w&lt;/code&gt; 所代表的意思完全不一样！旧的 &lt;code&gt;w&lt;/code&gt; 是媒体查询的简写形式：它描述的宽度是指视口宽度。新 &lt;code&gt;w&lt;/code&gt; 则表示文件的宽度。我们随后就会详细解释新的 &lt;code&gt;w&lt;/code&gt;，但现在，且让我掏出《黑衣人》中的记忆消除棒，消除掉你所有关于 &lt;code&gt;srcset&lt;/code&gt; 和 &lt;code&gt;w&lt;/code&gt; 的知识。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/men-in-black.png&#34; rel=&#34;attachment wp-att-13996&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/men-in-black.png&#34; alt=&#34;黑衣人&#34; width=&#34;2236&#34; class=&#34;alignnone size-full wp-image-13996&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/men-in-black.png 2236w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/men-in-black-300x199.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/men-in-black-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/men-in-black-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/men-in-black-768x511.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/men-in-black-520x346.png 520w&#34; sizes=&#34;(max-width: 2236px) 100vw, 2236px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    都忘了？很好。
  &lt;/p&gt;
  
  &lt;p&gt;
    第三点：如果你一路看下来，对之前的 &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; 细则燃起过希望的话，那么你要知道，新的 &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; 细则中，仍然允许你使用媒体查询切换源，也可以附加分辨率描述符给源 URLs。如果你是在做&lt;a href=&#34;http://usecases.responsiveimages.org/#art-direction&#34;&gt;艺术指导&lt;/a&gt;或是&lt;a href=&#34;http://usecases.responsiveimages.org/#device-pixel-ratio-based-selection&#34;&gt;固定大小的分辨率切换&lt;/a&gt;，那你绝对应该使用这些特性。但如果你只是想让你的图片伸缩，则别有新工具可用。
  &lt;/p&gt;
  
  &lt;p&gt;
    Okay。我想我已经扫清障碍，做好准备。让我们处理下我们的&lt;a href=&#34;http://ericportis.com/assets/2014-03-24-srcset-sizes/wolves/&#34;&gt;案例&lt;/a&gt;，这次使用 &lt;code&gt;srcset&lt;/code&gt; 和 &lt;code&gt;size&lt;/code&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    回顾一下，我们的图片有三个版本：
  &lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;code&gt;large.jpg&lt;/code&gt; (1024 x 768)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;code&gt;medium.jpg&lt;/code&gt; (640 x 480)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;code&gt;small.jpg&lt;/code&gt; (320 x 240)
    &lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;
    还有一个 36em 的断点位置，我们的布局从一列切换到三列。
  &lt;/p&gt;
  
  &lt;p&gt;
    下面是标记：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;img src=&#34;small.jpg&#34;
     srcset=&#34;large.jpg 1024w,
             medium.jpg 640w,
             small.jpg 320w&#34;
     sizes=&#34;(min-width: 36em) 33.3vw,
            100vw&#34;
     alt=&#34;A rad wolf&#34; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    你可能注意到，虽然这段标记取自 &lt;a href=&#34;http://picture.responsiveimages.org/&#34;&gt;&lt;code&gt;picture&lt;/code&gt; 细则&lt;/a&gt;，但我们却没见到 &lt;code&gt;picture&lt;/code&gt; 元素。&lt;code&gt;srcset&lt;/code&gt; 和 &lt;code&gt;size&lt;/code&gt; 属性是应用到 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 的，对于类似这个的简单的非艺术指导，非类型切换的案例，你可以也应该使用我们的老朋友 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 的实例来标记你的响应式图片。
  &lt;/p&gt;
  
  &lt;p&gt;
    一样的旧 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;，全新的属性；让我们一个个看过去。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;src=&#34;small.jpg&#34;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这个一点都不新鲜嘛。正是我们的回落(fallback) &lt;code&gt;src&lt;/code&gt;，功能照旧，在浏览器不识 &lt;code&gt;srcset&lt;/code&gt; &amp; &lt;code&gt;size&lt;/code&gt; 的时候加载该图片。
  &lt;/p&gt;
  
  &lt;p&gt;
    下一个！
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;srcset=&#34;large.jpg 1024w,
        medium.jpg 640w,
        small.jpg 320w&#34;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这个也是不说自明的。&lt;code&gt;srcset&lt;/code&gt; 接受一个逗号分隔的 URLs 列表，指向当前图片的所有版本；每个图片的宽度由 &lt;code&gt;w&lt;/code&gt; 描述符确定。因此，如果你”保存为 Web&amp;#8230;“时图片为 1024&amp;#215;768，那么就在 &lt;code&gt;srcset&lt;/code&gt; 中将其标记为 &lt;code&gt;1024w&lt;/code&gt;。简单。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/declarative.png&#34; rel=&#34;attachment wp-att-14005&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/declarative.png&#34; alt=&#34;表述性&#34; width=&#34;2236&#34; class=&#34;alignnone size-full wp-image-14005&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/declarative.png 2236w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/declarative-300x199.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/declarative-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/declarative-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/declarative-768x511.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/declarative-520x346.png 520w&#34; sizes=&#34;(max-width: 2236px) 100vw, 2236px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    你可能注意到，这里我们只指定了宽度。为什么不一起指定高度？我们的布局中，图片是由宽度限定的，它们的宽度通常由 CSS 明确指定，但高度不是。大部分的响应式图片也是由宽度限定的，因此细则中为了简单就只处理宽度。
  &lt;/p&gt;
  
  &lt;p&gt;
    展望未来，我们有&lt;a href=&#34;https://github.com/ResponsiveImagesCG/picture-element/issues/85&#34;&gt;理&lt;/a&gt;&lt;a href=&#34;https://github.com/ResponsiveImagesCG/picture-element/issues/86&#34;&gt;由&lt;/a&gt;(我看来，非常棒的理由)使用 &lt;code&gt;h&lt;/code&gt; 描述符来描述文件的高度，只是，还不到时候。
  &lt;/p&gt;
  
  &lt;p&gt;
    让我再强调一遍，你可以在 &lt;code&gt;srcset&lt;/code&gt; 源中使用 &lt;code&gt;1x&lt;/code&gt;/&lt;code&gt;2x&lt;/code&gt; 这样的分辨率描述符替换 &lt;code&gt;w&lt;/code&gt; 描述符，但不要在 &lt;code&gt;srcset&lt;/code&gt; 中混合使用它们。真的。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/lightning.png&#34; rel=&#34;attachment wp-att-14000&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/lightning.png&#34; alt=&#34;x 和 w 不要混用&#34; width=&#34;2237&#34; class=&#34;alignnone size-full wp-image-14000&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/lightning.png 2237w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/lightning-300x200.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/lightning-1024x682.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/lightning-100x66.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/lightning-768x512.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/lightning-520x346.png 520w&#34; sizes=&#34;(max-width: 2237px) 100vw, 2237px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Okay，这就是 &lt;code&gt;srcset&lt;/code&gt; 和 &lt;code&gt;w&lt;/code&gt; 了。
  &lt;/p&gt;
  
  &lt;p&gt;
    最后，浏览器在知道如何选择一个源文件前还需要知道图片在布局中的渲染尺寸。对于这个，我们有 &lt;code&gt;sizes&lt;/code&gt;。从例子中看：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sizes=&#34;(min-width: 36em) 33.3vw,
       100vw&#34;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    格式是这样的：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sizes=&#34;[media query] [length], [media query] [length] ... etc&#34;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    我们让媒体查询与长度成对出现。浏览器检查每个媒体查询，直到碰上匹配的，就使用配对的那个长度作为源文件选择难题的最后一个因素：图片相对于视口的渲染比例。
  &lt;/p&gt;
  
  &lt;p&gt;
    “那是什么？”你说，“媒体查询？我以为你说过它们非常糟糕？！”
  &lt;/p&gt;
  
  &lt;p&gt;
    我确实说过，在选择源上，它们是非常糟糕的一种机制。但这里媒体查询所做的并不一样，它们只是让浏览器提前一点(也是非常关键的)时间知道它将要在页面 CSS 碰到的断点情况。记不记得，我们第一个例子中的各种查询，根本与页面的唯一断点(36em)毫无关系？我是说，60em，20em，10em &amp;#8211; 它们到处都是。&lt;code&gt;sizes&lt;/code&gt; 中的断点必须准确反应你的页面断点。媒体查询后的长度表示的是，媒体查询判断为真时，图片在布局中的长度。
  &lt;/p&gt;
  
  &lt;p&gt;
    于是，浏览器就有了所有必要的信息，来做第一部分中我们这又拖、又懒、还易出错的人类需要做的那种种计算。于是我们就得以轻松，然后如上帝所愿去吃豆子。
  &lt;/p&gt;
  
  &lt;p&gt;
    而且！还记得不我们的媒体查询示例只覆盖 1x &amp; 2x 的屏幕？这个标记却可以在任何&lt;code&gt;设备像素比&lt;/code&gt;上使用。不用再猜测它可能或不太可能支持哪些分辨率了。2016 年 4.8625x 的智能手表出来时，&lt;code&gt;srcset&lt;/code&gt; &amp; &lt;code&gt;sizes&lt;/code&gt; 也已覆盖。
  &lt;/p&gt;
  
  &lt;p&gt;
    再者！这个办法也给了浏览器一些空间。指定给源的媒体查询或为真或为假，如果为真，则浏览器必须加载相应的源文件。&lt;code&gt;sizes&lt;/code&gt; 和 &lt;code&gt;srcset&lt;/code&gt; 没那么死板。规范允许浏览器当带宽或慢或贵的时候加载较小的源文件。
  &lt;/p&gt;
  
  &lt;p&gt;
    “嗯，所有这些无疑地听起来很棒，”你说，缓缓地点着头，开始理解描述性的而非条件方法的好处。“可是等等，什么是长度？”
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.w3.org/TR/css3-values/#lengths&#34;&gt;长度可以千奇百怪！&lt;/a&gt;一个长度可以是绝对的（比如 &lt;code&gt;99px&lt;/code&gt;，&lt;code&gt;16em&lt;/code&gt;）或是相对的（&lt;code&gt;33.3vw&lt;/code&gt;，就像我们的例子中）。你可能会注意到，不跟我们的例子一样，许多布局会结合使用绝对和相对单位。这也是&lt;a href=&#34;http://caniuse.com/calc&#34;&gt;意外地支持性特别好&lt;/a&gt;的 &lt;a href=&#34;http://dev.w3.org/csswg/css-values/#calc-notation&#34;&gt;calc() 函数&lt;/a&gt;的用处。比如说我要给我们的&lt;a href=&#34;http://ericportis.com/assets/2014-03-24-srcset-sizes/wolves/wolfroll.html&#34;&gt;三列布局增加一 12em 的侧边栏&lt;/a&gt;。我们这样调整我们的 sizes 属性：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sizes=&#34;(min-width: 36em) calc(.333 * (100vw - 12em)),
       100vw&#34;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    好了！
  &lt;/p&gt;
  
  &lt;p&gt;
    “Okay，okay，”你深思着说，摸了摸下巴，对这知识的涌入感到疲倦（也觉得激动）。“最后还有一件事：那个孤零零的 &lt;code&gt;100vw&lt;/code&gt; 是什么？你是不是忘了媒体查询？
  &lt;/p&gt;
  
  &lt;p&gt;
    在规范里，没有和媒体查询一同出现的长度是一个”默认长度“。如果没有匹配到哪个媒体查询，就使用默认的。这意味着，一张巨大的全宽横幅图片，你的标记可以如下简单：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;img src=&#34;small.jpg&#34;
     srcset=&#34;large.jpg 1024w, medium.jpg 640w, small.jpg 320w&#34;
     sizes=&#34;100vw&#34;
     alt=&#34;A rad wolf&#34; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    简单。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/empty-can.png&#34; rel=&#34;attachment wp-att-14003&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/empty-can.png&#34; alt=&#34;一地豆子&#34; width=&#34;4108&#34; class=&#34;alignnone size-full wp-image-14003&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2014/10/empty-can.png 4108w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/empty-can-300x109.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/empty-can-1024x372.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/empty-can-100x36.png 100w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/empty-can-768x279.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2014/10/empty-can-520x189.png 520w&#34; sizes=&#34;(max-width: 4108px) 100vw, 4108px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;扩展阅读&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.smashingmagazine.com/2014/05/responsive-images-done-right-guide-picture-srcset/&#34;&gt;Responsive Images Done Right: A Guide To &lt;picture&gt; And srcset – Smashing Magazine&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>东亚史，英国高利贷，及一个俄罗斯黑客的故事</title>
      <link>https://www.zfanw.com/blog/a-tale-of-east-asian-history-british-loan-sharks-and-a-russian-hacker.html</link>
      <pubDate>Sun, 25 Nov 2012 05:56:30 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/a-tale-of-east-asian-history-british-loan-sharks-and-a-russian-hacker.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_Hack&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 剖析 Hack&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 西蒙和他的朋友们&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    本文译自 &lt;a href=&#34;http://muninn.net/blog/2012/06/a-tale-of-east-asian-history-british-loan-sharks-and-a-russian-hacker/&#34;&gt;A Tale of East Asian History, British Loan Sharks, and a Russian Hacker&lt;/a&gt;，使用 &lt;a href=&#34;http://creativecommons.org/licenses/&#34;&gt;CC license&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    几个星期前，早上 6:30，我醒来接了个电话。
  &lt;/p&gt;
  
  &lt;p&gt;
    「我想买你的域名 froginawell.net，500 美元，你怎么说？」
  &lt;/p&gt;
  
  &lt;p&gt;
    出于本能，我在掩饰我电话里回答的声音，不想透露我其实刚从深度睡眠中被电话惊醒。在这极度唐突的提议前，可能还有些介绍性的句子。但我迷迷糊糊，还没完全清醒。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://froginawell.net/&#34; title=&#34;访问井底之蛙网站&amp;quot;&#34;&gt;井底之蛙&lt;/a&gt;是我早在 2004 年创建的一个网站，用来放一些学术博客，内容是关于东亚历史的，由教授和研究生们撰写。在我完成博士论文后，我就很少在上面发表什么了，不过我一些了不起的共事者们一直保持活跃。因为我们有大量的文章，主题广泛，函括东亚历史的很多内容，该网站吸引了相当数目的流量，特别是来自 Google 的，搜索「中国古代的性（ancient Chinese sex）」，又或者，很明显的，「满洲缠足（Manchu foot binding）」。我想这些访客会发现，这些链接还不够给他们的需求搔痒（笑）。我们的网站一直都没有广告，不管怎样，我还打算继续保持这种方式。
  &lt;/p&gt;
  
  &lt;p&gt;
    我拒绝了这位绅士，然后回去接着睡觉。但等我去到办公室，我看见一封从他那儿发来的电子邮件，且让我们叫他西蒙。他做了同样的直接报价，是在他打电话给我前几分钟发的。我回复了他的电子邮件，并解释说我不打算出售域名。
  &lt;/p&gt;
  
  &lt;p&gt;
    一个星期后，西蒙又发了封邮件。这一次，他想租我的域名。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      看来有人黑掉你的网站？又或者你自己换了你的主页标题？？不管怎么说，我要的关键词短语，你的排名已经上升了，所以我真的想租你的主页。我会增加我的报价，每天 150 美元。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    每天 150 美元？关键词短语？井底之蛙能给他提供什么关键词短语啊？他的电子邮件地址透露，他在一家英国太阳能公司工作。该网站看起来是合法的，在一个「合理的价格」上，为家庭提供太阳能安装。我徒劳地搜寻任何线索，想弄明白，为什么他会想要域 froginawell.net。我在我们网站上搜索任何有关太阳能能量或能源的东西。没有结果。我不想问他，因为我不想给他希望。
  &lt;/p&gt;
  
  &lt;p&gt;
    至于黑客攻击，这事以前发生过。有时候，我升级我们 WordPress 的速度有点慢，于是有过两次，我们的博客都被所谓的 &amp;#8220;pharma hack&amp;#8221; 攻击。这种攻击很阴险，会让你的网站看起来跟以前一样，但是 Google 搜索进入你的网站时，它就换掉所有博客文章的标题，化身为你可以想像的任何一种在线药物订购网站的广告。众所周知，这很难追查，因为黑客越来越擅长隐藏他们的代码，或者在 WordPress 深层次目录结构中，又或者在你无法察觉的数据库角落里。
  &lt;/p&gt;
  
  &lt;p&gt;
    然而，这一次，看起来并没有发生 pharma hack。只是，我 froginawell.net 域名的主页被改了，从一个简单的 HTML 文件改成一个 PHP 文件，这就允许页面执行代码。该文件的顶部添加了一行新代码，包含一个命令、一堆乱码。当时，我并没有时间深究。我正打算完成我博士论文的倒数第二章。于是我删除了有问题的文本，把我的主页改回 HTML，更改了我的帐户密码，重新安装中国博客（这在之前曾经被黑客入侵过），并发送一封电子邮件向我的主机商寻求帮助，希望能处理这起安全攻击。我的主机商回答说，如果我付给他们我现在所付的近两倍的钞票，添加一个新的安全服务，他们会很乐于帮忙的。否则，我得自己干了。
  &lt;/p&gt;
  
  &lt;p&gt;
    我只能是根据我所认为的被黑文件的位置，做了个不太完整的清理。之后我回复西蒙，「这个报价很慷慨，但我还是不需要。我已经决定保持我们的项目不带任何广告。」
  &lt;/p&gt;
  
  &lt;p&gt;
    西蒙于同一天再次回信。他仍然在 Google 上看到我被黑页面的标题。我到 Google 搜索井底之蛙，却看不出他到底讲的是什么，我猜想他看的应该是一些旧文章，在它们被黑时 Google 缓存了页面。西蒙写道：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      你知不知道为什么人们突然要攻击你？因为您的网站目前的盈利潜力。
    &lt;/p&gt;
    
    &lt;p&gt;
      如果您愿意开出价格，我将不胜感激，因为每个人都有一个价，我不希望你我错过这个机会。如果我们之间能达成一项协议，我可以给个更高的每日费用。你觉得每天 250 美元怎样。如果钱不是你想要的，你可以每天捐出 250 美元给慈善机构。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    每天 250 美元？这真是彻头彻尾的神经错乱了，实在太可疑了。当时是阵亡将士纪念日，周末时间，我正在旅行。如果邀约是真的，并且我愿意把井底之蛙首页换成某些人的广告的话，对我来说，处理起来也很痛苦，而且这一切都太可疑了。我拒绝了他，并告诉他，这件事没什么好谈，任何价格都不能让我在井底之蛙上放广告。
  &lt;/p&gt;
  
  &lt;p&gt;
    西蒙又回了我，这是最后一次。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      作为一个商人，我总是相信，天下没有买不到的东西，只有谈不拢的价格，尤其是在谈及商业内容时。不过，我尊重你的决定，这也将是最后一次发消息给你。我再最后出一个价，如果你还是决定不想要，我就再也不烦你了。每天 500 美元，提前支付。一年差不多 20 万美金。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    显然，他对我的拒绝感到困惑，不明白为什么我完全不像是一个理性经济人。我理解他的颓然。大概，他不曾遇见许多​​脆脆的刚从大学毕业的这类学生。我又回了他一轮，再次拒绝他的邀约，不过也希望他在他的生意上有好运气，在当时那个点，我仍然认为他是在一个太阳能电力公司工作。
  &lt;/p&gt;
  
  &lt;p&gt;
    我回到家的时候，下定决心要解决两个谜团：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      西蒙在 Google 查找井底之蛙网站时，看到的还是被黑状态的是什么？
    &lt;/li&gt;
    &lt;li&gt;
      究竟为什么，西蒙会先是出 500 美元购买我的域名，到最后想要每天 500 美元租我的站？
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    我发现的第一件事情是，我的网站仍有问题。黑客们再次修改我的主页，把它变成一个 php 文件，并在顶部添加了一个命令，以及一堆乱七八糟的东西。他们的后门并没有如我所预料地放在中国博客里，而是在其他地方。我必须对黑客行为做一个逆向工程。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_Hack&#34;&gt;剖析 Hack&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_Hack&#34; href=&#34;#_Hack&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    黑客添加到我的主页顶部的命令是 “pr​​eg_replace” 函数，在 PHP 中用于从某些文本中搜索一个词组，并用其他一些文字替代。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;preg_replace(&#34;[what you are searching for]&#34;,&#34;[what you wish to replace it with]&#34;,&#34;[the text to search]&#34;)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    在这个案例里，那些命令对我来讲显得非常晦涩，因为根本都是一堆乱码，如 &amp;#8221; \x65\166\x61\154 &amp;#8220;。这其实只是 ASCII 码文本以十进制和十六进制两个不同格式进行了混合。PHP 知道不要把它们当普通数字对待，因为有转义 &amp;#8220;\&amp;#8221; 字符，后面跟的 x 表示十六进制数字。在这个图中，你可以找到它们的含义。例如，上面的文字，以 \ X65 开头的，这是十六进制表示的 &amp;#8220;e&amp;#8221;，然后是十进制表示的 &amp;#8220;v&amp;#8221;，接着又换回十六进制，这次是 &amp;#8220;a&amp;#8221;，最后仍是十进制，&amp;#8221;l&amp;#8221;，合起来就是 &amp;#8220;eval&amp;#8221;。
  &lt;/p&gt;
  
  &lt;p&gt;
    对于计算机来说，这很明了，但对我这样的人类来说，要弄明白发生什么却很困难。我必须先将所有的乱七八糟的字符转换成常规字符。我使用 Python 来转换。在我的 Mac 上，打开终端，键入 python，然后用 python 的 print 命令来输出那一段乱码 ASCII 块：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;print(&#34;[put your gibberish here]&#34;)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这生成一个命令，说的是：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;Look for: |(.*)|ei
Replace it with: eval(&#39;$kgv=89483;&#39;.base64_decode(implode(&#34;\n&#34;,file(base64_decode(&#34;\1&#34;)))));$kgv=89483;
In the text:         L2hvbWUvZnJvZ2kyL3B1YmxpY19odG1sL2tvcmVhL3dwLWluY2x1ZGVzL2pzL2Nyb3AvbG9nLy4lODI4RSUwMDEzJUI4RjMlQkMxQiVCMjJCJTRGNTc=
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    现在，我总算找到感觉了。但是，这末尾的又是什么全新风味的杂乱代码？该文本编码使用 Base64 编码方法进行了编码。如果你有一个 Base64 编码的文本文件，你可以在 Mac OS X 或 Linux 命令行里通过下述命令解码：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;base64 -i encoded-text.txt -o outputed-decoded.txt
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    您也可以使用 Python，PHP，Ruby 等解码 base64，又或者在线的解码器。通过解码，得到了文件地址，该文件中包含更多要执行的代码：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;[…]public_html/korea/wp-includes/js/crop/log/.%828E%0013%B8F3%BC1B%B22B%4F57
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    但不只是这一个文件。那里有许多文件，里面包含着可替换的主页文本。我主页里的代码，通过前面一个命令，运行了其他隐藏在我的韩国博客一个深层目录的命令。虽然这些文件名和它们的内容使用一系列方法编码，比如 base64 编码，MD5 加密，字符转换成数字，任意值重复，还包括许多以 JSON 格式存储的内容。我还是耐心地找出所有细节，不过它似乎只针对 Google 提供不一样的主页，并且只在某些情况下。
  &lt;/p&gt;
  
  &lt;p&gt;
    其中一个被黑的文件会生成一个英国 payday loan 诈骗网站 speedypaydayloan.co.uk，它连接到一个假的伦敦公司 &amp;#8220;D and D Marketing&amp;#8221;，可以在网上看到很多地方讨论它的诈骗行为。换句话说，英国，并且只有英国的用户在访问 Google、查找 &amp;#8220;payday loans&amp;#8221; 时，井底之蛙上一个被狡猾入侵过的主页就将他们定向到一个诈骗网站，又或重定向到我网站上一个被编码过的巨大列表中的任意其他网站。
  &lt;/p&gt;
  
  &lt;p&gt;
    我很快就发现，不仅仅这些韩国博客下的文件可疑。它们只是黑客用来生成他们所期望有的具体结果的文件。经过对大量隐蔽代码的更多解码，我终于找到输送系统本身。要部署这个特殊的组合 &amp;#8211; 重定向和用来重定向的隐藏页，攻击者使用一个黑客梦想套装：被称为 “WSO 2.5“ 的东西。一旦他们发现我域名上旧版本 WordPress 的安全问题，他们就可以把 WSO 套件安装到隐蔽位置，这个位置有别于上述的攻击。虽然我不知道这个 Youtube 视频（没有声音）能保留多久，你可以&lt;a href=&#34;http://www.youtube.com/watch?v=y-Z5-uHvONc&#34;&gt;在这里&lt;/a&gt;看到黑客是怎样使用 WSO 的。真正用来安装控制我服务器的后门套件 PHP 代码可以在 &lt;a href=&#34;http://pastebin.com/N0eh3Q7Y&#34;&gt;pastebin 这里&lt;/a&gt;找到。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://muninn.net/blog/wp-content/uploads/2012/06/Screen-Shot-2012-06-05-at-11.44.06.png&#34;&gt;&lt;img src=&#34;http://muninn.net/blog/wp-content/uploads/2012/06/Screen-Shot-2012-06-05-at-11.44.06-300x118.png&#34; alt=&#34;&#34; title=&#34;屏幕截图在11.44.06 2012-06-05&#34; width=&#34;300&#34; height=&#34;118&#34; class=&#34;alignnone size-medium wp-image-1011&#34; /&gt;&lt;/a&gt;点击放大图片
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;西蒙和他的朋友们&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    那么，这一切跟我们的朋友西蒙及他的太阳能电力公司是怎么联系上的？ Google &lt;a href=&#34;https://www.google.com/webmasters/&#34;&gt;网站管理员工具&lt;/a&gt;显示，井底之蛙网站目前最热门查询词是 &amp;#8220;payday loans&amp;#8221;，这排名大约是在五月初上去的，有几十万的展示数，也就是那时&lt;网站被黑掉。有什么在驱动被黑的网站排名上升。
  &lt;/p&gt;
  
  &lt;p&gt;
    西蒙在他给我的一封电子邮件中写道，他涉足很多行业，这表明，他不仅仅只为一个太阳能电力公司工作。搞清楚我那被黑客攻击的网站是什么情况后，我搜索了他的全名及 &amp;#8220;loans uk&amp;#8221;，很快就发现，他（还经常是他的地址）注册了一系列的域名，其中至少有一个域名已经被暂停。这包括一个 payday loan 网站，一个移动电话交易网站，一个家庭贷款经纪人站，以及一些其他类型的看起来已经不存在的金融机构网站，还有另一家公司，致力于可替代能源。我猜测，西蒙的关键短语只能是 &amp;#8220;payday loans&amp;#8221;了，他看到了一个赚快钱的方式，就是通过新被攻陷的井底之蛙网站来宣传它的财务欺诈网站。他真的是认真的要付出那个数目吗？他是如何计划让这一切成功的？他知道这个 Google 排名可能只是一个被深度入侵的网站一时的排名吗？
  &lt;/p&gt;
  
  &lt;p&gt;
    西蒙的 500 美元报价并不是最后。我删除了所有有问题的文件，安装额外的安全保护，更改密码，并开始监视我的服务器原始访问文件。我要求谷歌网站管理员工具重新审查我的网站，希望能帮我摆脱英国的 payday loan 业务。然而，邀约继续来。
  &lt;/p&gt;
  
  &lt;p&gt;
    卢克，西蒙的竞争对手之一，给我写了一封十分礼貌的电子邮件，提供了一个更是随时可得的邀约，也顺便证实了我倒腾文件时发现的东西：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      您可能不知道，但您的网站已经被一个俄罗斯互联网营销分支机构攻陷，它们试图通过搜索关键词 &amp;#8220;payday loans&amp;#8221; 从英国赚钱&amp;#8230;&amp;#8230;粗略估计，这个链接当前的位置可以让黑客一周内赚入 10,000 美金。我们是这个黑客在英国地区的大型竞争对手，当然我们不屑他的这种行为，我们想阻止他这样获利，我们帮你换掉他插入的这条链接，换上我们的，我们每期支付佣金给您&amp;#8230;
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    这是“聪明的东西”，他解释说，“但不太合法。”我礼貌地拒绝了他。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://muninn.net/blog/wp-content/uploads/2012/06/Screen-Shot-2012-06-05-at-11.46.17.png&#34;&gt;&lt;img src=&#34;http://muninn.net/blog/wp-content/uploads/2012/06/Screen-Shot-2012-06-05-at-11.46.17-300x263.png&#34; alt=&#34;&#34; title=&#34;屏幕截图在11.46.17 2012-06-05&#34; width=&#34;300&#34; height=&#34;263&#34; class=&#34;alignnone size-medium wp-image-1012&#34; /&gt;&lt;/a&gt;点击放大图片
  &lt;/p&gt;
  
  &lt;p&gt;
    我刚清理完我的服务器没多久，它就开始遭遇 DOS 攻击（拒绝服务攻击）。井底之蛙的三个博客处在火力中，来自世界各地的一大打僵尸机器，短短 10 分钟内，试图读取每个博客主页超 48,000 次。我的主机商立即暂停我的帐户，因为我给他们的服务器造成不必要的压力。他们建议我花 10 倍左右我现在的主机价格买个托管专用服务器。一年前，因为我的博客受到 DOS 攻击 &amp;#8211; 其中大部分来自中国，我才把它们移到现在这个主机商里。之前的主机商是礼貌地拒绝做任何事情。现在的主机商总算客气，在监测一天的情况后恢复了我的站点，但没有什么能够阻拦一个攻击者租来几分钟的僵尸机器来攻击网站。这种无助感真是太可怕了，真的只能用很多钱来反击 &amp;#8211; 是的，钱 &amp;#8211; 我不想通过 payday loan 业务赚的钱。为了给这杂耍加点料，在网站被暂停后的几个小时内，两个不同的安全公司与我联系，号称保证能抵抗 DOS 攻击，并问我是否愿意跟他们讨论签署他们那昂贵的服务。他们怎么就知道我被 DOS 攻击了，而不是其他一些原因被暂停？
  &lt;/p&gt;
  
  &lt;p&gt;
    几天后，又一个 payday loan 操作者，且让我们叫他格兰特，通过 Twitter 与我联系。他解释说，“俄罗斯人”应该庆幸 &amp;#8211; 他相信是俄罗斯人黑入我的站，因为他的地理位置而不会受到任何罪罚，不过他建议，我们可以“利用这种情况”，把我站点上的链接分一半给他。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      我会每天付款给你，根据 Paypal 或银行转账赚到的数目。我说个潜在利润的数目，过去我排第 1 位时，我可以每天正常地收入 15,000 英镑。我看你的网站排名现在会上下波动，所以我不确定到底它能赚多少&amp;#8230;不过我想 4 位数一天应该没问题，不过没尝试，我不能肯定。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    我拒绝了他，并解释说，我已经清除了攻击。只是反馈到 Google 里还需要些时间。然而，在我向他请求更多他所知道的关于黑客的更多信息后，格兰特很热心地给我发一个长长的清单，都是些被攻击我网站的黑客攻陷的网站。不过这些其他网站在这个游戏中唯一的作用是使用锚文本 &amp;#8220;payday loans&amp;#8221; 反向链接到井底之蛙，以期迅速提高我网站排名。卢克曾经表示，这种方法之所以有效，是因为井底之蛙网站在 Google 中已经是一个相对“受信任”的站点。格兰特（他说他是直接从沙滩上给我电子邮件，我想对于每天从这种事情上赚入成千上万英镑的人来说沙滩确实是个好地方）还提供给我半打其他网站，它们现在正受到同样的隐藏页和重定向攻击。他推测，我受到的 DOS 攻击是来自他的其他竞争对手，他们不是试图花钱买我的合作，而是投入一些微不足道的成本，来简单地把我的网站从互联网上搞瘫掉。
  &lt;/p&gt;
  
  &lt;p&gt;
    谢天谢地，我的考验将很快结束，我只需密切关注我的服务器。感谢格兰特，卢克和西蒙，虽然，他们的俄罗斯复仇女神仍在继续他的工作。最后一个从格兰特发来的信息，
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      现在，Google 英国上排第一的是一家美国电台，这下我又有得忙了，真是 lol。
    &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>