<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 测试 on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 17 Oct 2015 03:50:12 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我们为什么写测试</title>
      <link>https://www.zfanw.com/blog/why-we-test-code.html</link>
      <pubDate>Sat, 17 Oct 2015 03:50:12 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/why-we-test-code.html</guid>
      <description>&lt;p&gt;我曾在&lt;a href=&#34;https://www.zfanw.com/blog/unpredict-css.html&#34;&gt;失控的 CSS&lt;/a&gt; 里讲到&lt;strong&gt;代码信任&lt;/strong&gt;问题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;样式 B 基于 A 的存在，如果 A 不存在，B 也就被破坏。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但样式很难测试，所以我们要使用约定。约定好了，就不要变；如果有人撕毁了约定，代码质量就会跟台风天的危楼一样。&lt;/p&gt;

&lt;p&gt;回到 JavaScript，假定有一个简单的加法函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function sum (a, b) {
  return a + b
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以测试，1 + 1 = 2：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assert.equal(sum(1, 1), 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 1 + 1 = 2 的设定下，我们可以推出：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1 + 2 = 3&lt;/p&gt;

&lt;p&gt;2 * 3 = 6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这十分显然。&lt;/p&gt;

&lt;p&gt;可是，&lt;strong&gt;如果有人撕毁了 1 + 1 = 2 这个设定，并且我们并不知情&lt;/strong&gt;，会怎样？&lt;/p&gt;

&lt;p&gt;我们所有的函数、表达式都会“异常”，我们会一头茫然，甚至砸掉电脑。&lt;/p&gt;

&lt;p&gt;但这时，再来跑一遍测试：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;assert.equal(sum(1, 1), 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试结果会告诉我们，1 + 1 != 2，我们就知道，有人撕毁了约定。&lt;/p&gt;

&lt;p&gt;我们无妨把测试看成一种承诺：&lt;strong&gt;我承诺此时以及未来，一加一都会等于二&lt;/strong&gt;，你可以安心地在这个承诺基础上做事。如果没有测试，我们就无法知晓，过去的自己或别人是否承诺了什么，现在又是怎样的情况。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>