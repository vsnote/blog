<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>翻译 on 陈三</title>
    <link>https://www.zfanw.com/blog/tags/%E7%BF%BB%E8%AF%91/</link>
    <description>Recent content in 翻译 on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 01 Jan 2014 04:44:05 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/tags/%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>关于面试前端工程师</title>
      <link>https://www.zfanw.com/blog/on-interviewing-front-end-engineers.html</link>
      <pubDate>Wed, 01 Jan 2014 04:44:05 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/on-interviewing-front-end-engineers.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 我们雇佣聪明的人&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 人力资源&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 成长&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-4&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 理解前端工程师&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-5&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; 什么是重点&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-6&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;6&lt;/span&gt; 我们说给自己的谎&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-7&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;7&lt;/span&gt; 结论&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    &lt;strong&gt;声明&lt;/strong&gt;：本文译自 Nicholas C. Zakas 的 &lt;a href=&#34;http://www.nczonline.net/blog/2013/12/27/on-interviewing-front-end-engineers/&#34;&gt;On interviewing front-end engineers&lt;/a&gt;。感谢作者的翻译许可。译文有不到之处，也欢迎指出。
  &lt;/p&gt;
  
  &lt;p&gt;
    Philip Walton 上周写了篇很有意思的文章&lt;fnref target=&#34;11171.1&#34; /&gt;，说的是他在旧金山几家公司面试前端工程师的经历。概述一下，就是他很惊讶，被问到他的（大部分跟计算机科学概念有关）及没问到他的问题（DOM 怎么看）惊到了。我很想自己也惊讶下，不过在过去七年里，我一直住在硅谷，所以这些故事是听了无数遍。再怎么想&lt;fnref target=&#34;11171.a&#34; /&gt;，我都不觉得这些问题只发生在旧金山湾区内 &amp;#8211; 我认为这是我们行业的问题，对前端工程师做什么以及创造什么价值的持续误解。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;我们雇佣聪明的人&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Google 当初崭露头角时，他们有个刻板的招聘方式。他们的想法是，尽可能招最聪明的人，这些人一旦招进来了，他们总能找出最能发挥你聪明才智的地方。这多少意味着，每个想进来的人，都会经历相似的面试，这面试试图标注一个工程师的「聪明」门槛&lt;fnref target=&#34;11171.b&#34; /&gt;。换句话说，不管你专长或专注的领域是什么，你的面试跟其他人基本差不多。一旦被视为「聪明」，你就被放进来了，只是还不知道你要做什么，直到你以一个真正资格的员工身份出现在校园里&lt;fnref target=&#34;11171.c&#34; /&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    今天的行业内，围绕前端工程师的许多糟糕的招聘实践，我认为是 Google 的做法带的坏头。在我参加 Google 的面试时，我被那些跟我专业没半点关系的问题吓到了。我还记得，有好几个情况下我都在考虑自己是不是该放弃，因为我压根不知道怎样用堆排序&lt;fnref target=&#34;11171.d&#34; /&gt;来准确跟踪数以亿计的请求的搜索查询时间。那不是我职业生涯中想要做的，我对计算机科学的这个领域不感兴趣；这个问题究竟能提供什么价值？
  &lt;/p&gt;
  
  &lt;p&gt;
    （注意：我不知道 Google 今天是不是还在坚持类似的招聘方式。出于这篇文章的目的，我且把它称作「Google 的做法」，但我绝不在影射 Google 现在还在这样干。此外，Google 现在有，也曾经有一些世界上最优秀的前端工程师为他们工作。我绝不是说，他们在前端招聘上做得不好。）
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;人力资源&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    从实用的角度出发，并且在经历创业失败后，我理解 Google 的做法。在一个公司还小，刚起步的时候，你需要能做各种不同事情的人。你没法要求有一个前端工程师、一个后端工程师、一个数据库管理员、一个网站可靠性工程师&lt;fnref target=&#34;11171.e&#34; /&gt;，这太奢侈。你需要的是能做很多事的人，至于他们是否达到专家水平就无所谓了 &amp;#8211; 他们只是需要把事情做好，然后在新任务出现时能够熟练上手。
  &lt;/p&gt;
  
  &lt;p&gt;
    在这种情况下，Google 的做法非常适用。资源有限，你要明白，你的公司能接受的工程师需要具备哪些技能。最重要的一点，是考虑工程师的流转性，他们是否能在各个任务间高效切换，雇用那些能随事情主次、需求变化而随时做出调整的人。年轻的公司不要奢望专业人士。为了把工作做完，每个人都需要尽可能地什么都能干&lt;fnref target=&#34;11171.f&#34; /&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    好消息是，如果你只是在找全能型的工程师，只要求他们具备起码的核心技能，那么这个流程会有不错的效果。在公司还小，还在成长时，这常常是最好办法。Google 即便在壮大后，也一直在用这个方法，不过确实有针对一些专业人士对流程做些加强（在我参加他们的面试时，的确被问到一些 JavaScript 的问题）。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;成长&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    我看到的成长型公司最大的问题是，他们未能调整他们的面试流程，来适应公司的成长、团队形态的变化。在你决定聘请专业人士及经验丰富的工程师时，Google 的招聘做法开始遭遇滑铁卢。万金油式的面试做法不再有效，你遇上麻烦了。对一家公司来说，这个阶段是艰难的。如果你以前从没招聘过专业人士，并且对该专业你也没有任何经验，那么你怎么能规划出一个能够准确探测你想要的技能库的面试流程呢？
  &lt;/p&gt;
  
  &lt;p&gt;
    太多的公司在使用「和」的方法。首先，你要符合我们目下对每个工程师起码的核心技能的要求，然后还得有能力做专业的事情。招聘公司们相信，它们在给工程师们保留完整的神奇门槛的同时，还可以招到他们需要的专业人士。这有时确实可行，但大多数时候并不如此。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-4&#34;&gt;理解前端工程师&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-4&#34; href=&#34;#i-4&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    任何一家公司，如果没有相关专业的经验，那么要招聘一个专家就会非常困难。原因很明显：专家在某些事情上有他们的独到之处。他们专注于一些别人不关心的事情，并且下意识地会忽视一些别人关心的事情。大脑只能处理这么多量的数据，要想在特定主题上深入，经常需要丢弃其他一些宽泛的信息。比如，过去有一时，我可以在 Visual Basic 4.0 里做任何事情。但现在，要我写出可以运行的代码就很困难了，我得从网上找。正因为我不想在这种事情上耗费我的精力，所以我才渐渐遗忘。
  &lt;/p&gt;
  
  &lt;p&gt;
    前端工程师当然是专业人士。我们关心一些别人看来十分疯狂的事情：了解各种浏览器间的差异，像素与 em 单位，PNG 与 JPEG，JavaScript APIs 兼容性，如何构建 DOM 来呈现 UI，等等。当我尝试给后端工程师解释一些我做过的很酷的事情时，他们的眼神很快变得呆滞无神。他们永远不会明白我是如何仓促地在 Internet Explorer、Firefox、Chrome 和 Safari 上测试东西，并且让它正常运行起来。他们永远不会明白为什么粗体在某些情形下看起来要比斜体好。他们永远不会明白我是怎么在浏览器里找 bug。当然，他们不必知道。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-5&#34;&gt;什么是重点&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-5&#34; href=&#34;#i-5&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    一直以来，都不断地有人问我，招前端工程师的话，是否需要他们知道计算机科学算法跟数据结构。我简单的回答是：不需要。我看不出，这些是人们成功成为前端工程师的必要条件。原因是大部分前端工程师每天接触的并不是这些。我用算法跟数据结构吗？有时吧，但我一般是在我需要它们的时候才去查找。这些信息在网上很容易找到，而关于这些主题，身边总是有人知道得比我更清楚。
  &lt;/p&gt;
  
  &lt;p&gt;
    我对前端工程师要求的东西，跟传统计算机科学概念没有太多关系。我以前写过什么造就一个好的前端工程师&lt;fnref target=&#34;11171.2&#34; /&gt;和如何面试前端工程师&lt;fnref target=&#34;11171.3&#34; /&gt;，大体上，我现在还认同我过去在这些文章里所写的东西。我要求你热爱 web，理解 HTML，CSS 跟 JavaScript，最重要的，知道怎么组合它们来解决问题。
  &lt;/p&gt;
  
  &lt;p&gt;
    总的来说，我认为面试应该设计来展示一个候选人每天要用的技能。说句好样的，我们来聊聊 O-notation（我开始我的职业7年左右才听到这么个词）或者堆排序（我第一次碰上堆排序是在我参加 Google 面试的时候）实在太简单不过，但这些是否能说明一个人能够成功干成前端工程师？绝对不能。
  &lt;/p&gt;
  
  &lt;p&gt;
    对细枝末节的问题，我也不太感冒。比如，「说三个右边对齐的方法」这种问题。这些问题让我想起高中的测试，只是在测试你反刍信息的能力，而不是让你展现技能。那么你应该问些什么？想想，这个角色，日常要做些什么，然后问些近似的问题。不确定？你总是可以从公司经历过的问题中找一些出来，然后问候选人们他们会怎么处理。我想知道的是，当我给你某些特定类型的问题时，你愿意、并且能够解决它。
  &lt;/p&gt;
  
  &lt;p&gt;
    我想看看你在你的领域里是怎么解决困难的，你怎样梳理问题、不兼容，在你卡壳的时候你的直觉怎样做判断，你是否能够采纳反馈并且将其纳入你的进程里。这些是人们成功的因素。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-6&#34;&gt;我们说给自己的谎&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-6&#34; href=&#34;#i-6&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    找出回文，计算数组总和这些问题之所以无处不在，经常是因为人们认为它们能够在评估一个候选人时提供关键的数据。关于这些问题，我们有各种美好意愿，可惜多是自欺：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;
        &lt;strong&gt;我们可以洞察他们的思考过程&lt;/strong&gt; &amp;#8211; 胡说八道。大学计算机科学考试上才经常出现的细枝末节或随机问题，可不会让我们洞察一个人的思考过程，但情景模拟可以。扔给一个人一个问题，而这问题跟他日常工作几乎没有关系，根本就无助于我们评估他们的价值。当然，我们可以借此看到他们是如何处理他们并不擅长的情况的。如果这是你所关心的，那么请继续问这类问题。但大部分工程师要处理的是某一特定的问题空间&lt;fnref target=&#34;11171.g&#34; /&gt;。这才是我们的问题应该关心的地方。
      &lt;/p&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        &lt;strong&gt;我们坚持每个人都要达到这个标准&lt;/strong&gt; &amp;#8211; 这是量丈聪明的神方法。你相信，每个人问上一些同样的问题就是给你一把放之四海而皆准的量尺。只是，这样的量尺并不存在。叫迈克尔·乔丹扔个100英里每小时的快球&lt;fnref target=&#34;11171.h&#34; /&gt;，并不能让你洞察他的高超技能。当然，有一些人什么事情都非常擅长，但专业人士为了成为专业人士，倾向于放手一些他们日常中不用的知识。世上没有量丈聪明的方法。
      &lt;/p&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        &lt;strong&gt;目前为止，运行良好&lt;/strong&gt; &amp;#8211; 通常是成长中的公司的喊声。我们过去用这些问题招聪明的人，为什么不再继续？你不再继续的原因是，整个团队的情况已经变了。你现在可以雇用专家，他们在他们领域里知道的比你公司里任何人都要多。你当然可以继续使用你过去一直在用的流程来招聘相同类型的人，但要想用同样的流程招到不同类型的人，那就有点痴人说梦了。
      &lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    在我的职业生涯里，这些东西我是听了一遍又一遍，烦到我看不到歇停的一天。将问题跟候选人做为职员真正要做的事情匹配起来，这才是最重要的。这才是有用信息所在之地。找不到一个单词的回文是个值得关注的小事，但它是否真正告诉你这人雇用后成功的概率呢？
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-7&#34;&gt;结论&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-7&#34; href=&#34;#i-7&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    在我近14年的职业生涯里，我负责招聘了很大数量的前端工程师，我可以自豪地说，我从来没有招错人。他们中有些证明只是不错，有些则是非常杰出，但没有一个是糟糕的。我是怎样做到？是的，我不关心那些他们日常里根本不会碰上的细枝末节问题，我问的都是些我的计划任务里他们未来需要处理的问题，透过这些问题，我可以看到他们的处理方式。在人们的问题空间里了解他们很重要，这对所有的专业人士来说都是一样的，而不仅限于前端工程师 &amp;#8211; 如果我在这篇文章里说得还不够清楚的话。
  &lt;/p&gt;
  
  &lt;p&gt;
    对专业人士来说，参加公司的面试也常是件令人沮丧的事。怎样让事情变好起来？提供反馈。如果你是第一个被雇用的专业人士，对招聘流程提出反馈，看看是不是可以做调整。即便你没有被录用，也可以反馈给你的招聘方，告诉他们，他们问你的这些问题，根本没有给你展示你技能的机会。
  &lt;/p&gt;
  
  &lt;p&gt;
    不幸的是，仍有大量的公司使用万金油方法来招聘工程师，你不会得到一个根据你特殊技能量身定制的面试。请别搞错，招聘是艰难的，而让公司增长更是难上加难。最好的改变方法是从内部发起，所以你可以提供反馈，参与你的公司的招聘，帮助别人有个更好的面试经历。
  &lt;/p&gt;
  
  &lt;footnotes&gt;
    &lt;fn name=&#34;11171.1&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://css-tricks.com/interviewing-front-end-engineer-san-francisco/&#34;&gt;Interviewing as a Front-End Engineer in San Francisco&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.a&#34;&gt;
      &lt;p&gt;
        by any stretch of the imagination
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.b&#34;&gt;
      &lt;p&gt;
        in an attempt to standardize the bar for &amp;#8220;smart&amp;#8221; as an engineer
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.c&#34;&gt;
      &lt;p&gt;
        until you showed up on campus as a fully-credentialed employee
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.d&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://en.wikipedia.org/wiki/Heap_sort&#34;&gt;heap sort&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.e&#34;&gt;
      &lt;p&gt;
        site reliability engineer
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.f&#34;&gt;
      &lt;p&gt;
        Everyone needs to be as full stack as possible to get work done
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.2&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://www.nczonline.net/blog/2007/08/15/what-makes-a-good-front-end-engineer/&#34;&gt;What makes a good front end engineer&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.3&#34;&gt;
      &lt;p&gt;
        &lt;a href=&#34;http://www.nczonline.net/blog/2010/01/05/interviewing-the-front-end-engineer/&#34;&gt;Interviewing the front end engineer&lt;/a&gt;
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.g&#34;&gt;
      &lt;p&gt;
        Most engineers will be dealing with a particular problem space
      &lt;/p&gt;
    &lt;/fn&gt;
    
    &lt;fn name=&#34;11171.h&#34;&gt;
      &lt;p&gt;
        fastball &amp;#8211; 译注，指棒球
      &lt;/p&gt;
    &lt;/fn&gt;
  &lt;/footnotes&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CSS 架构</title>
      <link>https://www.zfanw.com/blog/css-architecture.html</link>
      <pubDate>Thu, 22 Aug 2013 23:35:51 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/css-architecture.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_CSS&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 良好 CSS 架构的目标&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 常见的不良做法&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 原因&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 解决方法&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-4&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; 最佳实践&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-5&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;6&lt;/span&gt; 工具&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-6&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;7&lt;/span&gt; 总结&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-7&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;8&lt;/span&gt; 翻译说明&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    声明：本文译自 &lt;a href=&#34;http://philipwalton.com/articles/css-architecture/&#34;&gt;CSS Architecture&lt;/a&gt; 一文，thanks Philip Walton for sharing and translate permission。
  &lt;/p&gt;
  
  &lt;p&gt;
    对多数 Web 开发人员来说，精通 CSS 意味着你可以在代码中完美重现一个视觉模型。你不用表格，也尽少用图片 &amp;#8211; 对此你感到自豪。如果你真的很擅长，则你会用最新、最好的技术，比如媒体查询，过渡和转换。对优秀的 CSS 开发人员来说，这些都是必须，但在评估个人技能时，CSS 仍有一个方面很少被提及。
  &lt;/p&gt;
  
  &lt;p&gt;
    有趣的是，对其他语言我们通常不会这样疏忽大意。一个 Rails 开发人员不会因为他的代码合规范就被认为优秀。这是底线。它首先要符合规范，然后才好基于它来做评价：代码可读性如何？是否易于修改或扩展？跟程序的其它部分解藕度如何？扩展性如何？
  &lt;/p&gt;
  
  &lt;p&gt;
    这些问题，在评估代码库其他部分时是理所当然要问的，CSS 也不应该例外。今天的 web 应用程序比以往任何时候都要大，一个不经认真思索的 CSS 架构会削弱开发能力。所以，现在是时候了，像评估程序其他部分那样去评估 CSS。可不能再事后再说，或都干脆撇为“设计师”的问题。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_CSS&#34;&gt;良好 CSS 架构的目标&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_CSS&#34; href=&#34;#_CSS&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    在 CSS 社区，要就&lt;strong&gt;最佳实践&lt;/strong&gt;取得一般共识可不容易。只要看看 &lt;a href=&#34;https://news.ycombinator.com/item?id=2658948&#34;&gt;Hacker News 上的评论&lt;/a&gt;及 &lt;a href=&#34;http://csslint.net/&#34;&gt;CSS Lint&lt;/a&gt; 释出后&lt;a href=&#34;http://2002-2012.mattwilcox.net/archive/entry/id/1054/&#34;&gt;开发者们的反应&lt;/a&gt;就应该很清楚，我们连最基本的、CSS 作者该的和不该的都没法有一致看法。
  &lt;/p&gt;
  
  &lt;p&gt;
    因此，我认为我们应该首先定义我们的目标，而不是我为自己的一套最佳做法铺陈论点。如果我们在目标上达成一致，那么我们就有望找出糟糕的 CSS，不是因为它打破我们先入为主的关于好的观念，而是它在阻碍开发进度。
  &lt;/p&gt;
  
  &lt;p&gt;
    我相信良好的 CSS 架构目标应该与所有优秀软件开发相同。我希望我的 CSS 是可预见的，可重复使用的，可维护且可扩展的。
  &lt;/p&gt;
  
  &lt;h3&gt;
    可预见的
  &lt;/h3&gt;
  
  &lt;p&gt;
    可预见的 CSS 意味着你的规则不会给你意外。当你添加或更新一条规则，它不应该影响到你没打算影响的网站部分。对较少更改的小网站，这不很重要，但对数十或数百页的大网站来说，可预见的 CSS 是一种必须。
  &lt;/p&gt;
  
  &lt;h3&gt;
    可重复使用
  &lt;/h3&gt;
  
  &lt;p&gt;
    CSS 规则应该是抽象的，足够的解藕，你可以从现有部分快速创建新组件，而不必重编码那些你已经解决的模式和问题。
  &lt;/p&gt;
  
  &lt;h3&gt;
    可维护的
  &lt;/h3&gt;
  
  &lt;p&gt;
    当需要在你的网站上添加、更新或重新安排新组件和特性时，我们不需要重构现有 CSS。添加 X 组件到页面中不应该破坏 Y 组件。
  &lt;/p&gt;
  
  &lt;h3&gt;
    可扩展
  &lt;/h3&gt;
  
  &lt;p&gt;
    随着你的网站规模和复杂度不断增长，它通常需要更多开发者来维护。可扩展的 CSS 意味着，不论是一个人还是一个大的工程团队，都可以轻松管理。这也意味着，你的网站 CSS 架构平易近人，而不是一条巨大的学习曲线。仅仅因为你是今天唯一接触 CSS 的开发者并不意味着明天还如此。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;常见的不良做法&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    在我们了解良好 CSS 架构方法前，我觉得有必要先看看一些常见的不良做法，这对我们是有帮助的。通常只有通过反复的错误，我们才能开始拥抱其他方法。
  &lt;/p&gt;
  
  &lt;p&gt;
    下面的例子，其实是我写过的代码的概括，虽然技术上说没问题，但每一个都会导致灾难，让人头痛。这些模式过去一直让我陷入麻烦。尽管我意愿美好，并且承诺这一次一定会有所不同。
  &lt;/p&gt;
  
  &lt;h3&gt;
    基于父元素来修改组件
  &lt;/h3&gt;
  
  &lt;p&gt;
    互联网上，几乎每一个网站都会有一个视觉元素，每次出现都一个样，却总有一次例外。面对这种一次性时，几乎每一个新 CSS 开发人员（即使是有经验的）都用同样的处理方式。你为这一异类找到一个独有的父元素（或者你创建一个），然后写一个新规则来处理它。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;.widget {
  background: yellow;
  border: 1px solid black;
  color: black;
  width: 50%;
}

#sidebar .widget {
  width: 200px;
}

body.homepage .widget {
  background: white;
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    第一眼看去，这只是段相当无害的代码，且让我们按上面确立的目标检查一下它。
  &lt;/p&gt;
  
  &lt;p&gt;
    首先，例子中的窗口小部件不可预见。创建这些部件的开发人员期望它们看起来都是某个样子，然而当他在侧边栏或主页上使用时，却发现它不一样，尽管标记完全相同。
  &lt;/p&gt;
  
  &lt;p&gt;
    它也不好复用或扩展。如果其它页面上也需要它，而且跟主页上的样子一样，会怎样？又要添加新规则。
  &lt;/p&gt;
  
  &lt;p&gt;
    最后，它不易维护。如果小部件要重新设计，将要在好几个地方更新 CSS ，而且与上面的例子不同，这种反模式规则很少出现在一起。
  &lt;/p&gt;
  
  &lt;p&gt;
    想像一下，如果这种类型的代码是在任何其他语言中完成。基本上，你就是先定义一个类，然后在另一部分代码，取得类的定义，然后基于某一特定用途做些修改。这直接违反开放/闭合的软件开发原则：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;软件实体（类，模块，函数等）应该开放可扩展，对修改闭合。
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    在这篇文章后面，我们将看看如何不依赖父选择符来修改组件。
  &lt;/p&gt;
  
  &lt;h3&gt;
    过于复杂的选择器
  &lt;/h3&gt;
  
  &lt;p&gt;
    互联网上不时就会出现一篇文章，展示 CSS 选择器的能力，并宣称，你可以不靠任何类或 ID 样式化整个网站。
  &lt;/p&gt;
  
  &lt;p&gt;
    虽然技术上确实如此，但随着我接触 CSS 越多，我会越远离复杂的选择器。选择器越复杂，它跟 HTML 耦合度越高。依托 HTML 标签和组合的确可以让你的 HTML 干干净净，但结果是你的 CSS 又臃肿又杂乱。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;#main-nav ul li ul li div { }
#content article h1:first-child { }
#sidebar &amp;gt; div &amp;gt; h3 %2B p { }
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    所有上述例子逻辑上均合理。第一个可能是在样式化下拉菜单，第二个说的是文章主标题看起来应该跟所有其他 h1 元素不同，最后一个例子好像是给侧边栏部分的第一段落增加些额外间距。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果这 HTML 永远不变，这种说法还有可取之处，但 HTML 一直不变本身就很不现实。复杂的选择器让人印象深刻，它们可以从 HTML 中分离出表现，但它们很少有助于实现我们的目标 &amp;#8211; 良好 CSS 架构。
  &lt;/p&gt;
  
  &lt;p&gt;
    上面这些例子全是不能复用的。因为选择器指向的是标记中某一特殊地方，另一组件因为 HTML 结构不同，也就没法复用那些样式。举第一个选择器（下拉）为例，如果类似的下拉需要在不同页面出现，并且它还不在 &lt;code&gt;#main-nav&lt;/code&gt; 元素里，我们该怎么办？你只能重建整个风格。
  &lt;/p&gt;
  
  &lt;p&gt;
    一旦 HTML 需要改变，这些选择器也难以预见到情况。想像一下，如果某个开发者想把第三个例子中的 div 标签改成 HTML5 的 section 标签，整条规则就废了。
  &lt;/p&gt;
  
  &lt;p&gt;
    因为这些选择器只有在 HTML 保持不变时方有效，他们显然不可维护、不可扩展。
  &lt;/p&gt;
  
  &lt;p&gt;
    在大型应用中，你需要权衡然后做出妥协。以保持 HTML “干净”的名，换来复杂选择器的脆弱，其实并不值得。
  &lt;/p&gt;
  
  &lt;h3&gt;
    过于通用的类名称
  &lt;/h3&gt;
  
  &lt;p&gt;
    创建可复用的视觉组件时，组件的子元素置入组件类名的域中是很通用的作法。例如：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&#34;widget&#34;&amp;gt;
  &amp;lt;h3 class=&#34;title&#34;&amp;gt;...&amp;lt;/h3&amp;gt;
  &amp;lt;div class=&#34;contents&#34;&amp;gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    In condimentum justo et est dapibus sit amet euismod ligula ornare.
    Vivamus elementum accumsan dignissim.
    &amp;lt;button class=&#34;action&#34;&amp;gt;Click Me!&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

.widget {}
.widget .title {}
.widget .contents {}
.widget .action {}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    我们的想法是，&lt;code&gt;.title&lt;/code&gt;,&lt;code&gt;.contents&lt;/code&gt; 及 &lt;code&gt;.action&lt;/code&gt; 这些子元素类可以安全地样式化，而不必担心这些样式会溢出到任何其他同名类元素中。确实如此，但它同样不能阻止同类名的样式渗入。
  &lt;/p&gt;
  
  &lt;p&gt;
    在一个大项目中，像 &lt;code&gt;.title&lt;/code&gt; 这样的类名会经常出现，可能是在另一个上下文，甚至自身中。如果这种情况发生，部件的标题就会跟预想的不同。
  &lt;/p&gt;
  
  &lt;p&gt;
    过于通用的类名会导致难以预测的 CSS。
  &lt;/p&gt;
  
  &lt;h3&gt;
    让一个规则做太多事情
  &lt;/h3&gt;
  
  &lt;p&gt;
    有时候，你会创建一个视觉组件，离网站某部分左边、上边均20px：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;.widget {
  position: absolute;
  top: 20px;
  left: 20px;
  background-color: red;
  font-size: 1.5em;
  text-transform: uppercase;
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后在后面，你需要在不同位置使用这一组件。上述 CSS 代码将无法正常使用，因为它在不同上下文中无法复用。
  &lt;/p&gt;
  
  &lt;p&gt;
    问题就在于，你让这个选择器做太多事了。在一条规则里，你定义了外观和风格，还定义了布局和位置。外观和风格是可重复使用的，但布局和位置不是。因为它们是一起用的，整个规则就像个妥协结果。
  &lt;/p&gt;
  
  &lt;p&gt;
    虽然第一眼看上去，这可能无害，但它通常会导致 CSS 不熟练的开发者不断复制粘贴。如果一个团队新成员想要某样东西，它看起来像某一组件，比如说 .infobox，他们可能会先尝试该类。但是，那行不通的，因为新 infobox 会以不一样的方式定位，你觉得他们接下来可能做什么？在我的经验中，大多数新开发人员都不会把规则破开，整理成可复用的部分。相反，他们会创建一个新选择器，把这一特定实例需要的代码复制、粘贴进来，结果就不必要地重复了代码。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;原因&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    所有上述问题都有一个共性，他们把过多样式化的责任交给了 CSS。
  &lt;/p&gt;
  
  &lt;p&gt;
    这说法看似奇怪。毕竟，它是一个样式表，它难道不该承担大部分（如果不是全部）的样式化工作？这不正是我们想要的吗？
  &lt;/p&gt;
  
  &lt;p&gt;
    对这个问题的简单答案是“是的”，但是，像往常一样，事情并不总是那么简单。内容与表现分离是件好事，但就因为你从 HTML 中分离出 CSS，并不意味着你的内容就和表现分离了。换句话说，从 HTML 代码中分拆出所有表现代码并没有实现我们的目标，因为我们的 CSS 要正常工作，需要非常了解 HTML 结构。
  &lt;/p&gt;
  
  &lt;p&gt;
    此外，HTML 很少只是内容，它几乎总也是结构。而往往这种结构包含一些容器元素，它们没有其他目的，仅仅是让 CSS 隔离出一组特定元素。即使没有表现的类，这仍明显是表现与HTML的混合。但是否有必要把表现混入内容？&lt;!--这一段有些不明白--&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    我相信，基于 HTML 和 CSS 的当前状况，让它们共同努力一同担当表现层的工作是必要且明智的。内容层仍然可以通过模板和 partials 抽象出。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;解决方法&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    既然你的 HTML 和 CSS 要一同合作来搭建 web 应用程序表示层，他们就需要一个方法，可以实践所有良好的 CSS 架构原则。
  &lt;/p&gt;
  
  &lt;p&gt;
    我发现的最好办法是，CSS 里尽可能少包括 HTML 结构。CSS 应该定义一组视觉元素的外观（以减少与 HTML 的耦合度），这些元素不论出现在 HTML 的哪里，都应该是那个样子。如果某个组件在不同情况下需要不同外观，它应该被定义成其他东西，应用它则是 HTML 的责任。
  &lt;/p&gt;
  
  &lt;p&gt;
    举个例子， CSS 可能通过.button 类定义一个按钮组件。如果 HTML 想要一个特定元素，看起来像个按钮，它就应该使用这个类。如果有些情况需要不同的按钮（比如大点的，或是全宽度的），那么 CSS 需要一个新类来定义外观，然后，HTML 应用新类，来布置新外观。
  &lt;/p&gt;
  
  &lt;p&gt;
    CSS 定义你的组件是什么样子，HTML 则将这些样式配给页面元素。CSS 需要了解的 HTML 结构越少，结果会越好。
  &lt;/p&gt;
  
  &lt;p&gt;
    在 HTML 中明确声明你的需要，会有一个很大的好处，它可以让其他查看标签的开发人员确切知道什么元素应该是什么样子。意图是显而易见的。如果不是这种做法，就很难区分元素的外观是有意还是无意的，这给团队带来困惑。
  &lt;/p&gt;
  
  &lt;p&gt;
    一种常见的反对声音是说，标签中加入许多类会导致有很多工作要做。一条 CSS 规则可以针对特定组件的一千个实例，那么有什么值得我们为了在标签中明确声明去书写一千次的类名？
  &lt;/p&gt;
  
  &lt;p&gt;
    虽然这种担忧是有的，它却可能会误导。它的言下之意是，或者你在 CSS 中使用父选择器，或者你手写1000次 HTML 类，但我们显然有其他替代方法。Rails 或者其他框架中的视图层的抽象，可以在保持明确声明外观的同时无需在 HTML 里重复写同一类。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-4&#34;&gt;最佳实践&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-4&#34; href=&#34;#i-4&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    在我犯过一遍又一遍的上述错误，并付出代价后，我得出了以下建议。虽然并不全面，但我的经验表明，坚持这些原则将有助你更好地实现良好 CSS 架构目标。
  &lt;/p&gt;
  
  &lt;h3&gt;
    目的明确
  &lt;/h3&gt;
  
  &lt;p&gt;
    要确保你的选择器不会误操作其它元素的最好方法，是不给它们机会。&lt;code&gt;#main-nav ul li ul li div&lt;/code&gt; 这样的选择器，很容易就会在你更改标签过程中误样式化其他元素。而 &lt;code&gt;.subnav&lt;/code&gt; 这样的样式，绝不会无意样式化意外元素。给你想要样式化的元素应用类是最好的方式，这样可以保持你的 CSS 可预见。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;/* Grenade */
#main-nav ul li ul { }

/* Sniper Rifle */
.subnav { }
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    以上两个例子，你可以想像第一个是手榴弹，第二个则是狙击枪。手榴弹今天可能工作得很好，但你永远不知道，什么时候无辜平民会进入到爆炸范围内。
  &lt;/p&gt;
  
  &lt;h3&gt;
    分割你的需要
  &lt;/h3&gt;
  
  &lt;p&gt;
    我已经提到过，一个组织良好的组件层可以帮助离散 CSS 与 HTML 结构。此外，你的 CSS 组件本身应该是模块化的。组件应该知道如何样式化自己，并且能把样式化工作做好，但它们不应该负责它们的布局或位置，也不应该对他们将如何与周围元素间隔开这种事做太多假设。
  &lt;/p&gt;
  
  &lt;p&gt;
    总的来说，组件应该定义它们的外观，而不是布局或位置。当你看到位置，宽度，高度和边距与背景，颜色，字体等属性出现在同一规则里时，就要小心了。
  &lt;/p&gt;
  
  &lt;p&gt;
    布局和位置，应该由一个独立的布局类或单独的容器元素处理。（请记住，要有效分离内容与表现，往往要求把内容从容器中分开。）
  &lt;/p&gt;
  
  &lt;h3&gt;
    命名空间你的类
  &lt;/h3&gt;
  
  &lt;p&gt;
    我们已经研究了为什么父选择器在封装和防止样式交叉污染时不是100%有效的。一个更好的方法是应用命名空间到类上。如果一个元素是视觉组件一员，则每个子元素类都应该使用组件基类名称作为命名空间。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;/* High risk of style cross-contamination */
.widget { }
.widget .title { }

/* Low risk of style cross-contamination */
.widget { }
.widget-title { }
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    命名空间你的类，可以让你的组件自包含、模块化。它最大限度地减少现有类发生冲突的可能性，并降低样式化子元素需要的特殊性。
  &lt;/p&gt;
  
  &lt;h3&gt;
    通过修饰类来扩展组件
  &lt;/h3&gt;
  
  &lt;p&gt;
    当现有的组件在不同上下文中略有不同时，创建一个修饰类来扩展它。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;/* Bad */
.widget { }
#sidebar .widget { }

/* Good */
.widget { }
.widget-sidebar { }
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    我们已经看到基于组件父元素之一修改组件的缺点，但这里需要说一下：修饰类可应用到任何地方。基于位置的覆写只能在特定位置使用。修饰类则可以根据你的需要任意使用。最后，修饰类在 HTML 中清楚表达了开发者的意图。基于位置的类却相反，如果开发者只是查看 HTML，则基于位置的类根本不可见，大大增加被忽略的概率。
  &lt;/p&gt;
  
  &lt;h3&gt;
    按逻辑结构组织你的 CSS
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://snook.ca/&#34;&gt;Jonathan Snook&lt;/a&gt; 在他的优秀著作 &lt;a href=&#34;http://smacss.com/&#34;&gt;SMACSS&lt;/a&gt; 里建议把 CSS 规则分为​四个不同类别：基础，布局，模块，和状态。基础由重置规则和元素缺省值组成。布局用于定位跨站元素，还包含通用布局方式如网络系统。模块是可重复使用的视觉元素，状态则指可以通过 JavaScript 开启或关闭的样式。
  &lt;/p&gt;
  
  &lt;p&gt;
    在 SMACSS 系统中，模块（相当于我说的组件）包括 CSS 规则的绝大多数，因此我觉得常常有必要进一步分割，抽象到模板中。
  &lt;/p&gt;
  
  &lt;p&gt;
    组件是独立的视觉元素。模板却是构建使用的基础块。模板无法自代表，也很少描述外观和风格。相反，它们是单一，可重复的模式，可以放在一起，形成一个组件。
  &lt;/p&gt;
  
  &lt;p&gt;
    举个具体的例子，一个组件可能是一个模式对话框。对话框在头部可能有网站的背景渐变标识，围绕它可能有一个阴影，在右上角可能有一个关闭按钮，它可能被固定定位，水平和垂直均居中。这四种模式中的每一个都可能在整站中一次又一次地用到，这样你就不必每次都重新编写这些模式。他们都是模板，一起则构成组件。
  &lt;/p&gt;
  
  &lt;p&gt;
    我通常不在 HTML 中使用模板类，除非我有一个很好的理由。相反，我使用一个预处理器在组件定义中引入模板样式。我将在后面详细讨论我这样做的理由。
  &lt;/p&gt;
  
  &lt;h3&gt;
    使用类来样式化并且只用来样式化
  &lt;/h3&gt;
  
  &lt;p&gt;
    无论谁，如果在大型项目上工作过，就可能遇到一个 HTML 元素有这么一个类，类的目的完全未知。你想删除它，但你很犹豫，因为它可能有些你不知道的用处。这样的事一次又一次的发生，然后，随着时间推移，你的 HTML 中充满了不起任何作用的类，只因为团队成员都不敢删除它们。
  &lt;/p&gt;
  
  &lt;p&gt;
    问题就在于，前端 web 开发中，类通常都被赋予太多责任。他们样式化 HTML 元素，他们扮演 JavaScript 钩子，他们加入到 HTML 中用于功能检测，他们用于自动化测试等等。
  &lt;/p&gt;
  
  &lt;p&gt;
    这是问题。当类被应用程序的大部分用到，要想把它们从 HTML 中移除就会变得相当可怕。
  &lt;/p&gt;
  
  &lt;p&gt;
    然而，确立一个惯例就可以完全避免这个问题。在 HTML 中，当你看到一个类，你应该能够立即说出它的目的是什么。我的建议是给所有非样式化目的的类加上前缀。比如我用 .js-， 前缀表示用于 JavaScript 目的，.supports- 则表示 Modernizr 类。所有不带前缀的类用于样式且只用于样式。
  &lt;/p&gt;
  
  &lt;p&gt;
    这使得查找并移除未使用的类变得简单，就好像搜索样式表目录一样了。你甚至可以在 JavaScript 中自动完成这一过程，只要交叉引用 HTML 中的类与 document.styleSheets 对象的类。不在 document.styleSheets 中的类，可以安全删除。
  &lt;/p&gt;
  
  &lt;p&gt;
    总的来说，内容从表现区分开是最佳实践，功能跟表现分离同样重要。使用样式化的类做 JavaScript 勾子会高度藕合你的 CSS 和 JavaScript，结果会很难或不可能在不破坏功能的情况下更新某些元素的外观。
  &lt;/p&gt;
  
  &lt;h3&gt;
    使用逻辑结构命名你的类
  &lt;/h3&gt;
  
  &lt;p&gt;
    当下，大多数人写 CSS 用连字符分隔词。但单独的连字符通常并不足以区分不同类型的类。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://nicolasgallagher.com/&#34;&gt;Nicolas Gallagher&lt;/a&gt; 最近写了一篇，内容是&lt;a href=&#34;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&#34;&gt;他如何解决这个问题&lt;/a&gt;，我对他的办法略加修改然后应用，取得了不错的结果。为描述命名约定的必要，请看看以下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;/* A component */
.button-group { }

/* A component modifier (modifying .button) */
.button-primary { }

/* A component sub-object (lives within .button) */
.button-icon { }

/* Is this a component class or a layout class? */
.header { }
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    如果只是看上面的类，很难区分它们分别应用于哪一类规则。这不仅增加开发过程中的混乱，也使得你很难自动化测试你的 CSS 和 HTML。一个结构化的命名惯例，让你看到一个类名就确切地知道它与其他类的关系以及它应该出现在 HTML 的哪里 &amp;#8211; 也使得命名更容易，此前并不能的测试变得可行。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;/* Templates Rules (using Sass placeholders) */
%template-name
%template-name--modifier-name
%template-name__sub-object
%template-name__sub-object--modifier-name

/* Component Rules */
.component-name
.component-name--modifier-name
.component-name__sub-object
.component-name__sub-object--modifier-name

/* Layout Rules */
.l-layout-method
.grid

/* State Rules */
.is-state-type

/* Non-styled JavaScript Hooks */
.js-action-name
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    第一个例子重写：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;/* A component */
.button-group { }

/* A component modifier (modifying .button) */
.button--primary { }

/* A component sub-object (lives within .button) */
.button__icon { }

/* A layout class */
.l-header { }
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-5&#34;&gt;工具&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-5&#34; href=&#34;#i-5&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    保持一个有效、有组织的 CSS 架构是非常困难的，尤其是在大型团队里。一些这或那的不良规则，可以越滚越大，直到变成一个不可收拾的烂摊子。一旦你的应用程序 CSS 进入特殊性战争的地步，并且只能靠着出 !important 这张王牌，它不从头开始也就基本无法恢复。关键是从一开始就要避免这些问题。
  &lt;/p&gt;
  
  &lt;p&gt;
    幸运的是，有一些工具可以让控制你的网站 CSS 架构变得简单。
  &lt;/p&gt;
  
  &lt;h3&gt;
    预处理器
  &lt;/h3&gt;
  
  &lt;p&gt;
    这些日子里，谈 CSS 工具而不提预处理器是不可能的，因此本文也不例外。但在我赞美它们的有用之前，我应提醒几句。
  &lt;/p&gt;
  
  &lt;p&gt;
    预处理器帮助你更快地编写 CSS，而不是更好。因为最终它被变成纯 CSS，应此也适用同样规则。既然预处理器能让你更快地写 CSS，那么它也可以让你更快地写糟糕的 CSS，所以在考虑一个预处理解决你的问题前，重要的是要先明白良好的 CSS 架构。
  &lt;/p&gt;
  
  &lt;p&gt;
    许多所谓的预处理器“特性”实际上对 CSS 架构非常不好。以下是一些“特性”，我尽可能要避免（虽然总体思路适用于所有预处理语言，以下这些指南特指 Sass）。
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      如果只是为组织代码，决不要嵌套规则。只有当输出的 CSS 是你想要的时才嵌套。
    &lt;/li&gt;
    &lt;li&gt;
      如果不传递参数，切勿使用 mixin。不带参数的 mixins 不如使用模板代替，它们是可扩展的。
    &lt;/li&gt;
    &lt;li&gt;
      如果选择器并非单一类，则切勿使用 @extend。从设计的角度看，它毫无道理，而且它使编译后的 CSS 膨大。
    &lt;/li&gt;
    &lt;li&gt;
      在组件修饰符规则中，切勿为 UI 组件使用 @extend，因为你失去了继承链（这个问题后面会聊得更多）。
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    预处理器最好的部分，是一些函数如 &lt;a href=&#34;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend&#34;&gt;@extend&lt;/a&gt; 和 &lt;a href=&#34;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#placeholder_selectors_&#34;&gt;%placeholder&lt;/a&gt;。两者都能让你轻松管理 CSS 抽象，而不添加多余东西，也不会在你的 HTML 中添加大量基类，这些基类相当难管理。
  &lt;/p&gt;
  
  &lt;p&gt;
    使用 @extend 时应特别注意，因为有时你会想在你的 HTML 中添加那些类。例如，当你第一次了解 @extend，你很容易就在你所有修饰类中这样使用：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;.button {
  /* button styles */
}

/* Bad */
.button--primary {
  @extend .button;
  /* modification styles */
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这样做的问题是，在HTML中，你失去了继承链。这下，用 JavaScript 来选择所有按钮实例变得很难。
  &lt;/p&gt;
  
  &lt;p&gt;
    一般来说，我决不扩展 UI 组件或任何我后来可能会想知道类型的东西。这是模板的用处，也是另一种帮助区分模板和组件的方式。在你的应用程序逻辑中，你不会需要针对模板，因此可以安全地使用预处理器扩展它。
  &lt;/p&gt;
  
  &lt;p&gt;
    拿上面提到的模式对话框来说，它看起来可能是这样：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;.modal {
  @extend %dialog;
  @extend %drop-shadow;
  @extend %statically-centered;
  /* other modal styles */
}

.modal__close {
  @extend %dialog__close;
  /* other close button styles */
}

.modal__header {
  @extend %background-gradient;
  /* other modal header styles */
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h3&gt;
    CSS Lint
  &lt;/h3&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.stubbornella.org/content/&#34;&gt;Nicole Sullivan&lt;/a&gt; 和 &lt;a href=&#34;http://www.nczonline.net/&#34;&gt;Nicholas Zakas&lt;/a&gt; 创建了 &lt;a href=&#34;http://csslint.net/&#34;&gt;CSS Lint &lt;/a&gt;，一个代码质量检查工具，帮助开发人员检测他们的 CSS 坏习惯。他们的网站这样介绍：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;CSS Lint 指出你的 CSS 代码问题。它检查基本语法，并且对代码应用一组规则，查找有问题的模式或效率低下的地方。规则都是可插拔的，因此你可以轻松编写自己的，或是忽略那些你不想要的规则。
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    虽然一般的规则集对于大多数项目可能并不完美，CSS Lint 最大的特点是它有能力根据你的需要进行定制。这意味着你可以从他们的默认列表中挑出你想要的，也可以编写自己的。
  &lt;/p&gt;
  
  &lt;p&gt;
    像 CSS Lint 这样的工具，在任何大型团队中都是必不可少的，这可以确保一致和惯例。也正像我在前面提到的，约定伟大的地方是，他们允许像 CSS Lint 这样的工具轻易识别出问题。
  &lt;/p&gt;
  
  &lt;p&gt;
    基于我上面提出的约定，要编写规则来检查反模式就很容易。这里有我使用的几个建议：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      不要在你的选择器中使用 ID。
    &lt;/li&gt;
    &lt;li&gt;
      任何多部分规则都不要使用非语义类型选择（如 DIV，SPAN）。
    &lt;/li&gt;
    &lt;li&gt;
      不要使用超过2个组合的选择器。
    &lt;/li&gt;
    &lt;li&gt;
      不要允许任何 “js” 开头的类名。
    &lt;/li&gt;
    &lt;li&gt;
      非 “l-” 前缀的规则经常使用布局和定位则给出警告。
    &lt;/li&gt;
    &lt;li&gt;
      如果一个类后来作为一个其他东西的子类重新定义，则给出警告。
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    这些显然只是建议，但他们的主要目的，就是让你思考你的项目要如何加强标准。
  &lt;/p&gt;
  
  &lt;h3&gt;
    HTML Inspector
  &lt;/h3&gt;
  
  &lt;p&gt;
    早些时候，我提到，要找出 HTML 中用到却不曾在任何样式表中定义的类是很容易的。我目前正在开发一个工具叫做 &lt;a href=&#34;https://github.com/philipwalton/html-inspector&#34;&gt;HTML Inspector&lt;/a&gt; ，它让这个过程更简单。
  &lt;/p&gt;
  
  &lt;p&gt;
    HTML Inspector 遍历你的 HTML（很像 CSS Lint），允许你编写自己的规则，在一些惯例被打破时抛出错误和警告。我目前使用以下规则：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      如果相同 ID 不止一次出现​​在页面上，抛出警告。
    &lt;/li&gt;
    &lt;li&gt;
      不使用任何样式表中没有的类，白名单（如 “js-” 前缀的类）里的也不使用。
    &lt;/li&gt;
    &lt;li&gt;
      修饰类不应该离开它们的基类使用。
    &lt;/li&gt;
    &lt;li&gt;
      如果祖先中不包含基类，则不要使用次对象类
    &lt;/li&gt;
    &lt;li&gt;
      普通的 DIV 或 SPAN元素，不附带任何类的话，不应该用在HTML中。
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-6&#34;&gt;总结&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-6&#34; href=&#34;#i-6&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    CSS 不只是视觉设计。不要因为你写的是 CSS，就丢掉编程最佳实践。像 OOP，DRY，开放/闭合的原则，关注点分离等概念仍然适用于 CSS。
  &lt;/p&gt;
  
  &lt;p&gt;
    我们的底线是，无论如何组织代码，请确保判断方法的标准是，它们是否在长远上，真正让你的开发变得更加简单、易于维护。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-7&#34;&gt;翻译说明&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-7&#34; href=&#34;#i-7&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      Sass 部分，因为我只用过 LESS，所以理解不一定准确
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>东亚史，英国高利贷，及一个俄罗斯黑客的故事</title>
      <link>https://www.zfanw.com/blog/a-tale-of-east-asian-history-british-loan-sharks-and-a-russian-hacker.html</link>
      <pubDate>Sun, 25 Nov 2012 05:56:30 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/a-tale-of-east-asian-history-british-loan-sharks-and-a-russian-hacker.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_Hack&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 剖析 Hack&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 西蒙和他的朋友们&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    本文译自 &lt;a href=&#34;http://muninn.net/blog/2012/06/a-tale-of-east-asian-history-british-loan-sharks-and-a-russian-hacker/&#34;&gt;A Tale of East Asian History, British Loan Sharks, and a Russian Hacker&lt;/a&gt;，使用 &lt;a href=&#34;http://creativecommons.org/licenses/&#34;&gt;CC license&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    几个星期前，早上 6:30，我醒来接了个电话。
  &lt;/p&gt;
  
  &lt;p&gt;
    「我想买你的域名 froginawell.net，500 美元，你怎么说？」
  &lt;/p&gt;
  
  &lt;p&gt;
    出于本能，我在掩饰我电话里回答的声音，不想透露我其实刚从深度睡眠中被电话惊醒。在这极度唐突的提议前，可能还有些介绍性的句子。但我迷迷糊糊，还没完全清醒。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://froginawell.net/&#34; title=&#34;访问井底之蛙网站&amp;quot;&#34;&gt;井底之蛙&lt;/a&gt;是我早在 2004 年创建的一个网站，用来放一些学术博客，内容是关于东亚历史的，由教授和研究生们撰写。在我完成博士论文后，我就很少在上面发表什么了，不过我一些了不起的共事者们一直保持活跃。因为我们有大量的文章，主题广泛，函括东亚历史的很多内容，该网站吸引了相当数目的流量，特别是来自 Google 的，搜索「中国古代的性（ancient Chinese sex）」，又或者，很明显的，「满洲缠足（Manchu foot binding）」。我想这些访客会发现，这些链接还不够给他们的需求搔痒（笑）。我们的网站一直都没有广告，不管怎样，我还打算继续保持这种方式。
  &lt;/p&gt;
  
  &lt;p&gt;
    我拒绝了这位绅士，然后回去接着睡觉。但等我去到办公室，我看见一封从他那儿发来的电子邮件，且让我们叫他西蒙。他做了同样的直接报价，是在他打电话给我前几分钟发的。我回复了他的电子邮件，并解释说我不打算出售域名。
  &lt;/p&gt;
  
  &lt;p&gt;
    一个星期后，西蒙又发了封邮件。这一次，他想租我的域名。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      看来有人黑掉你的网站？又或者你自己换了你的主页标题？？不管怎么说，我要的关键词短语，你的排名已经上升了，所以我真的想租你的主页。我会增加我的报价，每天 150 美元。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    每天 150 美元？关键词短语？井底之蛙能给他提供什么关键词短语啊？他的电子邮件地址透露，他在一家英国太阳能公司工作。该网站看起来是合法的，在一个「合理的价格」上，为家庭提供太阳能安装。我徒劳地搜寻任何线索，想弄明白，为什么他会想要域 froginawell.net。我在我们网站上搜索任何有关太阳能能量或能源的东西。没有结果。我不想问他，因为我不想给他希望。
  &lt;/p&gt;
  
  &lt;p&gt;
    至于黑客攻击，这事以前发生过。有时候，我升级我们 WordPress 的速度有点慢，于是有过两次，我们的博客都被所谓的 &amp;#8220;pharma hack&amp;#8221; 攻击。这种攻击很阴险，会让你的网站看起来跟以前一样，但是 Google 搜索进入你的网站时，它就换掉所有博客文章的标题，化身为你可以想像的任何一种在线药物订购网站的广告。众所周知，这很难追查，因为黑客越来越擅长隐藏他们的代码，或者在 WordPress 深层次目录结构中，又或者在你无法察觉的数据库角落里。
  &lt;/p&gt;
  
  &lt;p&gt;
    然而，这一次，看起来并没有发生 pharma hack。只是，我 froginawell.net 域名的主页被改了，从一个简单的 HTML 文件改成一个 PHP 文件，这就允许页面执行代码。该文件的顶部添加了一行新代码，包含一个命令、一堆乱码。当时，我并没有时间深究。我正打算完成我博士论文的倒数第二章。于是我删除了有问题的文本，把我的主页改回 HTML，更改了我的帐户密码，重新安装中国博客（这在之前曾经被黑客入侵过），并发送一封电子邮件向我的主机商寻求帮助，希望能处理这起安全攻击。我的主机商回答说，如果我付给他们我现在所付的近两倍的钞票，添加一个新的安全服务，他们会很乐于帮忙的。否则，我得自己干了。
  &lt;/p&gt;
  
  &lt;p&gt;
    我只能是根据我所认为的被黑文件的位置，做了个不太完整的清理。之后我回复西蒙，「这个报价很慷慨，但我还是不需要。我已经决定保持我们的项目不带任何广告。」
  &lt;/p&gt;
  
  &lt;p&gt;
    西蒙于同一天再次回信。他仍然在 Google 上看到我被黑页面的标题。我到 Google 搜索井底之蛙，却看不出他到底讲的是什么，我猜想他看的应该是一些旧文章，在它们被黑时 Google 缓存了页面。西蒙写道：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      你知不知道为什么人们突然要攻击你？因为您的网站目前的盈利潜力。
    &lt;/p&gt;
    
    &lt;p&gt;
      如果您愿意开出价格，我将不胜感激，因为每个人都有一个价，我不希望你我错过这个机会。如果我们之间能达成一项协议，我可以给个更高的每日费用。你觉得每天 250 美元怎样。如果钱不是你想要的，你可以每天捐出 250 美元给慈善机构。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    每天 250 美元？这真是彻头彻尾的神经错乱了，实在太可疑了。当时是阵亡将士纪念日，周末时间，我正在旅行。如果邀约是真的，并且我愿意把井底之蛙首页换成某些人的广告的话，对我来说，处理起来也很痛苦，而且这一切都太可疑了。我拒绝了他，并告诉他，这件事没什么好谈，任何价格都不能让我在井底之蛙上放广告。
  &lt;/p&gt;
  
  &lt;p&gt;
    西蒙又回了我，这是最后一次。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      作为一个商人，我总是相信，天下没有买不到的东西，只有谈不拢的价格，尤其是在谈及商业内容时。不过，我尊重你的决定，这也将是最后一次发消息给你。我再最后出一个价，如果你还是决定不想要，我就再也不烦你了。每天 500 美元，提前支付。一年差不多 20 万美金。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    显然，他对我的拒绝感到困惑，不明白为什么我完全不像是一个理性经济人。我理解他的颓然。大概，他不曾遇见许多​​脆脆的刚从大学毕业的这类学生。我又回了他一轮，再次拒绝他的邀约，不过也希望他在他的生意上有好运气，在当时那个点，我仍然认为他是在一个太阳能电力公司工作。
  &lt;/p&gt;
  
  &lt;p&gt;
    我回到家的时候，下定决心要解决两个谜团：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      西蒙在 Google 查找井底之蛙网站时，看到的还是被黑状态的是什么？
    &lt;/li&gt;
    &lt;li&gt;
      究竟为什么，西蒙会先是出 500 美元购买我的域名，到最后想要每天 500 美元租我的站？
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    我发现的第一件事情是，我的网站仍有问题。黑客们再次修改我的主页，把它变成一个 php 文件，并在顶部添加了一个命令，以及一堆乱七八糟的东西。他们的后门并没有如我所预料地放在中国博客里，而是在其他地方。我必须对黑客行为做一个逆向工程。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_Hack&#34;&gt;剖析 Hack&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_Hack&#34; href=&#34;#_Hack&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    黑客添加到我的主页顶部的命令是 “pr​​eg_replace” 函数，在 PHP 中用于从某些文本中搜索一个词组，并用其他一些文字替代。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;preg_replace(&#34;[what you are searching for]&#34;,&#34;[what you wish to replace it with]&#34;,&#34;[the text to search]&#34;)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    在这个案例里，那些命令对我来讲显得非常晦涩，因为根本都是一堆乱码，如 &amp;#8221; \x65\166\x61\154 &amp;#8220;。这其实只是 ASCII 码文本以十进制和十六进制两个不同格式进行了混合。PHP 知道不要把它们当普通数字对待，因为有转义 &amp;#8220;\&amp;#8221; 字符，后面跟的 x 表示十六进制数字。在这个图中，你可以找到它们的含义。例如，上面的文字，以 \ X65 开头的，这是十六进制表示的 &amp;#8220;e&amp;#8221;，然后是十进制表示的 &amp;#8220;v&amp;#8221;，接着又换回十六进制，这次是 &amp;#8220;a&amp;#8221;，最后仍是十进制，&amp;#8221;l&amp;#8221;，合起来就是 &amp;#8220;eval&amp;#8221;。
  &lt;/p&gt;
  
  &lt;p&gt;
    对于计算机来说，这很明了，但对我这样的人类来说，要弄明白发生什么却很困难。我必须先将所有的乱七八糟的字符转换成常规字符。我使用 Python 来转换。在我的 Mac 上，打开终端，键入 python，然后用 python 的 print 命令来输出那一段乱码 ASCII 块：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;print(&#34;[put your gibberish here]&#34;)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这生成一个命令，说的是：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;Look for: |(.*)|ei
Replace it with: eval(&#39;$kgv=89483;&#39;.base64_decode(implode(&#34;\n&#34;,file(base64_decode(&#34;\1&#34;)))));$kgv=89483;
In the text:         L2hvbWUvZnJvZ2kyL3B1YmxpY19odG1sL2tvcmVhL3dwLWluY2x1ZGVzL2pzL2Nyb3AvbG9nLy4lODI4RSUwMDEzJUI4RjMlQkMxQiVCMjJCJTRGNTc=
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    现在，我总算找到感觉了。但是，这末尾的又是什么全新风味的杂乱代码？该文本编码使用 Base64 编码方法进行了编码。如果你有一个 Base64 编码的文本文件，你可以在 Mac OS X 或 Linux 命令行里通过下述命令解码：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;base64 -i encoded-text.txt -o outputed-decoded.txt
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    您也可以使用 Python，PHP，Ruby 等解码 base64，又或者在线的解码器。通过解码，得到了文件地址，该文件中包含更多要执行的代码：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;[…]public_html/korea/wp-includes/js/crop/log/.%828E%0013%B8F3%BC1B%B22B%4F57
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    但不只是这一个文件。那里有许多文件，里面包含着可替换的主页文本。我主页里的代码，通过前面一个命令，运行了其他隐藏在我的韩国博客一个深层目录的命令。虽然这些文件名和它们的内容使用一系列方法编码，比如 base64 编码，MD5 加密，字符转换成数字，任意值重复，还包括许多以 JSON 格式存储的内容。我还是耐心地找出所有细节，不过它似乎只针对 Google 提供不一样的主页，并且只在某些情况下。
  &lt;/p&gt;
  
  &lt;p&gt;
    其中一个被黑的文件会生成一个英国 payday loan 诈骗网站 speedypaydayloan.co.uk，它连接到一个假的伦敦公司 &amp;#8220;D and D Marketing&amp;#8221;，可以在网上看到很多地方讨论它的诈骗行为。换句话说，英国，并且只有英国的用户在访问 Google、查找 &amp;#8220;payday loans&amp;#8221; 时，井底之蛙上一个被狡猾入侵过的主页就将他们定向到一个诈骗网站，又或重定向到我网站上一个被编码过的巨大列表中的任意其他网站。
  &lt;/p&gt;
  
  &lt;p&gt;
    我很快就发现，不仅仅这些韩国博客下的文件可疑。它们只是黑客用来生成他们所期望有的具体结果的文件。经过对大量隐蔽代码的更多解码，我终于找到输送系统本身。要部署这个特殊的组合 &amp;#8211; 重定向和用来重定向的隐藏页，攻击者使用一个黑客梦想套装：被称为 “WSO 2.5“ 的东西。一旦他们发现我域名上旧版本 WordPress 的安全问题，他们就可以把 WSO 套件安装到隐蔽位置，这个位置有别于上述的攻击。虽然我不知道这个 Youtube 视频（没有声音）能保留多久，你可以&lt;a href=&#34;http://www.youtube.com/watch?v=y-Z5-uHvONc&#34;&gt;在这里&lt;/a&gt;看到黑客是怎样使用 WSO 的。真正用来安装控制我服务器的后门套件 PHP 代码可以在 &lt;a href=&#34;http://pastebin.com/N0eh3Q7Y&#34;&gt;pastebin 这里&lt;/a&gt;找到。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://muninn.net/blog/wp-content/uploads/2012/06/Screen-Shot-2012-06-05-at-11.44.06.png&#34;&gt;&lt;img src=&#34;http://muninn.net/blog/wp-content/uploads/2012/06/Screen-Shot-2012-06-05-at-11.44.06-300x118.png&#34; alt=&#34;&#34; title=&#34;屏幕截图在11.44.06 2012-06-05&#34; width=&#34;300&#34; height=&#34;118&#34; class=&#34;alignnone size-medium wp-image-1011&#34; /&gt;&lt;/a&gt;点击放大图片
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;西蒙和他的朋友们&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    那么，这一切跟我们的朋友西蒙及他的太阳能电力公司是怎么联系上的？ Google &lt;a href=&#34;https://www.google.com/webmasters/&#34;&gt;网站管理员工具&lt;/a&gt;显示，井底之蛙网站目前最热门查询词是 &amp;#8220;payday loans&amp;#8221;，这排名大约是在五月初上去的，有几十万的展示数，也就是那时&lt;网站被黑掉。有什么在驱动被黑的网站排名上升。
  &lt;/p&gt;
  
  &lt;p&gt;
    西蒙在他给我的一封电子邮件中写道，他涉足很多行业，这表明，他不仅仅只为一个太阳能电力公司工作。搞清楚我那被黑客攻击的网站是什么情况后，我搜索了他的全名及 &amp;#8220;loans uk&amp;#8221;，很快就发现，他（还经常是他的地址）注册了一系列的域名，其中至少有一个域名已经被暂停。这包括一个 payday loan 网站，一个移动电话交易网站，一个家庭贷款经纪人站，以及一些其他类型的看起来已经不存在的金融机构网站，还有另一家公司，致力于可替代能源。我猜测，西蒙的关键短语只能是 &amp;#8220;payday loans&amp;#8221;了，他看到了一个赚快钱的方式，就是通过新被攻陷的井底之蛙网站来宣传它的财务欺诈网站。他真的是认真的要付出那个数目吗？他是如何计划让这一切成功的？他知道这个 Google 排名可能只是一个被深度入侵的网站一时的排名吗？
  &lt;/p&gt;
  
  &lt;p&gt;
    西蒙的 500 美元报价并不是最后。我删除了所有有问题的文件，安装额外的安全保护，更改密码，并开始监视我的服务器原始访问文件。我要求谷歌网站管理员工具重新审查我的网站，希望能帮我摆脱英国的 payday loan 业务。然而，邀约继续来。
  &lt;/p&gt;
  
  &lt;p&gt;
    卢克，西蒙的竞争对手之一，给我写了一封十分礼貌的电子邮件，提供了一个更是随时可得的邀约，也顺便证实了我倒腾文件时发现的东西：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      您可能不知道，但您的网站已经被一个俄罗斯互联网营销分支机构攻陷，它们试图通过搜索关键词 &amp;#8220;payday loans&amp;#8221; 从英国赚钱&amp;#8230;&amp;#8230;粗略估计，这个链接当前的位置可以让黑客一周内赚入 10,000 美金。我们是这个黑客在英国地区的大型竞争对手，当然我们不屑他的这种行为，我们想阻止他这样获利，我们帮你换掉他插入的这条链接，换上我们的，我们每期支付佣金给您&amp;#8230;
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    这是“聪明的东西”，他解释说，“但不太合法。”我礼貌地拒绝了他。
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://muninn.net/blog/wp-content/uploads/2012/06/Screen-Shot-2012-06-05-at-11.46.17.png&#34;&gt;&lt;img src=&#34;http://muninn.net/blog/wp-content/uploads/2012/06/Screen-Shot-2012-06-05-at-11.46.17-300x263.png&#34; alt=&#34;&#34; title=&#34;屏幕截图在11.46.17 2012-06-05&#34; width=&#34;300&#34; height=&#34;263&#34; class=&#34;alignnone size-medium wp-image-1012&#34; /&gt;&lt;/a&gt;点击放大图片
  &lt;/p&gt;
  
  &lt;p&gt;
    我刚清理完我的服务器没多久，它就开始遭遇 DOS 攻击（拒绝服务攻击）。井底之蛙的三个博客处在火力中，来自世界各地的一大打僵尸机器，短短 10 分钟内，试图读取每个博客主页超 48,000 次。我的主机商立即暂停我的帐户，因为我给他们的服务器造成不必要的压力。他们建议我花 10 倍左右我现在的主机价格买个托管专用服务器。一年前，因为我的博客受到 DOS 攻击 &amp;#8211; 其中大部分来自中国，我才把它们移到现在这个主机商里。之前的主机商是礼貌地拒绝做任何事情。现在的主机商总算客气，在监测一天的情况后恢复了我的站点，但没有什么能够阻拦一个攻击者租来几分钟的僵尸机器来攻击网站。这种无助感真是太可怕了，真的只能用很多钱来反击 &amp;#8211; 是的，钱 &amp;#8211; 我不想通过 payday loan 业务赚的钱。为了给这杂耍加点料，在网站被暂停后的几个小时内，两个不同的安全公司与我联系，号称保证能抵抗 DOS 攻击，并问我是否愿意跟他们讨论签署他们那昂贵的服务。他们怎么就知道我被 DOS 攻击了，而不是其他一些原因被暂停？
  &lt;/p&gt;
  
  &lt;p&gt;
    几天后，又一个 payday loan 操作者，且让我们叫他格兰特，通过 Twitter 与我联系。他解释说，“俄罗斯人”应该庆幸 &amp;#8211; 他相信是俄罗斯人黑入我的站，因为他的地理位置而不会受到任何罪罚，不过他建议，我们可以“利用这种情况”，把我站点上的链接分一半给他。
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      我会每天付款给你，根据 Paypal 或银行转账赚到的数目。我说个潜在利润的数目，过去我排第 1 位时，我可以每天正常地收入 15,000 英镑。我看你的网站排名现在会上下波动，所以我不确定到底它能赚多少&amp;#8230;不过我想 4 位数一天应该没问题，不过没尝试，我不能肯定。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    我拒绝了他，并解释说，我已经清除了攻击。只是反馈到 Google 里还需要些时间。然而，在我向他请求更多他所知道的关于黑客的更多信息后，格兰特很热心地给我发一个长长的清单，都是些被攻击我网站的黑客攻陷的网站。不过这些其他网站在这个游戏中唯一的作用是使用锚文本 &amp;#8220;payday loans&amp;#8221; 反向链接到井底之蛙，以期迅速提高我网站排名。卢克曾经表示，这种方法之所以有效，是因为井底之蛙网站在 Google 中已经是一个相对“受信任”的站点。格兰特（他说他是直接从沙滩上给我电子邮件，我想对于每天从这种事情上赚入成千上万英镑的人来说沙滩确实是个好地方）还提供给我半打其他网站，它们现在正受到同样的隐藏页和重定向攻击。他推测，我受到的 DOS 攻击是来自他的其他竞争对手，他们不是试图花钱买我的合作，而是投入一些微不足道的成本，来简单地把我的网站从互联网上搞瘫掉。
  &lt;/p&gt;
  
  &lt;p&gt;
    谢天谢地，我的考验将很快结束，我只需密切关注我的服务器。感谢格兰特，卢克和西蒙，虽然，他们的俄罗斯复仇女神仍在继续他的工作。最后一个从格兰特发来的信息，
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      现在，Google 英国上排第一的是一家美国电台，这下我又有得忙了，真是 lol。
    &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>52 赫兹 – 世界上最孤独的鲸</title>
      <link>https://www.zfanw.com/blog/52-hertz-the-loneliest-whale-in-the-world.html</link>
      <pubDate>Tue, 18 Sep 2012 03:58:43 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/52-hertz-the-loneliest-whale-in-the-world.html</guid>
      <description>

&lt;p&gt;&lt;strong&gt;声明&lt;/strong&gt;：来文译自 &lt;a href=&#34;http://blogs.discovery.com/animal_news/2012/05/52-hertz-the-loneliest-whale-in-the-world.html&#34;&gt;discovery 网站&lt;/a&gt;，版权归所有者所有，翻译未经授权，仅为个人兴趣。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.whoi.edu/cms/images/oceanus/2005/5/v44n1-briefs12en_10079.jpg&#34; alt=&#34;52 hertz whale&#34; /&gt;&lt;/p&gt;

&lt;p&gt;几十年来，NOAA （美国海洋及大气层管理署）的科学家一直在追踪一个神秘的鲸鱼声音，这声音听起来就好像喇叭手溺死前的鬼嚎一样。现在已经确定这声音是属于一头鲸鱼的，一头与世上其他鲸鱼唱着不同频率声音的鲸鱼。&lt;/p&gt;

&lt;p&gt;由于它所发出的声音的频率范围与众不同，这头鲸就被起名“52 赫兹”。它是世界是最孤独的鲸，因为它所唱的似乎注定得不到回应。大部分其他种类的须鲸，比如蓝鲸，座头鲸，发出的声音的频率要低很多，大约 15-25 赫兹范围。&lt;/p&gt;

&lt;p&gt;52 赫兹不仅声音的频率与众不同，它的叫声跟其他类鲸鱼相比，也要更为短促更加频繁。这就好像它在讲着自己的语言 &amp;#8211; 只有一个人讲的语言。更奇怪的是，52 赫兹迁徙路线与其他尚存的须鲸也不一样。它可真是唱也孤独，来去也孤独。&lt;/p&gt;

&lt;p&gt;是否 52 赫兹会是我们以前所未知的须鲸某一种类的最后一只？这是一种可能。鲸鱼生物学家还提出，它可能是畸形的，又或者罕见的杂交后代 &amp;#8211; 比如蓝鲸与长须鲸的后代。但无论怎样的解释，52 赫兹显然是别一类。&lt;/p&gt;

&lt;p&gt;有证据显示它正在成熟中，因为自 1992 年美国海军第一次发现它后，它的声音变得有些深沉 &amp;#8211; 具体可以看 2004 年&lt;a href=&#34;http://www.nytimes.com/2004/12/21/science/21whal.html?_r=2&#34;&gt;纽约时报的报道&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;虽然 52 赫兹的实际年龄并无法知晓，但自 1992 年它被发现到现在，它已经活了 20 年。根据 &lt;a href=&#34;http://www.alaskadispatch.com/article/worlds-loneliest-whale-pays-visit-alaska&#34;&gt;Alaska Dispatch&lt;/a&gt; 的新闻，最近一次它出现是在阿留申与科迪亚克群岛不远处，这也是自它被跟踪以来离陆地最近的一次。你可以在&lt;a href=&#34;http://www.whoi.edu/oceanus/viewImage.do?id=10079&amp;amp;aid=4721&#34;&gt;这儿&lt;/a&gt;看到它从 1992 年到 2004 年间的迁徙路线。&lt;/p&gt;

&lt;p&gt;你也可以在 &lt;a href=&#34;http://www.pmel.noaa.gov/vents/acoustics/whales/sounds/sounds_52blue.html&#34;&gt;NOAA 网站&lt;/a&gt;听听看 52 赫兹的录音，甚至可以&lt;a href=&#34;http://www.pmel.noaa.gov/vents/acoustics/whales/sounds/sounds_52blue.html&#34;&gt;比较下 52 赫兹与其他须鲸的叫声的不同&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;鲸鱼爱好者们虽然哀切这世界上最孤独的鲸的悲伤故事，但他们也有理由看到希望，因为52 赫兹虽然孤独，但很健康。&lt;/p&gt;

&lt;p&gt;“这头鲸可以在那种恶劣环境下生存这么多年，可以说明它的身体非常健康。“西雅图国家海洋哺乳动物实验室的研究员 Kate Stafford 博士告诉纽约时报。&lt;/p&gt;

&lt;p&gt;对孤独心灵者来说，这鲸鱼的韧性可以看做是励志故事了。20 年来对着冷冷的北太平洋唱着只有回声的歌，它却不曾停过。&lt;/p&gt;

&lt;p&gt;一个著名的禅言道：&lt;a href=&#34;http://zh.wikipedia.org/wiki/白隠慧鶴&#34;&gt;一个巴掌拍出来的声音是怎样&lt;/a&gt;？&lt;/p&gt;

&lt;p&gt;也许就在 52 hz。&lt;/p&gt;

&lt;h2 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://zh.wikipedia.org/wiki/%E9%B2%B8%E6%AD%8C&#34;&gt;Wikipedia 上的鲸歌条目&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>那些自欺的谎话：“比起成功，失败让我学到更多”</title>
      <link>https://www.zfanw.com/blog/the-lies-we-tell-ourselves.html</link>
      <pubDate>Fri, 11 May 2012 05:52:40 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/the-lies-we-tell-ourselves.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：本篇译自 Joe Kraus 的&lt;a href=&#34;http://joekraus.com/the-lies-we-tell-ourselves&#34;&gt;博文&lt;/a&gt;，所有权及观点归原作者所有，本人仅做翻译。&lt;/p&gt;

&lt;p&gt;我所痴迷的许多东西里，有一个是那些我们告诉自己的小小谎话。它们经常以警句的形式出现，看起来很真实。更确切地说，它们包含细微的重要讯息，但它们却整个被认为是真实的。另外，由于它们如此普遍地存在，以至于我们都不愿多加考虑。但是，这些小小的谎话最终会对我们的行为或知觉产生极大的扭曲作用。&lt;/p&gt;

&lt;p&gt;这类谎话的一个例子是：「生命短暂」。我一直都听到这样说法。我也知道人们为什么这样说。他们说的意思其实是「将生活拓展到极致」。但我们不那样说，我们说「生命短暂」。&lt;/p&gt;

&lt;p&gt;应该说，生命其实并不短暂。大部分美国人的生命还相当长（谢天谢地）。在美国，男性寿命平均为 75，女性为 80。但是，当你照着字义意思理解消化「生命短暂」这一说法时，你会诱导自己做出一些有害（经常是经济上）的行为，你本该作长期准备，结果却因「生命短暂」将其当成短期的任务来完成。据传，爱因斯坦曾经说过，宇宙中威力最强大的就是复利息。我相信，我们对「生命短暂」这一说法的双重误解加上我们无能理解复利价值，会联着导致人们做出非常糟糕的投资决定。&lt;/p&gt;

&lt;p&gt;在企业界，我想我们告诉自己的最危险谎言是：「比起成功，失败让我学到更多」。这绝不是事实，我想谈谈为什么。&lt;/p&gt;

&lt;p&gt;我认为正确的说法应该是「比起成功，从失败中我发展出更多的个性」。但是，我坚信，迄今为止，我们从我们的成功中学到更多。&lt;/p&gt;

&lt;p&gt;先来看一组数据。在论文&lt;a href=&#34;http://www.hbs.edu/research/pdf/09-028.pdf&#34; title=&#34;pdf 文件&#34;&gt;企业家的业绩持续性&lt;/a&gt;中，哈佛大学的 Josh Lerner 与他的合作者表示，初次即有风险投资支持的企业家成功率大概是 18%。如果该企业家失败了后尝试另一家公司，他们成功率只增加到 20%。一点不多。但是，如果该企业家第一家公司就成功了，则他们第二个企业成功率增长到 30% &amp;#8211; 预期收入提高 65%。&lt;/p&gt;

&lt;p&gt;为什么会这样？在我看来，这与企业存活期间所探索的信息空间大小有关。让我们做个假设，一企业家，每天做 5 个决定（一些大的决定，许多小的，合作关系中所有类型的都有，产品特性，市场，招聘/解聘，如何分配每个人的时间）。在 3 年的时间过程中，就会生成一棵巨大的决策树，其中可能路径的数字非常庞大（假设一年 50 个星期，一个星期 5 天，则大约 5^750 独立路径）。5^750 是这个数字：&lt;/p&gt;

&lt;p style=&#34;word-wrap:break-word&#34;&gt;
  168850850305727091395186825713912447112441058150046927050324723890449107812858660398554055697372954299116776644433651870505231901712461662116793144847950712000881086630220426140201590160287572958546330981647561466586019225296753645395632352672757468805020446337326822341458269676821758973637253679519824654862828260183804589283422795141880659376822043675041721215149214186959669079228162626416267478638199550182946764747764607788135575613004500768632174606656508945368003981851086369760095440284430878818966448307037353515625
&lt;/p&gt;

&lt;p&gt;如果你失败，你所能知道的只是，在决策空间中你所选择的路径无效。但是，它真不能告诉你是否其他路径可能行得通。&lt;/p&gt;

&lt;p&gt;但如果你成功了，你就创造出一个成功模式；一个大信息空间里行动的指南，让你清楚下一次该往哪儿走。它帮助你直观地感受正确与错误。大体上，它给了你人们称为「直觉」的东西。另外，这也是为什么风险投资对过往的成功的关注多多于过往的失败的原因。&lt;/p&gt;

&lt;p&gt;对那些初入职场及打算加入初创公司的人，我的一个建议是，别去那些仅有 3、4 个人的初创公司。选择那些 30 &amp;#8211; 50 人的、在商业上有势头感的地方。我这样说的原因是因为我觉得，对人们来说参与到某种成功模式里是非常有用的。它会塑造你思考问题的方式，也因此使得你在去往下一家初创公司或是自己开始初创公司时变得更有价值。在你职业生涯中，应该发展的最重要东西是对成功的直觉感受。唯一的办法是，参与到成功中。&lt;/p&gt;

&lt;p&gt;所以，别告诉自己说你从失败中学到更多。我们都有从伤疤中得到个性，但我们从成功里学到更多。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>星球的脉动</title>
      <link>https://www.zfanw.com/blog/twitter-global-pluse-chinese.html</link>
      <pubDate>Thu, 30 Jun 2011 08:54:17 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/twitter-global-pluse-chinese.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 个人往来的信息&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 信息的传播&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    Twitter 官方博客上发了篇 &lt;a href=&#34;http://blog.twitter.com/2011/06/global-pulse.html&#34;&gt;Global pluse&lt;/a&gt;，演示日本大地震前后 Twitter 上信息的传播情况。
  &lt;/p&gt;
  
  &lt;p&gt;
    以下内容即译自该博客：
  &lt;/p&gt;
  
  &lt;p&gt;
    人们在经历大事件时，使用 Twitter 跟朋友、家人、全球各地的 followers 分享信息、想法。从一个地方发出的信息，通过Retweets、@replies 和 Direct Messages 在全球迅速传播。我们能够从每个这样的事件中看到类似行为，体育活动比如世界杯，大范围实时播放的新闻事件比如皇家婚礼，再如大灾难，比如日本 3 月 11 号的地震。在日本地震发生后，海啸随继爆发，每秒发送的 Tweets 数量有五次峰值超过 5000。下面的视频展示了这次事件中全球信息流动的样子。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;个人往来的信息&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    日本地震发生后，人们在 Twitter 上联系朋友、家人、爱人，然后我们看到，从日本发出的 Tweets，比平时增长了 500%。下面的视频展示了地震发生前后，进出日本的 @replies 的数目。粉色的表示回复给日本境内用户的信息，黄色表示从日本境内回复给其他地方的信息。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;信息的传播&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    下面的短片显示了世界范围内，地震前后一小时，日本发出的 Tweets 被 retweet (转发)的情况。发送者的原始推文以红色显示，他们的 followers 转发的 Tweets 用绿色显示。
  &lt;/p&gt;
  
  &lt;p&gt;
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>纽约市长 Bloomberg 关于移民制度改革的演讲</title>
      <link>https://www.zfanw.com/blog/mayer-bloomberg-immigration-reform.html</link>
      <pubDate>Sat, 18 Jun 2011 08:15:47 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/mayer-bloomberg-immigration-reform.html</guid>
      <description>&lt;p&gt;Michael R. Bloomberg 是纽约市第 108 任市长，最近他在华盛顿城做了个 &lt;strong&gt;移民制度改革&lt;/strong&gt; 的演讲，呼吁美国尽快进行移民制度改革。&lt;/p&gt;

&lt;p&gt;本文翻译未经授权，&lt;a href=&#34;http://www.mikebloomberg.com/news/mayor-bloomberg-calls-for-immediate-immigration-reform/&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;正文如下：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;谢谢你 Julia，大家下午好。来到一个棒球队成绩排在纽约 Mets 后的城市总是让人开心。&lt;/p&gt;

&lt;p&gt;不过我是真的很高兴，可以和你们一同探讨我们国家现在所面临的重要问题中的一个。每个人都同意，我们那陈腐的移民制度是个大问题，但没有谁，至少不是在华盛顿，可以就如何解决上达成一致。今天，我想谈谈，我们如何能够解决它，又如何能够做到让民主党和共和党都支持。&lt;/p&gt;

&lt;p&gt;这个城市让移民制度如此分裂开来，这是十分讽刺的，华盛顿城，有如此众多的部分都是由移民们建成的：街道是由 Pierre Charles L’Enfant、一个法国移民设计的；白宫则由 James Hoban 设计，他是爱尔兰移民；国会大厦是 William Thornton 设计的，大不列颠移民。&lt;/p&gt;

&lt;p&gt;这些建筑不仅仅只是我们民主的纪念碑，它们更是那些美国历史上数以百万计的移民为美国作出的贡献的纪念碑。但我们国家最为杰出的纪念碑、美国在世界范围内认识最为广泛的标志物，不是国会大厦的圆顶，不是白宫的柱子，也不是国家广场的纪念碑。&lt;/p&gt;

&lt;p&gt;是自由女神像。&lt;/p&gt;

&lt;p&gt;自 1886 年，125 年前的这个十月起，自由女神的火把给地球上最黑暗的角落带来了光明，指引那些渴望呼吸自由的人们来到美国海岸。但是，也不是自由女神的火把，或她的头冠，或她脚下那挣脱开的锁链激起如此的惊叹：这一切，是她的地理位置给予的。&lt;/p&gt;

&lt;p&gt;她的象征力量出于一个事实，她，就站在纽约城的入口，如同一个金色大门，通往了美利坚合众国，这个机遇之地。这个事实不仅仅是我们的历史，它也是我们的未来。&lt;/p&gt;

&lt;p&gt;没有移民的贡献，我们的国家不可能成为一个全球超级强国。他们建筑铁路、运河，打开通向美国西部的大路，他们发明创新产品，革新全球贸易，他们在科学、工程、医疗领域开拓先行，造就美国这个世界上最具创造性的国度。&lt;/p&gt;

&lt;p&gt;但是，毫无疑问的是，我们如果继续对这些想来到这片土地努力工作、开创事业、追寻美国梦的人们关上我们的大门，则我们将难再保持全球超级强国的身份。美国梦将不复存活，如果我们继续告诉这些追梦者你们去其他地方。&lt;/p&gt;

&lt;p&gt;这就是我所说的国家性自杀，这并不夸张。每一天，只要我们无法解决我们陈腐的移民法问题，这一天，我们就对我们的经济造成损害。今天，我们或许就拒绝了下一个阿尔伯特· 爱因斯坦或者谢尔盖·布林。明天，我们也许就拒绝了下一个列维·斯特劳斯或杨志远。&lt;/p&gt;

&lt;p&gt;而且，我们也当然地会拒绝掉那些一无所有而仅怀着一个希望，希望通过努力工作、再工作、不断工作来为他们自己，及他们的家庭创造一个美好生活的人们，他们就像我的祖辈，也如你们中的许多祖辈一样。&lt;/p&gt;

&lt;p&gt;今天早上，我们的 Partnership for a New American Economy 发表了一个报告，分析移民对美国经济的一个大部头 &amp;#8211; 财富五百强公司的影响。报告发现，超过 40% 的财富五百强公司是由移民或移民后代创建的。这些源于移民的公司在全球范围内雇佣超过 1000 万的员工，比美国 43 个州的人口还要多。而且，它们每年要带来 4.2 万亿美元的收入。&lt;/p&gt;

&lt;p&gt;把这个数字放到大背景下，则这些由移民或移民后代创建的美国公司的收入要比美国以外的世界上任何一个国家的 GNP 还多，除开两个国家，中国与日本。&lt;/p&gt;

&lt;p&gt;这还只是财富五百强公司。如果你整体去看经济，则移民及移民后代在 50 个州已经创造了数以百万的工作。原因很简单，移民们是梦想者、冒险者，他们被驱往成功，因为他们知道，在美国，努力工作以及他们的才能是可以得到其他地方所不会有的回报。&lt;/p&gt;

&lt;p&gt;没有一个城市曾像纽约那样，能那么清楚看见移民的经济能量。从历史上看，移民解释了为什么纽约城会变成美国的经济引擎。而在最近的历史，他们则是我们走出 70 年代及 80 年代面临的困难的主要原因之一。社区曾在 25 年前被抛弃了，而现在又开始繁荣，这要很大程度上感谢来自多米尼加共和国、厄瓜多尔、墨西哥、中国、俄罗斯、加纳、韩国、印度、巴勒斯坦、波兰、埃及以及其他地球上任何一个国家的移民。&lt;/p&gt;

&lt;p&gt;对于不景气地区的经济复兴，没有什么力量比涌入的移民更大了。不仅纽约是如此，对于美国各种小城镇大城市的经济复苏来说，移民的作用都是必要的。&lt;/p&gt;

&lt;p&gt;举爱荷华的 Perry 为例。十年前，它正面临着多年来人口下滑引发的经济停滞。但多亏了移民劳工与那些经商的移民企业家，这个城市的大街现在回复熙攘。缅因州的 Lewiston 的情况也一样，一个破败而古老的工业城因为来自非洲的移民而渐渐恢复活力。&lt;/p&gt;

&lt;p&gt;在亚特兰大，这个努力吸引受过良好教育的移民的城市，拉丁美洲裔与亚洲裔的购买力不断飙升。横过整个美国，则那些移民劳工增长最快的城市正经历着最高速的经济发展。在纽约，移民则正是我们抵御全国性衰退，情况比作为一个整体的全国要好的一大原因。&lt;/p&gt;

&lt;p&gt;对整个国家来说，移民制度改革将会是一个经济引擎，创造高薪工作，加速我们的经济回复。两个主要政党（译注：指民主党与共和党）与宾夕法尼亚大街的两个尽头（译注：指白宫与美国国会大厦）都称恢复经济增长是他们的首要任务。这也是必然的。&lt;/p&gt;

&lt;p&gt;然而今天，在我们国家步入数十年来最严重的衰退三年多后，联邦政府可以用于刺激就业增长的一个最为有力的方法 &amp;#8211; 改革我们那陈腐的移民制度 &amp;#8211; 却成了政治僵局的牺牲品。共和党倾向于控制边境，这可以理解。这对我们的国家安全很重要。民主党倾向于全面的改革，这也同样可以理解。&lt;/p&gt;

&lt;p&gt;可对 1100 万超期逗留或非法进入的人们来说，创造一个途径，使得他们的地位永久合法是非常重要的。但直到现在，不幸的是，两党却陷入僵局中。他们只是鸡同鸭讲。&lt;/p&gt;

&lt;p&gt;这给了我们两个可能：双方利用此僵局给对方制造问题为 2012 年的选举取得政治分，又或者他们协同起来，接受移民制度改革，刺激新公司产生，加强已有的公司，帮助 1390 万失业和寻求工作的美国人创造工作机会。&lt;/p&gt;

&lt;p&gt;随着 2012 年的大选进入准备阶段，全国的选民将会寻找一个有着可实现的而非仅鼓舞人心的经济计划的候选人。特别是独立选民，移民制度改革将是他们手里的一个重要考验，用于考验候选人是否将健全经济放在选举年的政治前面。&lt;/p&gt;

&lt;p&gt;独立选民将决定下一届选举的结果 &amp;#8211; 就如他们在 2010 与 2008 所做的那样。虽然他们在任何给定问题上不尽然持相同看法，但在领导的问题上，他们绝对都要求务实的，而非极端的。他们想要温和的解决办法，而非指向特殊利益的。他们希望两党在不一致的地方停止争斗，在一致的地方采取行动，而况其实一致的地方还不少。&lt;/p&gt;

&lt;p&gt;两个党派的领袖都认识到当前的移民制度对我们的经济来说是个拖累。所以奥巴马总统最近说增加移民进入美国的机会是他的首要任务，这听来实在鼓舞人心。同样鼓舞人心的是，众议院的共和党也提请一个为「美国就业创造者」的计划，计划包括为那些我们需要的劳动者提供更多签证。&lt;/p&gt;

&lt;p&gt;你将很难找到一个经济学家，会认为现状对我们的经济是好的。选民们也同样明白。最近的一项调查显示，三分之二的美国人，四分之三的商界领袖都认为移民在我们的经济中扮演一个重要角色。&lt;/p&gt;

&lt;p&gt;这也是为什么我与鲁伯特·默多克共同创建的 Partnership for a New American Economy 引起许多 CEO 注意的原因。而且我想告诉你们，recruiting new members is one of the easiest pitches I’ve ever made。（译注：不会译）&lt;/p&gt;

&lt;p&gt;在所有这些一致基础上，为什么华盛顿没能做出任何事？答案是：我们可以。而今天，我想概括五个重点部分，这些部分，在国会中，我相信两个政党也很大程度上认同，我们可以就这些迅速采取行动，而这也将对我们的经济产生深远的影响。&lt;/p&gt;

&lt;p&gt;首先，我们必须停止在科学与技术领域提供一流教育给外国学生然后强制他们离开的作法。学生们来自全球各地，到此学习，要知道，超过 40% 的我们的工程专业毕业生是在外国出生的。他们在科学前沿带动开创性的研究。但当永久签证很难或几乎不可能拿到时，他们就被迫离开了。结果他们就回家为那些与我们企业竞争的企业工作，而非呆在这儿为我们的经济做贡献。这毫无道理。&lt;/p&gt;

&lt;p&gt;我们在我们的一流大学投入数百万美元来培养这些学生，然后把经济红利免费让给我们的竞争者。两个政党需要也应该达成一个政策，使得任何在主要领域里具有高等学历的大学毕业生可以取得绿卡，这同时也是一个机会来帮助我们的经济增长。我们必须允许这些学生留下然后成为我们未来的一部分，否则我们将看着我们的未来与他们一同消失。&lt;/p&gt;

&lt;p&gt;第二，我们必须停止告诉外国的企业家到其他国家创建他们的公司的作法。美国是世界上最好的创业地。可我们不鼓励创新者来美国安家、繁荣我们的资产，而是拒绝移民企业家，即便他们背后有美国的投资者。&lt;/p&gt;

&lt;p&gt;移民帮助创建了 Google、Yahoo、eBay、Intel 及其他众多公司。事实上，10 年间移民帮助创建了四分之一的高科技公司。而在所有的工业里，他们是两倍可能于本土美国人去创建公司。我们需要更多这样活力十足的企业家。如果我们不对他们打开我们的大门，他们就会去其他地方。他们所创造的高薪工作也将随他们而去。&lt;/p&gt;

&lt;p&gt;一个背后有着美国投资者支持的外国企业家应该给予他们临时签证，让他们在美国开创公司。假如两到三年后，他们的事业创造了新的就业机会，则应该允许他们继续他们的事业，并给予他们永久的合法地位。我们是一个企业家的国度，因为我们是是移民者的国度，而在 21 世纪，全球经济将比以往更甚地绕着企业家转。&lt;/p&gt;

&lt;p&gt;第三，我们必须停止告诉美国公司他们不能雇佣他们所需要的高技能员工的作法。这样地让他们难以为高技能员工取得临时或永久的签证，不过是让联邦政府成长缓慢，更糟糕的是，促进美国工作的外包。&lt;/p&gt;

&lt;p&gt;没错，假如公司在这儿未能招到他们需要的员工，则他们就会将业务迁出美国。看看微软在温哥华建立一个研究园的决定就知道了。许多高科技公司也在那儿开办事处，为着一个原因：他们在美利坚合众国招不到他们需要的高技能员工。我们不仅仅丢掉了就业，我们也丢掉了他们的开支、税收。再说一次，这毫无道理。我们在经济处于危险时候却仍在我们自己背后捅进几刀。&lt;/p&gt;

&lt;p&gt;对在世界市场上竞争的美国公司来说，吸引并保留高技能劳动力的本领是必要的。高技术产业如此，银行如此，保险公司如此，医药公司如此，甚至那些有大型研发部门的制造工厂如波音、卡特彼勒都是如此。但现在，H1-B 与绿卡的数量上限过低，而且绿卡的上限是根据国家设定的。因此冰岛能够取得与印度一样的签证数。对任何一个国家来说，这可能是公平的，但对美国的企业来说却不公平。我们需要结束这些独断的限制，结束高技能 H1-B 签证的上限限制。让市场决定吧。这基本是个自由市场的经济学，两个政党都应该支持它。&lt;/p&gt;

&lt;p&gt;第四，我们必须保证主要产业，比如农业与旅游业，在他们仅靠美国工人无法充分开展工作时能够找到外国工人。这些雇主想要合法的劳动力，但我们的现行制度使之变得无比困难。农民们必须经过层层许可才能做到最基本的雇佣，而在乔治亚，他们打击不合法的农场雇工，结果农场主严重缺乏劳力。这增加他们的成本，有些还使得庄稼未能收割。然后当食物价格上升时，这是美国消费者与农民们最不愿看到的。&lt;/p&gt;

&lt;p&gt;第五，也是最后一个。我们必须开始按经济需要来分配更多的绿卡。现在，只有 15% 的绿卡在雇工及他们的家属手里，其余大部分都流向移民家庭及亲戚手里。在加拿大，这些数字是相反的。去年，三分之二的加拿大移民是基于经济原因，只有 21% 的是基于家庭原因。美国必须延续我们的传统，欢迎那些困苦与飘摇者。我们是一个机遇之地，因为我们一直是个富有怜悯心的国度。但既然我们仍旧是个避难及团聚之地，则我们必须对那些才智者、努力工作者更加地欢迎，他们将为我们的经济增长与繁荣作出重大的贡献。这意味着根据我们的经济需要提高绿卡的限制数目，也就允许那些可以最大地帮助我们国家的人家来这儿工作，投资，创业。&lt;/p&gt;

&lt;p&gt;我今天所概括的五个部分给两党展示了真正的机会，它们是现在就能实施的，用于帮助创造就业、驱动整个国家繁荣的方法：为大学毕业生提供更多的绿卡；为企业家提供更多的签证；为高技能工人提供更多的签证；为农业及其他季节性劳动力提供更多签证；基于我们的经济需要分配更多的签证。&lt;/p&gt;

&lt;p&gt;在接下来的几周里，国会可望考虑 Dream Act and e-Verify 法案。但无论是通过或不通过，时候已经到了，我们需要重新聚焦移民争论于国家现在所面临的最严峻的问题：创造就业。在这儿，华盛顿，我们的关于移民的讨论不应该只是讨论边界与指纹，而应该讨论，美国想成为怎样的一个国家。&lt;/p&gt;

&lt;p&gt;我们是否仍想继续作为一个所有人的机遇之地？世界上最强大的经济强国？一个有着最高薪工作及最优质生活的国家？又或者我们想把更多的工作机会送到海外然后看着其他国家与我们的经济力量竞争，最后把我们的孩子留在一个败落的国家里？&lt;/p&gt;

&lt;p&gt;美国一直在前进，因为我们一直欢迎更多的人们与我们一同前进。但现在，对我们未来的最大威胁在于对否定我们的过去。在纽约的港口，自由女神仍在前进，在这自由女神的第 125 个年头，我们也必须前进。&lt;/p&gt;

&lt;p&gt;我们必须尊重那些使得美国伟大的价值。我们必须拥抱 21 世纪经济的新现实。我们必须紧抓我们选举出来的官员，让他们给我们拿出结果，而非演讲；求同，而非取异；为促经济增长，而非取政治优势。&lt;/p&gt;

&lt;p&gt;或许，相比华盛顿今天所面对的其他大问题来说，对于两个党派，我们仍有机会在移民上取得突破。假如宾夕法尼亚街两头都抓住了问题 &amp;#8211; 这取决于我们是否推动他们 &amp;#8211; 我们就能帮助我们的经济再次前行，而我们国家、以及那些为之定义的梦想者的最美好时光仍会到来。谢谢大家。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>