<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on 陈三</title>
    <link>https://www.zfanw.com/blog/categories/ubuntu/</link>
    <description>Recent content in Ubuntu on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 13 Jun 2013 05:21:37 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/categories/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ubuntu 环境变量 EDITOR 设置</title>
      <link>https://www.zfanw.com/blog/ubuntu-environment-variable-editor.html</link>
      <pubDate>Thu, 13 Jun 2013 05:21:37 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/ubuntu-environment-variable-editor.html</guid>
      <description>

&lt;p&gt;Ranger 文件管理器中，按 &lt;kbd&gt;E&lt;/kbd&gt; 默认使用 nano 编辑当前文件。据它的文档说明，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;EDITOR&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Defines the editor to be used for the &amp;#8220;E&amp;#8221; key. Defaults to &amp;#8220;nano&amp;#8221;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;我不懂 nano，想换成 Vim，则要改环境变量 &lt;code&gt;EDITOR&lt;/code&gt; 的值。&lt;/p&gt;

&lt;p&gt;理所当然，我会把 &lt;code&gt;EDITOR&lt;/code&gt; 值设置为 gvim 路径：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export EDITOR=&amp;quot;usr/bin/gvim&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但这样在 Ranger 中按 &lt;kbd&gt;E&lt;/kbd&gt; 会报错：&lt;/p&gt;

&lt;p class=&#34;text-error&#34;&gt;
  /bin/sh: 1: usr/bin/gvim: not found
&lt;/p&gt;

&lt;p&gt;解决办法是，把 &lt;code&gt;EDITOR&lt;/code&gt; 直接设置为 &lt;code&gt;gvim&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export EDITOR=&amp;quot;gvim&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;printenv EDITOR&lt;/code&gt; 或 &lt;code&gt;echo $EDITOR&lt;/code&gt; 可以检查 &lt;code&gt;EDITOR&lt;/code&gt; 现在的值。&lt;/p&gt;

&lt;p&gt;因为我想把 &lt;code&gt;EDITOR&lt;/code&gt; 值固定下来，就把它写入 .bashrc 文件中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EDITOR=&amp;quot;gvim&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://help.ubuntu.com/community/EnvironmentVariables&#34;&gt;Ubuntu Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Firefox 收藏的秘密</title>
      <link>https://www.zfanw.com/blog/firefox-keyword-search.html</link>
      <pubDate>Wed, 20 Feb 2013 23:38:26 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/firefox-keyword-search.html</guid>
      <description>

&lt;p&gt;Firefox 下，收藏页面可以通过「书签」菜单，或直接按 &lt;kbd&gt;Ctrl-D&lt;/kbd&gt;，或点击地址栏右侧的&lt;strong&gt;星星&lt;/strong&gt;来收藏，前两种方法中，firefox 会弹出对话框，如下：&lt;/p&gt;

&lt;div id=&#34;attachment_8155&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-bookmark-webpage1.jpg&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-bookmark-webpage1-300x187.jpg&#34; alt=&#34;firefox 收藏网页对话框&#34; width=&#34;300&#34; height=&#34;187&#34; class=&#34;size-medium wp-image-8155&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-bookmark-webpage1-300x187.jpg 300w, https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-bookmark-webpage1.jpg 331w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    图1
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Tags 部分表示页面标签，可填可不填，填写的话，可以方便后期检索。&lt;/p&gt;

&lt;p&gt;除此之外，firefox 其实还有一种收藏页面的方式，不过与上面所述方法有所不同，如下：&lt;/p&gt;

&lt;div id=&#34;attachment_8022&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/Screenshot-from-2013-02-16-225505.png&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/Screenshot-from-2013-02-16-225505-300x124.png&#34; alt=&#34;firefox 收藏 关键字&#34; width=&#34;300&#34; height=&#34;124&#34; class=&#34;alignnone size-medium wp-image-8022&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/Screenshot-from-2013-02-16-225505-300x124.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2013/02/Screenshot-from-2013-02-16-225505.png 400w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    图2
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;图2中显示的这个对话框，是右击我的博客的搜索框后，选择弹出菜单中的 「Add a Keyword for this Search&amp;#8230;」 菜单项后出来的。可以看到，对话框的标题为 &amp;#8220;New Bookmark&amp;#8221;。&lt;/p&gt;

&lt;p&gt;在 &amp;#8220;Keyword&amp;#8221; 框中填入你要设置的&lt;strong&gt;关键字&lt;/strong&gt;，比如，zf。之后按 &lt;kbd&gt;Alt-D&lt;/kbd&gt; 或按 &lt;kbd&gt;Ctrl-L&lt;/kbd&gt; 或通过鼠标聚焦 &lt;a href=&#34;http://support.mozilla.org/en-US/kb/awesome-bar-find-your-bookmarks-history-and-tabs&#34;&gt;firefox 的导航栏&lt;/a&gt;，然后输入 「zf firefox」 就可以搜索博客中带有 「firefox」 关键词的文章，如图3：&lt;/p&gt;

&lt;div id=&#34;attachment_8031&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-awesome-bar-search1.jpg&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-awesome-bar-search1-300x134.jpg&#34; alt=&#34;firefox 导航栏自动补齐搜索&#34; width=&#34;300&#34; height=&#34;134&#34; class=&#34;alignnone size-medium wp-image-8031&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-awesome-bar-search1-300x134.jpg 300w, https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-awesome-bar-search1.jpg 313w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    图3
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;在上面，我强调说，这种方法是别一种&lt;strong&gt;收藏页面&lt;/strong&gt;的方法，因为我们可以从书签管理中找到第二种方法收藏的链接，如下所示，在侧边栏中打开书签管理并搜索：&lt;/p&gt;

&lt;div style=&#34;width: 285px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-bookmark-search.jpg&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2013/02/firefox-bookmark-search.jpg&#34; alt=&#34;firefox 书签管理&#34; width=&#34;275&#34; height=&#34;194&#34; class=&#34;alignnone size-full wp-image-8033&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    图4
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;你可以看到，当鼠标放到该链接上时，会浮动出一个 tooltip，显示 Name 与收藏的网址：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Search 陈三
http://www.zfanw.com/blog/?s=%s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这正是第二种方法收藏的页面路径。&lt;/p&gt;

&lt;p&gt;请注意 &lt;strong&gt;%s&lt;/strong&gt; 部分。这是 firefox 的 &lt;a href=&#34;http://kb.mozillazine.org/Using_keyword_searches&#34;&gt;Keyword search&lt;/a&gt; 背后实现。&lt;/p&gt;

&lt;p&gt;当我输入 zf firefox&amp;#8221; 时，firefox 其实自动将收藏的网址 &amp;#8220;&lt;a href=&#34;https://www.zfanw.com/blog/?s=%s&amp;amp;#8221&#34;&gt;https://www.zfanw.com/blog/?s=%s&amp;amp;#8221&lt;/a&gt;; 中的 「%s」 替换为 &amp;#8220;zf&amp;#8221; 这个关键字空格后的所有内容即 &amp;#8220;firefox&amp;#8221;，也就是说，访问的页面网址实际上变成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.zfanw.com/blog/?s=firefox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就清楚知道这个功能背后的原理。&lt;/p&gt;

&lt;p&gt;当右击搜索框添加关键字保存的页面实现不正常或无法添加关键字时，我们可以自己手动设置收藏地址。&lt;/p&gt;

&lt;p&gt;举 Google+ 为例，如果通过 「Add a Keyword for this Search&amp;#8230;」 方法来添加 「gp」 为关键字，保存的链接地址是 &amp;#8220;&lt;a href=&#34;https://plus.google.com/s/_/search/form?q=%s&amp;amp;#8221;，很不幸，这个搜索网址并不正确。&#34;&gt;https://plus.google.com/s/_/search/form?q=%s&amp;amp;#8221;，很不幸，这个搜索网址并不正确。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但我们可以试着输入一两个关键词看看其结构，仍试 &amp;#8220;firefox&amp;#8221;，其链接结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://plus.google.com/s/firefox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们就可以将先前收藏的链接地址修改为 &amp;#8220;&lt;a href=&#34;https://plus.google.com/s/%s&amp;amp;#8221;，之后在导航栏输入&#34;&gt;https://plus.google.com/s/%s&amp;amp;#8221;，之后在导航栏输入&lt;/a&gt; &amp;#8220;gp firefox&amp;#8221; 即可搜索 Google+ 里的 firefox 内容。&lt;/p&gt;

&lt;p&gt;通过这种办法，我们实际上可以给 firefox 添加无数的「搜索引擎」，而不仅仅默认的 Google、Bing，又或是通过扩展组件添加的搜索引擎。&lt;/p&gt;

&lt;p&gt;如果再配上 Vimperator，则简直行云流水了。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://plus.google.com/104787680206754797134/posts/LHrhpc9DS3V&#34;&gt;Google+ vimperator 中文社群&lt;/a&gt; 及其评论&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>z 之快速跳转</title>
      <link>https://www.zfanw.com/blog/z-jump.html</link>
      <pubDate>Sat, 26 Jan 2013 16:17:58 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/z-jump.html</guid>
      <description>&lt;p&gt;启动 Ubuntu 系统，打开 Terminal Emulator，输入 tmux，然后开始：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~
cd tmp/
ls
cd ci
......
cd /opt/lampp/htdocs
ls -la code
cd ~/tmp/ci
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可能看得一头雾水。&lt;/p&gt;

&lt;p&gt;老实说，我也不喜欢这样切换目录。&lt;/p&gt;

&lt;p&gt;上一个目录是？上上个又是？好像是主目录下，名称我倒是记得，具体路径记不太清楚。&lt;/p&gt;

&lt;p&gt;如果你经常使用命令窗口，并经常在其中切换目录，则大概知道，要访问一个文件或目录，你需要知道它的相对路径或绝对路径，以及它的名称，否则的话，你可能不断地需要使用 &lt;code&gt;ls&lt;/code&gt; 命令来查看目录，或频繁按 &lt;kbd&gt;Tab&lt;/kbd&gt; 键来补全。最后，脑子里有一堆路径。见人就敢说，我电脑上每一个文件的路径我都知道，你能吗？&lt;/p&gt;

&lt;p&gt;z 可以解决这个问题。&lt;/p&gt;

&lt;p&gt;我要访问名称中带有 &amp;#8220;ht&amp;#8221; 的目录，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;z ht
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你不需要知道这个名称中带有 &amp;#8220;ht&amp;#8221; 的目录具体是哪个路径，只要你曾经访问过它，z 就会帮你记录下来，并且根据你访问的频次来给出目录。&lt;/p&gt;

&lt;p&gt;它支持 Bash 与 ZSH，安装也非常简单，首先是&lt;a href=&#34;https://github.com/rupa/z&#34;&gt;下载 z.sh&lt;/a&gt; 文件，然后打开用户主目录下的 .bashrc 或 .zshrc 文件，在文件末加入以下一行命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;. /path/to/z.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如说，你下载的 z.sh 位置在 ~/bin/ 下，则上一行命令为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;. ~/bin/z.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后退出命令窗口，再打开命令窗口，然后开始用 &lt;code&gt;z&lt;/code&gt; 来代替 &lt;code&gt;cd&lt;/code&gt; 跳舞吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NPM 安装包</title>
      <link>https://www.zfanw.com/blog/npm-install-package.html</link>
      <pubDate>Wed, 26 Dec 2012 12:38:57 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/npm-install-package.html</guid>
      <description>

&lt;p&gt;打算安装个 &lt;a href=&#34;http://twitter.github.com/bower/&#34;&gt;Bower&lt;/a&gt; 用于一些库文件的管理，Nodejs、NPM 安装完后，运行命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令卡住很久，然后出错了,大抵是 『tunnel&amp;#8230;socket&amp;#8230;unknown protocol』 之类。&lt;/p&gt;

&lt;p&gt;网络是处于完全畅通状态。&lt;/p&gt;

&lt;p&gt;有人说是 proxy 的问题，我的系统下安装有 &lt;a href=&#34;http://www.privoxy.org/&#34;&gt;privoxy&lt;/a&gt;，启用了 http 与 https 代理为 『127.0.0.1：8118』。&lt;/p&gt;

&lt;p&gt;在 Zsh 下输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $http_proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示为 『&lt;a href=&#34;http://127.0.0.1:8118/』，调用&#34;&gt;http://127.0.0.1:8118/』，调用&lt;/a&gt; &lt;code&gt;unset $http_proxy&lt;/code&gt;，再安装 bower，仍然失败。可能因为这个环境变量不是通过 &lt;code&gt;export&lt;/code&gt; 命令设置的。&lt;/p&gt;

&lt;p&gt;且不说其成功与否，光是为了用 NPM 安装包文件就要取消这系统代理，不免不合理。&lt;/p&gt;

&lt;p&gt;再找资料，则知道可以通过 &lt;code&gt;npm config&lt;/code&gt; 命令来配置其环境：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm config set proxy http://127.0.0.1:8118
npm config set https-proxy http://127.0.0.1:8118
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后再运行 &lt;code&gt;npm install&lt;/code&gt; 就完全正常 &amp;#8211; 因为安装中使用 /usr/lib/ 目录，所以可能需要管理员权限，在 Ubuntu 下是运行 &lt;code&gt;sudo npm install...&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;安装完 bower 后，就可以安装 JavaScript 库：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bower install jquery
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://jjasonclark.com/how-to-setup-node-behind-web-proxy&#34;&gt;How to setup Node.js and Npm behind a corporate web proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://npmjs.org/doc/config.html&#34;&gt;Manage the npm configuration file&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Enlightenment 17 网络管理</title>
      <link>https://www.zfanw.com/blog/enlightenment-17-network.html</link>
      <pubDate>Mon, 24 Dec 2012 23:57:11 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/enlightenment-17-network.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://enlightenment.org/&#34;&gt;Enlightenment&lt;/a&gt; 新近推出 17，即 0.1.7 版本。&lt;/p&gt;

&lt;p&gt;对我来说，用哪个桌面环境区别不大，只要能让我自定义快捷键。所以很快我就从 Gnome 3.6 切换到 Enlightenment 17 版本。&lt;/p&gt;

&lt;p&gt;Enlightenment 有几个让我惊讶的用法，按它官方的说法，则也是有别于其他桌面环境的特色内容。&lt;/p&gt;

&lt;p&gt;比如当光标放在屏幕右侧时，这时调用 Enlightenment 的菜单，菜单里的子菜单会出现在屏幕外面 &amp;#8211; 这样我们就点击不到子菜单了。常见的软件处理方式是将子菜单自动往左侧展开，但 Enlightenment 不是，你只要将光标继续往右侧子菜单位置上移动时，父菜单会往左移动，然后子菜单从屏幕外退出来。这样的好处是，鼠标不需要再移到左侧去点击，需要移动的距离也短了。&lt;/p&gt;

&lt;p&gt;另外一个是关于虚拟桌面。当光标位于屏幕边缘时，默认情况下会切换到旁边一个虚拟桌面。比如，我把光标往右侧屏幕外移动，Enlightenment 会自动帮我切换到右侧一个虚拟桌面。我可以预见的是，这时的光标位置应该是在右侧的虚拟桌面的屏幕右侧，但恰恰相反，它是在左侧。你要做的是继续往右移。也就是说，这些虚拟桌面是连成一片的。&lt;/p&gt;

&lt;p&gt;以上两种用法算是对我惯常用法的一种颠覆。&lt;/p&gt;

&lt;p&gt;然后再来说网络管理。&lt;/p&gt;

&lt;p&gt;根据 &lt;a href=&#34;https://wiki.archlinux.org/index.php/E17#Configuring_the_Network&#34;&gt;Arch Linux 上的说明&lt;/a&gt;，则 E17 倾向于使用网络管理工具 ConnMan &amp;#8211; 虽然也可以使用 NetworkManager。&lt;/p&gt;

&lt;p&gt;但是，从 E17 加载的 Modules 来看，其中 Connection Manager 调用的是 EconnMan，于是为了在 E17 的 shelf 上使用网络管理功能，需要&lt;a href=&#34;http://blog.gustavobarbieri.com.br/2012/08/12/econnman-1-released/&#34;&gt;安装 EconnMan&lt;/a&gt;，否则 E17 的 Shelf 上会显示一个白色感叹号，点击它的设置时会显示错误 「This module wants to execute an external application EConnMan that does not exist.Please install EConnMan application.」 &amp;#8211; 而况据开发者的说明，它目前并没有管理 VPN 的功能。&lt;/p&gt;

&lt;p&gt;只好另找方法。&lt;/p&gt;

&lt;p&gt;E17 的 Modules 中有个 Systray，类似 Windows 平台下的系统托盘概念，可以用于显示输入法、网络连接等等。&lt;/p&gt;

&lt;p&gt;这里，通过命令行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nm-applet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以调用网络连接出来，让它显示在 systray 中。&lt;/p&gt;

&lt;p&gt;为了让 E17 每次启动都自动启用它，打开 E17 菜单：&lt;/p&gt;

&lt;p&gt;Settings -&amp;gt; Settings Panel -&amp;gt; Apps -&amp;gt; Startup Applications -&amp;gt; System -&amp;gt; Network&lt;/p&gt;

&lt;p&gt;然后重启系统，systray 里已经有网络管理，接下来我们就可以像 Gnome 或 Windows 7 里那样通过点击该图标进行网络连接的管理。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 软件安装</title>
      <link>https://www.zfanw.com/blog/install-software-on-ubuntu.html</link>
      <pubDate>Tue, 13 Nov 2012 09:50:02 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/install-software-on-ubuntu.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#Ubuntu&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; Ubuntu 软件源&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_Deb&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 下载的 Deb 安装包&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#PPA_8211_Personal_Package_Archives&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; PPA &amp;#8211; Personal Package Archives&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 编译源代码&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; 参考&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    刚开始接触 Ubuntu 时，对它的软件安装方面，我只觉一片混乱，也是在那时，我觉得 Windows 平台下软件安装的易用性其实非常不错 &amp;#8211; 多时就是一个可执行的 EXE 或 MSI 文件，双击然后一路点击下一步即可；又或者解压，就可以直接运行 &amp;#8211; 基本上，会用电脑的人都知道怎样在 Windows 上安装软件。但 Ubuntu 上有所不同，或者说，Linux 系统下的情况与 Windows 平台不太一样。
  &lt;/p&gt;
  
  &lt;p&gt;
    首先了解一个软件包（Package）的概念。软件包包含程序运行的所需文件。但同样是“包”，又可以分两种，一种是源文件包，一种是已经编译过的二进制包 &amp;#8211; 二进制文件计算机可以直接执行，比如 Windows 下的 exe 文件，或者 Ubuntu 下的 deb 包；而源文件不行，需要编译才行。那为什么 Linux 下软件包不全部以二进制可直接执行的形式提供？这是因为 Linux 系统种类繁多，所使用的二进制有所不同，需要分别打包才行，比如，x86 架构跟 AMD64 的需要分别提供，32 位系统与 64 位的也需要分别提供。
  &lt;/p&gt;
  
  &lt;p&gt;
    也就是说，Windows 下提供的软件安装文件基本都是已编译过的，而 Ubuntu 下就不一定。我暂时还没听说过有人在 Windows 平台下载源文件然后编译个一天一夜的，Linux 下却是听了好几次。
  &lt;/p&gt;
  
  &lt;p&gt;
    所以，Ubuntu 系统里安装软件的问题在于，&lt;strong&gt;编译&lt;/strong&gt;过的安装软件包怎么取得 &amp;#8211; 或者已有提供，或者自己编译。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;Ubuntu&#34;&gt;Ubuntu 软件源&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyUbuntu&#34; href=&#34;#Ubuntu&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Ubuntu 的软件源（software channels/repositories）上包含了许多可以直接下载、安装的软件包，它有四个频道：Main、Restricted、Universe 和 Multiverse，它们的目的有所不同，默认仅 Main 与 Restricted 频道上的软件可以下载安装，但可以设置启用其他两个频道。对普通用户的使用来说，区别并没那么大。
  &lt;/p&gt;
  
  &lt;p&gt;
    从这些软件源上下载软件安装的方法有多种：
  &lt;/p&gt;
  
  &lt;h3&gt;
    APT 命令行
  &lt;/h3&gt;
  
  &lt;p&gt;
    APT 是 Advanced Packaging Tool 的缩写，用于管理软件包。
  &lt;/p&gt;
  
  &lt;p&gt;
    通过它的命令行工具来安装软件非常简单。首先打开 shell，
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo apt-get install &amp;lt;package_name&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    &lt;package_name&gt; 是软件在源里的名称，如果无法确定，可以通过下列命令来查询：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;apt-cache search &amp;lt;keyword&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    譬如说要在 Ubuntu 下安装 dropbox，可以通过上述命令确定 dropbox 的名称，如下图：
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/11/apt-cache-search-dropbox.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/11/apt-cache-search-dropbox.png&#34; alt=&#34;搜索软件源中的 dropbox 关键词&#34; title=&#34;apt-cache-search-dropbox&#34; width=&#34;471&#34; height=&#34;108&#34; class=&#34;alignnone size-full wp-image-6740&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/11/apt-cache-search-dropbox.png 471w, https://www.zfanw.com/blog/wp-content/uploads/2012/11/apt-cache-search-dropbox-300x68.png 300w&#34; sizes=&#34;(max-width: 471px) 100vw, 471px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    如果不喜欢命令行，Ubuntu 也还有其他可视化的图形操作界面用于安装软件。
  &lt;/p&gt;
  
  &lt;h3&gt;
    Aptitude
  &lt;/h3&gt;
  
  &lt;p&gt;
    Aptitude 是 APT 的前端界面，通过它可以操控真正的 APT 命令。它支持键盘操作 &amp;#8211; 如果熟悉 Vim，就会发现大部分快捷键均可用，它也部分支持鼠标操作。
  &lt;/p&gt;
  
  &lt;p&gt;
    个人平时极少使用这个工具，更倾向于用命令行 apt-get 或者下面要介绍的几个方法。
  &lt;/p&gt;
  
  &lt;p&gt;
    不过这个软件有个彩蛋，如下图，蛮好玩的：
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/c/c6/Aptitude_moo.png&#34; alt=&#34;aptitude&#34; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    注：图片来自 &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Aptitude_moo.png&#34;&gt;Wikipedia&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;h3&gt;
    软件中心
  &lt;/h3&gt;
  
  &lt;p&gt;
    Ubuntu 软件中心对新手来说，是非常简单明了的软件管理工具。
  &lt;/p&gt;
  
  &lt;p&gt;
    打开软件中心，搜索软件，安装软件，就这么简单。
  &lt;/p&gt;
  
  &lt;h3&gt;
    新立得
  &lt;/h3&gt;
  
  &lt;p&gt;
    英文名叫 ”Synaptic“，就我所了解，Ubuntu 12.04 之后的版本中默认并不安装新立得软件包管理器，需要用户自己安装：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo apt-get install synaptic
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    之后打开新立得搜索软件安装即可。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_Deb&#34;&gt;下载的 Deb 安装包&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_Deb&#34; href=&#34;#_Deb&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    某些软件有提供编译过的安装包文件下载，Ubuntu 下这种安装包文件的格式是 .deb。
  &lt;/p&gt;
  
  &lt;p&gt;
    安装 .deb 包的方法如下：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;
        通过 GDebi 工具，可以直接在命令行中运行，也可以通过图形界面 GDebi-gtk，如下图。
      &lt;/p&gt;
      
      &lt;p&gt;
        &lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/11/gdebi.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/11/gdebi.png&#34; alt=&#34;gdebi 安装 .deb 文件&#34; title=&#34;gdebi&#34; width=&#34;540&#34; class=&#34;alignnone size-full wp-image-6751&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/11/gdebi.png 540w, https://www.zfanw.com/blog/wp-content/uploads/2012/11/gdebi-300x175.png 300w&#34; sizes=&#34;(max-width: 540px) 100vw, 540px&#34; /&gt;&lt;/a&gt;
      &lt;/p&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      dpkg 安装 &amp;#8211; 首先定位到 deb 安装文件目录下，然后运行命令 &lt;code&gt;sudo dpkg -i package_name.deb&lt;/code&gt;。
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;PPA_8211_Personal_Package_Archives&#34;&gt;PPA &amp;#8211; Personal Package Archives&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyPPA_8211_Personal_Package_Archives&#34; href=&#34;#PPA_8211_Personal_Package_Archives&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    因为安全或不稳定或其他种种因素，Ubuntu 软件源中不可能收录所有软件，于是有了 PPA，它的作用类似于 Ubuntu 官方的源，只不过是由个人提供打包，当然也会有某些官方源中的软件通过 PPA 发布不稳定版本等。
  &lt;/p&gt;
  
  &lt;p&gt;
    PPA 的使用也非常简单，首先添加 PPA 源到 Ubuntu：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:user/ppa-name
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后更新所有源：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    接着是安装 &amp;#8211; 因为将 PPA 源添加到 Ubuntu 后，安装软件的方法与从官方源中安装并没有两样，所以，第一步中介绍的方法均可以使用：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo apt-get install &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;编译源代码&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    源代码包中一般均带有 INSTALL 或 README 之类的安装说明文件，根据说明安装即可。
  &lt;/p&gt;
  
  &lt;p&gt;
    不过这种方法是我最不愿意碰的，因为往往会为编译一个软件事先折腾一大堆东西 &amp;#8211; 而我可能根本不想了解这些，只是想装好这个软件使用它而已。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;参考&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://help.ubuntu.com/community/Repositories&#34;&gt;Ubuntu 的软件源&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://help.ubuntu.com/community/InstallingSoftware&#34;&gt;Ubuntu 软件安装方法&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://help.ubuntu.com/community/AptGet/Howto?action=show&amp;redirect=AptGetHowto&#34;&gt;APT 管理软件包&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://en.wikipedia.org/wiki/Aptitude_(software)&#34;&gt;Aptitude&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://help.ubuntu.com/community/UbuntuSoftwareCenter?action=show&amp;redirect=SoftwareCenterFAQ&#34;&gt;软件中心&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://help.launchpad.net/Packaging/PPA&#34;&gt;PPA&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://help.launchpad.net/Packaging/PPA/InstallingSoftware&#34;&gt;从 PPA 安装软件&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mosh 安装使用</title>
      <link>https://www.zfanw.com/blog/mosh.html</link>
      <pubDate>Fri, 02 Nov 2012 13:50:15 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/mosh.html</guid>
      <description>&lt;p&gt;如果用过 ssh 连接远程电脑，就会发现，无论是哪个系统，Ubuntu，或者 Windows，输入都会有很大的延迟。你输入了好多文字，它却要缓上好一会儿才显示得出来。&lt;/p&gt;

&lt;p&gt;这是折腾 &lt;a href=&#34;http://mosh.mit.edu/&#34;&gt;Mosh&lt;/a&gt;(Mobile shell) 的初衷。&lt;/p&gt;

&lt;p&gt;首先，要使用 Mosh，需要在客户端及服务器端都安装它，或者在服务器端至少安装 mosh-server。Ubuntu 下可以通过 ppa 安装的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python-software-properties
$ sudo add-apt-repository ppa:keithw/mosh
$ sudo apt-get update
$ sudo apt-get install mosh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为 Mosh 使用的是 UDP 端口，所以服务器上需要打开某 UDP 端口。&lt;/p&gt;

&lt;p&gt;假设 Mosh 使用 60001 UDP 端口，则在服务器上运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo iptables -I INPUT -p udp --dport 60001 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就在服务器上打开 60001 UDP 端口。当然，最好是把上一条命令写入服务器 firewall 的规则中，这样不必要每次都手动打开这个端口。&lt;/p&gt;

&lt;p&gt;接下来就是从客户端连接：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mosh -p 60001 sam@zfanw.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;p&lt;/code&gt; 参数用于指定 UDP 端口。&lt;/p&gt;

&lt;p&gt;假如你的 &lt;a href=&#34;http://www.zfanw.com/blog/ssh-usage.html&#34;&gt;SSH 连接&lt;/a&gt; 设置公钥/私钥连接，比如 &lt;code&gt;ssh zfanw&lt;/code&gt; 即可直接连接服务器而无需输入密码，则 mosh 命令也可以以 &lt;code&gt;mosh zfanw&lt;/code&gt; 的形式连接，基本上，可以把它当作 ssh 命令的替换，只不过 ssh 开的是 TCP 口，mosh 开的是 UDP 口。&lt;/p&gt;

&lt;p&gt;效果如何？开两个窗口，一个直接 ssh 登录，一个通过 mosh 登录，对比输入一下就知道了 &amp;#8211; 当然是 mosh 的输入流畅。&lt;/p&gt;

&lt;p&gt;Mosh 有很多强于 ssh 的特性，比如连接不会掉，你可以盖上笔记本电脑让它休眠，然后再打开，mosh 的连接还在，而如果是 ssh 的话，直接就断掉。&lt;/p&gt;

&lt;p&gt;不过折腾过程中真是碰上不少问题，比如 locale 问题，后来莫名地就折腾好了 &amp;#8211; 本来还想写一篇关于 Locale 的内容，现在省了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linode FQDN 设置</title>
      <link>https://www.zfanw.com/blog/linode-fqdn-hostname.html</link>
      <pubDate>Thu, 01 Nov 2012 13:41:51 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/linode-fqdn-hostname.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Fully_qualified_domain_name&#34;&gt;FQDN&lt;/a&gt; 全称叫 Fully qualified domain name，举个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;www.zfanw.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 www 是主机名即英文的 &lt;a href=&#34;http://library.linode.com/getting-started#sph_setting-the-hostname&#34;&gt;hostname&lt;/a&gt;，表示域名指向的是 World-Wide Web 服务器，简单地说，可以把它理解成计算机的名称。比如我 Ubuntu 的计算机名称叫 Sam，登录的用户名为 sam，则打开 terminal emulator，命令行上能看到 &lt;code&gt;sam@Sam&lt;/code&gt;，表示 Sam 计算机上的 sam 用户目前正在使用中。如果是 Windows 系统，则可以通过系统属性查看“完整的计算机名”，如果你有打开过 Windows 网上邻居，经常能看到各种五花八门的计算机名，这些就是所谓的 hostname。&lt;/p&gt;

&lt;p&gt;zfanw 是二级域名(&lt;a href=&#34;http://en.wikipedia.org/wiki/Second-level_domain&#34;&gt;Second-Level domain&lt;/a&gt;)，.com 是顶级域名(&lt;a href=&#34;http://en.wikipedia.org/wiki/Top-level_domain&#34;&gt;Top-Level domain&lt;/a&gt;)，类似的顶级域名还有 .org、.net 等。&lt;/p&gt;

&lt;p&gt;至于平时常见的 http，它是个互联网协议，类似的还有 ftp 等，这个与 FQDN 倒是无关。&lt;/p&gt;

&lt;p&gt;在 Linode VPS 文档中，有一节写的是&lt;a href=&#34;http://library.linode.com/getting-started#sph_setting-the-hostname&#34;&gt;设置 hostname&lt;/a&gt;。因为这个设置与后期安装 Apache 有关，所以有此一篇说明。&lt;/p&gt;

&lt;p&gt;Linode 的这节文档中给出的设置 /etc/hosts 文件的参考例子是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1        localhost.localdomain    localhost
12.34.56.78      plato.example.com        plato
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 plato 是主机名，plato.example.com 正是所谓的 FQDN，这需要你先通过 DNS 设置绑定一个子域名到你的 Linode 服务器 ip 上。&lt;/p&gt;

&lt;p&gt;比如我可以到我的域名商 DNS 面板做一个 A 记录，解析 plato.zfanw.com 到 xxx.xxx.xxx.xx 这个 ip 地址，即 Linode 服务器的 ip 上。&lt;/p&gt;

&lt;p&gt;然后到 /etc/hosts 文件中增加如下一行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xxx.xxx.xxx.xxx plato.zfanw.com plato
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考例子中，localhost 应该是个特殊的主机名，如果你是第一次通过 ssh 登录到 Linode 服务器，可以看到 shell prompt 显示的是 &lt;code&gt;root@localhost&lt;/code&gt;，按我粗浅的理解，localdomain 应该也是个特殊域名。不过这两个我们可以不用管，默认即可。&lt;/p&gt;

&lt;p&gt;保存 /etc/hosts 文件后 logout 出服务器，再登录可以看到，shell prompt 已经变成 root@plato 而非 root@localhost。&lt;/p&gt;

&lt;p&gt;使用命令 &lt;code&gt;hostname --fqdn&lt;/code&gt; 显示的结果是 &amp;#8220;plato.zfanw.com&amp;#8221;。&lt;/p&gt;

&lt;p&gt;这样，就完成了 Linode FQDN 的设置。如果光设置 hostname 且更新 /etc/hosts 内容而不曾解析二级域名，后期在安装完 Apache 后重启会出现如下错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;apache2: apr_sockaddr_info_get() failed for plato&lt;/p&gt;

&lt;p&gt;apache2: Could not reliably determine the server&amp;#8217;s fully qualified domain name, using 127.0.0.1 for ServerName&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对的，我折腾这一篇纯是因为这个错误，不然我实在懒得再开 DNS 解析一个二级域名。因为 Linode 明明已经有个 FQDN，&lt;a href=&#34;http://forum.linode.com/viewtopic.php?f=19&amp;amp;t=8378&#34;&gt;lixxx-y.members.linode.com 这样的格式&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;最后附一个我的 &lt;a href=&#34;https://www.linode.com/?r=c1160d4e51485f11b9ae6b4cf286ebf455f87613&#34;&gt;Linode Referal URL&lt;/a&gt;，作用是如果你通过这个 URL 购买了 Linode 服务器并且使用达 3 个月以上，我就可以收到 Linode 返还的 $20 美金，相当于 Linode 512 套餐一个月的价格，如果吃快餐的话，可以吃上 10 顿左右，下馆子大概一次搞定 &amp;#8211; 当然，如果你在厦门，我不介意一起下馆子，反正，花的是 Linode 的钱。&lt;/del&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH 使用方法</title>
      <link>https://www.zfanw.com/blog/ssh-usage.html</link>
      <pubDate>Tue, 23 Oct 2012 04:41:02 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/ssh-usage.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 服务器上生成公钥/私钥&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 本地电脑生成公/私钥&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 参考&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    前些日子，花钱买了个 SSH，想着总有机会用到，但来来去去，却实在找不到用处，后来都差点忘了这回事。
  &lt;/p&gt;
  
  &lt;p&gt;
    很多空间服务器商在卖空间的同时，其实都配有一个 ssh 账号，用于建立安全通道，保证访问空间数据的安全性。
  &lt;/p&gt;
  
  &lt;p&gt;
    比如我的博客，可以通过以下命令连接到服务器：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ ssh zfanwcom@zfanw.com
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    zfanwcom 指用户名，zfanw.com 指 ssh 服务器地址。随后会要求输入登录密码。
  &lt;/p&gt;
  
  &lt;p&gt;
    登录到服务器上后，可以使用 &lt;code&gt;ls&lt;/code&gt; 命令查看默认目录下的内容，这些内容与用 ftp 连接看到的内容一样，只不过数据的传输说是要比 ftp 安连接全。而如果使用命令 &lt;code&gt;pwd&lt;/code&gt; 查看当前目录，则显示的是 /home/zfanwcom，即用户主目录。
  &lt;/p&gt;
  
  &lt;p&gt;
    输入密码的方式有几个不好之处，一是如果密码太复杂太长，命令行里不便输入，另外安全性也差，因为只是个密码。因此 ssh 还有其他方式登录，比如公钥/私钥。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;服务器上生成公钥/私钥&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    我们先在服务器上生成一对公钥/私钥，然后将私钥下载到本地电脑，假设名称为 id_rsa，保存到 ~/.ssh/ 目录下，
  &lt;/p&gt;
  
  &lt;p&gt;
    注意，需要更改该私钥的读写权限为 &lt;code&gt;rw-------&lt;/code&gt;，如果权限设置不正确，ssh 会拒绝使用。
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ chmod 600 id_rsa
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    接下来可以通过如下命令来访问服务器：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ ssh -i $HOME/.ssh/id_rsa server
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这样我们就不需要输入密码。但这样还是需要输入服务器地址，所以还有一个更简便的方法，就是配置 ssh config 文件。
  &lt;/p&gt;
  
  &lt;p&gt;
    打开 ~/.ssh/config 文件(如果没有请创建一个)，写入以下内容
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;Host zfanw
    HostName zfanw.com
    Port    22
    User    zfanwcom
    IdentityFile    ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    保存后，在命令行输入 &lt;code&gt;ssh zfanw&lt;/code&gt; 即可以不输入密码访问空间服务器，但可能还需要输入一个 passphrase，这是用于加密私钥用的，如果偷懒，可以设置得简单一点，又或者不设置。
  &lt;/p&gt;
  
  &lt;p&gt;
    以上是在空间服务器上生成一对公钥/私钥的，显然，我们的私钥也在上面 &amp;#8211; 出于安全考虑，我想应该把它删除。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;本地电脑生成公/私钥&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    如果在本机生成一对公钥/私钥，则可以使用 ssh-keygen 命令：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ mkdir -p $HOME/.ssh
$ chmod 0700 $HOME/.ssh
$ ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    根据提示操作，这样就在 ~/.ssh/ 目录下会生成一个私钥 id_rsa，一个公钥 id_rsa.pub，接着用 ssh-copy-id 命令将公钥拷贝到 ssh 服务器上，这个方法能省去很多拷贝、设置权限的操作：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ ssh-copy-id -i ~/.ssh/id_rsa.pub zfanwcom@zfanw.com
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后输入密码，就将公钥加入到 ssh 服务器上的 ~/.ssh/authorized_keys 文件里。
  &lt;/p&gt;
  
  &lt;p&gt;
    接下来通过配置 .ssh/config 文件来更简便地连接 ssh 服务器。
  &lt;/p&gt;
  
  &lt;p&gt;
    据我理解，一对公钥/私钥应该可以通用，也可以分别针对不同服务器生成各自的公钥/私钥，比如为 github 服务器生成 github_id_rsa/github_id_rsa.pub，zfanw 服务器则使用 zfanw_id_rsa/zfanw_id_rsa.pub，这是鸡蛋放不同的篮子。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;参考&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://en.wikipedia.org/wiki/Ssh-keygen&#34;&gt;Wikipedia 上的 ssh-keygen 词条&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://nerderati.com/2011/03/simplify-your-life-with-an-ssh-config-file/&#34;&gt;Simplify Your Life With an SSH Config File&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://help.github.com/articles/generating-ssh-keys&#34;&gt;Generating SSH Keys &amp;#8211; github&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu  OpenVPN 设置</title>
      <link>https://www.zfanw.com/blog/ubuntu-openvpn.html</link>
      <pubDate>Thu, 18 Oct 2012 06:35:15 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/ubuntu-openvpn.html</guid>
      <description>&lt;p&gt;Ubuntu 下的 OpenVPN 设置与 &lt;a href=&#34;http://www.zfanw.com/blog/android-openvpn-setting.html&#34;&gt;Android OpenVPN 设置&lt;/a&gt;很相近。&lt;/p&gt;

&lt;p&gt;首先是在 Ubuntu 系统安装 OpenVPN:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install openvpn network-manager-openvpn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着打开网络设置，Gnome 下叫 network connections，如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/ubuntu-openvpn-set.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/ubuntu-openvpn-set.png&#34; alt=&#34;ubuntu vpn 设置&#34; title=&#34;ubuntu vpn 设置&#34; width=&#34;507&#34; class=&#34;alignnone size-full wp-image-6294&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/ubuntu-openvpn-set.png 507w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/ubuntu-openvpn-set-300x191.png 300w&#34; sizes=&#34;(max-width: 507px) 100vw, 507px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;选择 &amp;#8220;VPN&amp;#8221; 标签 -&amp;gt; Add&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/ubuntu-choose-openvpn.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/ubuntu-choose-openvpn.png&#34; alt=&#34;ubuntu 选择 vpn 连接类型&#34; title=&#34;ubuntu 选择 vpn 连接类型&#34; width=&#34;565&#34; class=&#34;alignnone size-full wp-image-6293&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/ubuntu-choose-openvpn.png 565w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/ubuntu-choose-openvpn-300x146.png 300w&#34; sizes=&#34;(max-width: 565px) 100vw, 565px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;列表项中选择 OpenVPN，&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/openvpn-setting.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/openvpn-setting.png&#34; alt=&#34;openvpn 具体设置&#34; title=&#34;openvpn-setting&#34; width=&#34;727&#34; class=&#34;alignnone size-full wp-image-6292&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/openvpn-setting.png 727w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/openvpn-setting-300x242.png 300w&#34; sizes=&#34;(max-width: 727px) 100vw, 727px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;填入需要的信息，Authentication 选择 password，CA 文件选择从 VPN 服务器下载的 crt 文件，接着点击 Advanced 进入高级设置：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/openvpn-advance-set.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/openvpn-advance-set.png&#34; alt=&#34;openvpn 高级设置&#34; title=&#34;openvpn-advance-set&#34; width=&#34;570&#34; class=&#34;alignnone size-full wp-image-6291&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/openvpn-advance-set.png 570w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/openvpn-advance-set-300x88.png 300w&#34; sizes=&#34;(max-width: 570px) 100vw, 570px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;将 General 标签页如上图所示的两个选项勾起来，第一个填入相应的端口。&lt;/p&gt;

&lt;p&gt;然后保存。接下来连接这个 OpenVPN 就可以。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 字体设置与 infinality</title>
      <link>https://www.zfanw.com/blog/ubuntu-font-render-with-infinality.html</link>
      <pubDate>Thu, 11 Oct 2012 05:36:31 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/ubuntu-font-render-with-infinality.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_fontconfig-infinality&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 安装 fontconfig-infinality 配置文件&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_freetype&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 给 freetype 源文件打补丁&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 其他设置内容&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 效果图&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; 鸣谢&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    &lt;strong&gt;说明 2013.11.28&lt;/strong&gt;：本文写于2012年，内容与最新的 infinality 可能不一样，如有出入，请以官网说明为准。
  &lt;/p&gt;
  
  &lt;p&gt;
    我眼神不大好。见着别人说操作系统的字体可以渲染得怎样清晰和好看，但身边没有样例，就只好发挥自己的想象力。可惜实在想不出来，就找相关图片看了下，确实要比 Ubuntu 默认下的清晰、好看。
  &lt;/p&gt;
  
  &lt;p&gt;
    于是想尝试一下，就找来 infinality &amp;#8211; 这是因为在推上见&lt;a href=&#34;https://twitter.com/doublechou&#34;&gt;玛丽苏&lt;/a&gt;提过。结果先是不小心把 /etc/fonts/conf.d 文件夹给删了，当时还没想着处理，只一味担心重启系统后会出问题，结果发现，Ubuntu 竟然还能启动，还能打出中文，只是字体变了样子，与原来见的不一样，如下：
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-09-233813.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-09-233813.png&#34; alt=&#34;删除 /etc/fonts/conf.d 后的字体&#34; title=&#34;Screenshot from 2012-10-09 23:38:13&#34; width=&#34;617&#34;  class=&#34;alignnone size-full wp-image-6154&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-09-233813.png 617w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-09-233813-300x70.png 300w&#34; sizes=&#34;(max-width: 617px) 100vw, 617px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    接着找了些资料，心里约摸觉得把 fontconfig-config 包重装一下就好：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ sudo apt-get --reinstall install fontconfig-config
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    切换到 etc/fonts/ 目录下，果然出来 conf.d 文件夹，重启系统，字体如下图：
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-09-234606.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-09-234606.png&#34; alt=&#34;ubuntu字体设置&#34; title=&#34;Screenshot from 2012-10-09 23:46:06&#34; width=&#34;542&#34;  class=&#34;alignnone size-full wp-image-6155&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-09-234606.png 542w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-09-234606-300x153.png 300w&#34; sizes=&#34;(max-width: 542px) 100vw, 542px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    你可能要问：有区别吗？抱歉，这真是难到我了。
  &lt;/p&gt;
  
  &lt;p&gt;
    在我来看，这两张 GVIM 截图并没什么区别，大概是 GVIM 渲染方法不同，又或者我选择的字型的问题。不过在网页里，前后的区别倒一眼就能看出。不过不曾截图。
  &lt;/p&gt;
  
  &lt;p&gt;
    以下进入正题，&lt;strong&gt;Ubuntu&lt;/strong&gt; 下如何使用 &lt;strong&gt;infinality&lt;/strong&gt; 美化字体。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_fontconfig-infinality&#34;&gt;安装 fontconfig-infinality 配置文件&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_fontconfig-infinality&#34; href=&#34;#_fontconfig-infinality&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    首先，到 infinality 网站下载两个压缩包：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.infinality.net/fedora/linux/zips/freetype-infinality-2.4.10-20120616_01-x86_64.tar.bz2&#34;&gt;freetype-infinality-2.4.10-20120616_01-x86_64.tar.bz2&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.infinality.net/fedora/linux/zips/fontconfig-infinality-1-20120615_1.tar.bz2&#34;&gt;fontconfig-infinality-1-20120615_1.tar.bz2&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    譬如都下载到 ~/Downloads 目录下，将 fontconfig-infinality 压缩包解压到 /etc/fonts/ 目录下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ cd ~/Downloads
$ tar -jfxv fontconfig-infinality-1-20120615_1.tar.bz2 -C /etc/fonts/
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这样，/etc/fonts/ 目录下会出现一个子目录 infinality。
  &lt;/p&gt;
  
  &lt;p&gt;
    根据 infinality 目录下 README 的说明，需要为 /etc/fonts/conf.d/ 下的 52-infinality-conf 创建一个软链接(symlink)指向 /etc/fonts/infinality/ 下的 infinality.conf：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ cd /etc/fonts/conf.d/
$ sudo ln -sf ../infinality/infinality.conf 52-infinality-conf
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    接着是调整 /etc/fonts/infinality/infinality.conf 文件配置，这是一个 XML 文件，可以手动修改，也可以通过运行 infinality 目录下的 infctl.sh 来设置：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ cd /etc/fonts/infinality
$ sudo ./infctl.sh setstyle
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这时会弹出 8 个预设值供你选择: 1) debug 2) infinality 3) linux 4) osx 5) osx2 6) win7 7) win98 8) winxp
  &lt;/p&gt;
  
  &lt;p&gt;
    比如我选择 2，然后按 Enter 确认，会出现一个结果信息：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;conf.d -&amp;gt; styles.conf.avail/infinality
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这是修改了一个软链接指向。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_freetype&#34;&gt;给 freetype 源文件打补丁&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_freetype&#34; href=&#34;#_freetype&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    从 &lt;a href=&#34;http://download.savannah.gnu.org/releases/freetype/&#34;&gt;freetype 网站&lt;/a&gt; 下载 freetype 2.4.10 最新版，假设压缩包名称为 freetype-2.4.10.tar.gz，下载到 ~/Downloads 目录下。将其解压到 ~ 目录下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ cd 
$ tar -xvzf ~/Downloads/freetype-2.4.10.tar.gz -C .
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    解压出来的新目录名为 freetype-2.4.10。
  &lt;/p&gt;
  
  &lt;p&gt;
    接着解压 freetype-infinality-2.4.10-20120616_01-x86_64.tar.bz2 压缩包到 ~/bin/ 目录下，当然，要解压到其他地方也无所谓，如果目录不存在，请先建立一个：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ cd ~
$ mkdir bin
$ cd bin
$ tar -xvjf ~/Downloads/freetype-infinality-2.4.10-20120616_01-x86_64.tar.bz2 -C .
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    现在文件都已经备齐，接下来就是开始打补丁：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ cd ~/freetype-2.4.10
$ patch -p1 &amp;lt; ~/bin/freetype-add-subpixel-hinting-infinality-20120616-01.patch 
$ patch -p1 &amp;lt; ~/bin/freetype-enable-subpixel-hinting-infinality-20120615-01.patch 
$ patch -p1 &amp;lt; ~/bin/freetype-entire-infinality-patchset-20120615-01.patch 
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这样，就给 freetype 源文件打好 finality 的补丁。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;其他设置内容&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    接下来，还要进行一些设置，仍是在 freetype-2.4.10 目录下操作：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ ./configure
$ make
$ sudo mkdir /usr/lib/freetype-infinality/        # 如果跑 64 位系统就把 lib 改成 lib64
$ sudo find . -name libfreetype.so.6.9.0 -exec mv {} /usr/lib/freetype-infinality/ \;
$ cd /usr/lib/freetype-infinality
$ sudo ln -s libfreetype.so.6.9.0 libfreetype.so.6
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    在 ~/bin/ 目录下有两个文件，根据建议需要拷贝到 /etc/profile.d/ 目录下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ cd ~/bin
$ sudo cp infinality-settings.sh freetype-infinality.sh /etc/profile.d/
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    /etc/profile.d/infinality-settings.sh 这个文件里可以做很多设置，具体根据个人需要进行修改。
  &lt;/p&gt;
  
  &lt;p&gt;
    接着，登出系统再登入，最好是重启系统。
  &lt;/p&gt;
  
  &lt;p&gt;
    不过根据我的经历，将这两个文件拷入 /etc/profilde.d/ 目录后重启系统，差一点都登录不进来，输入密码后迅速地闪了一下屏幕，就又回到登录界面 。后来切换到 tty 下移除这两个文件，这才算进来了，目测没这两个文件 infinality 也起作用，另外，如果只拷贝 infinality-settings.sh 到 /etc/profile.d/ 目录下是没问题的。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;效果图&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-10-024510.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-10-024510.png&#34; alt=&#34;ubuntu 字体设置 infinality&#34; title=&#34;ubuntu 字体设置效果&#34; width=&#34;541&#34;  class=&#34;alignnone size-full wp-image-6182&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-10-024510.png 541w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/Screenshot-from-2012-10-10-024510-300x87.png 300w&#34; sizes=&#34;(max-width: 541px) 100vw, 541px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    在其他不曾设置过的屏幕上，将上图与图片上下的文字显示效果对比一下就知道，这字体设置是否成功。最明显的，是字的锯齿不那么了然，每个字像是一笔一划写出来的，而不是点点点组成。这也就是 infinality 的目的之一：&lt;q&gt;freely provide the nicest font rendering of any operating system.&lt;/q&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    这样，我们就完成 Ubuntu 系统下的字体设置，即字体渲染的方法的调整，接下来可以针对不同程序进行字型(font)的选择，这就根据个人喜好，没什么规则可言。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;鸣谢&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.infinality.net/forum/viewtopic.php?f=2&amp;t=77#p794&#34;&gt;infinality.net 上的安装说明&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://forums.opensuse.org/ae-ae-chinese/aes-aeoe-e-e-ae-zae-aeoe/c-ae-zae-aeoe/470464-opensuse-c-aeoe-oec-zcs-ae-ae-az-e-c-i-oec-ae-mactype.html&#34;&gt;openSUSE 论坛的相关内容&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Android 手机上 MPDroid 遥控 MPD</title>
      <link>https://www.zfanw.com/blog/mpdroid-remote-control-mpd.html</link>
      <pubDate>Mon, 08 Oct 2012 04:15:14 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/mpdroid-remote-control-mpd.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.namelessdev.mpdroid&amp;amp;hl=en&#34;&gt;MPDroid&lt;/a&gt; 是一个 MPD 客户端，从它的名称里的 &amp;#8220;Droid&amp;#8221; 可以看出，它是个 Android 应用软件。既然它是个 MPD 客户端，我们也就可以通过它控制 MPD 服务器里的音乐，还可以 streaming MPD 服务器上的音乐到手机即客户端。&lt;/p&gt;

&lt;p&gt;首先是安装 MPD，我曾经写过一篇简单介绍 &lt;a href=&#34;http://www.zfanw.com/blog/ubuntu-mpd-ncmpcpp.html&#34;&gt;MPD 与 Ncmpcpp 安装使用&lt;/a&gt;的内容，也可以查阅 &lt;a href=&#34;http://mpd.wikia.com/wiki/Music_Player_Daemon_Wiki&#34;&gt;Wikia 上 MPD 相关资料&lt;/a&gt; 进行安装配置。&lt;/p&gt;

&lt;p&gt;安装完 MPD 后是修改 mpd.conf 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gvim /etc/mpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查找下列内容并修改结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#bind_to_address     &amp;quot;localhost&amp;quot;

bind_to_address    &amp;quot;0.0.0.0&amp;quot;  #这一行是新增加的内容

port    6600

audio_output {
    type        &amp;quot;httpd&amp;quot;
    name        &amp;quot;My HTTP Stream&amp;quot;        # 这个名称可任意修改
    encoder     &amp;quot;vorbis&amp;quot;        # optional, vorbis or lame
    port        &amp;quot;8000&amp;quot;
#   quality     &amp;quot;5.0&amp;quot;           # do not define if bitrate is defined
    bitrate     &amp;quot;128&amp;quot;           # do not define if quality is defined
    format      &amp;quot;44100:16:1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存 mpd.conf 文件后需要重启 MPD:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/mpd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，从 Google Play 上下载 &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.namelessdev.mpdroid&amp;amp;hl=en&#34;&gt;MPDroid 应用&lt;/a&gt;到手机，安装好打开，初始界面如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-setting-168x300.jpg&#34; alt=&#34;mpdroid 初始界面&#34; title=&#34;mpdroid 初始设置界面&#34; width=&#34;168&#34;  class=&#34;alignnone size-medium wp-image-6017&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-setting-168x300.jpg 168w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-setting.jpg 480w&#34; sizes=&#34;(max-width: 168px) 100vw, 168px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;选择 &amp;#8220;Default connection settings&amp;#8221;，另外一个是 &amp;#8220;Wlan based connection&amp;#8221;，可以针对不同的无线网络设置不同 ip：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-wlan-setting-168x300.jpg&#34; alt=&#34;mpdroid 无线局域网设置&#34; title=&#34;mpdroid 设置无线局域网连接&#34; width=&#34;168&#34;  class=&#34;alignnone size-medium wp-image-6019&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-wlan-setting-168x300.jpg 168w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-wlan-setting.jpg 480w&#34; sizes=&#34;(max-width: 168px) 100vw, 168px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;填写 &amp;#8220;Host&amp;#8221; 与 &amp;#8220;Streaming Host&amp;#8221;，这是 MPD 服务器所在的电脑的 ip 地址，比如我的电脑在局域网的 ip 为 192.168.1.101，Ubuntu 上可以通过以下命令查看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ifconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为 MPDroid 上使用 MPD 服务器所在电脑的 ip 地址来连接，所以电脑的 ip 最好手动分配，DHCP 分配的话每次的 ip 不同，就需要 MPDroid 设置里每次都做修改。&lt;/p&gt;

&lt;p&gt;设置完成后，通过按 Android 手机的 Menu 键打开 MPDroid 的 ”Main Menu&amp;#8221;，点击进入音乐控制的主界面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-playing1.jpg&#34; alt=&#34;mpdroid 播放音乐中&#34; title=&#34;mpdroid 控制播放音乐&#34; width=&#34;480&#34;  class=&#34;alignnone size-full wp-image-6028&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-playing1.jpg 480w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-playing1-168x300.jpg 168w&#34; sizes=&#34;(max-width: 480px) 100vw, 480px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一目了然的界面。&lt;/p&gt;

&lt;p&gt;要将 MPD 服务器上的音乐 streaming 到手机，即通过手机播放 MPD 服务器上的音乐，如下图所示，可以通过 Android 手机的 Menu 按键调用该菜单，勾选 streaming 就可以开始播放，如果没有声音，请点击上一张图片的&lt;strong&gt;音响&lt;/strong&gt;图标进入查看 OUTPUTS 是否勾选了名称为 &amp;#8220;My HTTP Stream&amp;#8221; 的声音输出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-playing-streaming.jpg&#34; alt=&#34;mpdroid streaming 播放中&#34; title=&#34;mpdroid-playing-streaming&#34; width=&#34;168&#34;  class=&#34;alignnone size-full wp-image-6024&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-playing-streaming.jpg 480w, https://www.zfanw.com/blog/wp-content/uploads/2012/10/mpdroid-playing-streaming-168x300.jpg 168w&#34; sizes=&#34;(max-width: 480px) 100vw, 480px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样，我就可以把手机当成电脑上音乐播放的遥控器；如果无聊，也可以同时在电脑和手机上播放音乐，不过如果在电脑/手机上同时播放时，因为 MPDroid 在手机上 streaming 会有缓冲，于是会慢电脑上几秒，结果就演成“二重唱”了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grep 的由来</title>
      <link>https://www.zfanw.com/blog/grep-come-from.html</link>
      <pubDate>Tue, 02 Oct 2012 13:30:52 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/grep-come-from.html</guid>
      <description>&lt;p&gt;如果你用过 &lt;a href=&#34;http://en.wikipedia.org/wiki/Ed_(text_editor)&#34;&gt;ed 编辑器&lt;/a&gt;，你应该知道，除非你要求它，否则它不会显示出文件内容 &amp;#8211; 因为它在交互显示出现来前就被写出来，那时很多使用 ed 的人还只有一台打印机可以输出呢。&lt;/p&gt;

&lt;p&gt;经常地，你也没想它显示所有的行，只要一小部分就行。它当然能搞定这个。你可以说“给我显示前 5 行”，又或者“显示下面的 8 行”又或者“给我显示 100-110 行”，这都可以实现。&lt;/p&gt;

&lt;p&gt;不过有时你可能想说，“给我显示所有包含 x 的行”，因为你只兴趣这些包含 &amp;#8216;x&amp;#8217; 的文字。ed 也可以搞定。&lt;/p&gt;

&lt;p&gt;在 &lt;strong&gt;ed 中搜索，你使用 /&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;于是 /foo 就会查找下一个 &amp;#8216;foo‘ 实例&lt;/p&gt;

&lt;p&gt;不过你可能不想要“下一个“实例，你想要&lt;strong&gt;所有实例&lt;/strong&gt;。那么你需要一个&lt;strong&gt;全局搜索&lt;/strong&gt;。这是命令 g/foo&lt;/p&gt;

&lt;p&gt;目前为止一切都合逻辑吧？&lt;/p&gt;

&lt;p&gt;一旦你找到这些行，你想看看它们。于是你告诉 ed 把它们&lt;strong&gt;打印&lt;/strong&gt;出来。这样的命令是 g/foo/p &amp;#8211; 全局搜索 &amp;#8216;foo&amp;#8217; 并且打印出匹配的行。&lt;/p&gt;

&lt;p&gt;非常不错。不过 ed 可以更聪明，它不仅仅查找字符串字面匹配的，它还能&lt;strong&gt;处理正则表达式&lt;/strong&gt;。比如你可以用 g/&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0-9&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:0-9&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;/p 来显示所有以数字开始的行。又或者 g/;$/p 打印出所有以分号结束的行。&lt;/p&gt;

&lt;p&gt;于是这个 ed 用户大量使用的”给我显示匹配的行“的功能就可以总结为“&lt;strong&gt;全局搜索匹配正则表达式的行并且打印出来&lt;/strong&gt;” &amp;#8211; 或者，用 ed 的形式表述，&lt;strong&gt;g/regular expression/p&lt;/strong&gt;。再简单点，&lt;strong&gt;g/re/p&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;是的。Grep。这就是它的由来了，感谢 ed。&lt;/p&gt;

&lt;p&gt;本篇节译自&lt;a href=&#34;http://geekblog.oneandoneis2.org/index.php/2012/09/30/to-understand-the-command-line&#34;&gt;这一篇内容&lt;/a&gt;，很有意思的文章。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0-9&#34;&gt;0-9 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0-9&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Surround.vim</title>
      <link>https://www.zfanw.com/blog/surround-vim.html</link>
      <pubDate>Sun, 30 Sep 2012 13:09:14 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/surround-vim.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 修改符号&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 删除符号&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 增加符号&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-4&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 扩展阅读&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    如下的一段代码，如果要删除得只剩下内容该如何：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&#34;vim&#34;&amp;gt;
    &amp;lt;p&amp;gt;
        &amp;lt;em&amp;gt;hi this is surround.vim from tim tpope&amp;lt;em&amp;gt;
    &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    如果在 vim 里，可以这样操作：先定位到 &lt;div class=&amp;#8221;vim&amp;#8221;&gt; 行，然后按 &lt;kbd&gt;2dd&lt;/kbd&gt;，之后再定位到 &lt;/p&gt; 行，再 &lt;kbd&gt;2dd&lt;/kbd&gt;，然后剩下 em 一对标签。
  &lt;/p&gt;
  
  &lt;p&gt;
    这一对 em 看着不太好删。
  &lt;/p&gt;
  
  &lt;p&gt;
    这时，如果有安装 &lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;surround.vim&lt;/a&gt; 的话，只要按 &lt;kbd&gt;dst&lt;/kbd&gt; 就可以轻松删除一对 em 标签。
  &lt;/p&gt;
  
  &lt;p&gt;
    Surround.vim 是一个 Vim 插件，用于管理 &lt;strong&gt;() [] &lt;&gt; &amp;#8220;&amp;#8221; &amp;#8221; 及 html、xml 标签等成双成对出现的符号&lt;/strong&gt;。用它可以很方便地&lt;strong&gt;删除/修改/增加&lt;/strong&gt;这些符号，譬如上面所述的例子。
  &lt;/p&gt;
  
  &lt;p&gt;
    显然，上面的例子可以通过按三次的 dst 来删除，但那样显然不够高效，因为要按 9 次字母键，如果能 3dst 这样配合数字使用就很简单。又或者调用 Vim 的重复命令按键 &amp;#8220;.&amp;#8221; （点号）。但目前来看，这个插件并不支持配合数字的操作，可能是意义不大，毕竟所举的案例其实很偏门；另外，Vim 里点号所重复的命令只是重复最后一次原生命令，而无法重复映射过的“整”命令。
  &lt;/p&gt;
  
  &lt;p&gt;
    于是，Tim Tpope 还写了一个 &lt;a href=&#34;https://github.com/tpope/vim-repeat&#34;&gt;repeat.vim 的插件&lt;/a&gt;，解决点号重复命令的问题。
  &lt;/p&gt;
  
  &lt;p&gt;
    于是上述案例的解决办法变成，先按一次 &lt;kbd&gt;dst&lt;/kbd&gt;，然后两次点号，这回按了 5 次按键。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;修改符号&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    以下例子中 * 表示光标位置。
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;#8220;hello w*orld&amp;#8221; &amp;rarr; &lt;kbd&gt;cs&#34;&#39;&lt;/kbd&gt; &amp;rarr; &amp;#8216;hello world&amp;#8217;
  &lt;/p&gt;
  
  &lt;p&gt;
    可以把 cs 理解为 change surround，把 &amp;#8221; 修改为 ‘。
  &lt;/p&gt;
  
  &lt;p&gt;
    ‘hello wor*ld’ &amp;rarr; &lt;kbd&gt;cs‘&lt;q&gt;&lt;/kbd&gt; &amp;rarr; &lt;q&gt;hello world&lt;/q&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;q&gt;hello *world&lt;/q&gt; &amp;rarr; &lt;kbd&gt;cst&#34;&lt;/kbd&gt; &amp;rarr; &amp;#8220;hello world&amp;#8221;
  &lt;/p&gt;
  
  &lt;p&gt;
    cst 表示 change surround tag，t 表示 xml/html 成对出现的标签。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;删除符号&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    类于修改符号，删除只是换个按键，把 c 换成 d。则要删除包围的双引号可以用 ds&amp;#8221; &amp;#8211; delete surround &amp;#8220;，要删除标签对，则用 &lt;kbd&gt;dst&lt;/kbd&gt; &amp;#8211; delete surround tag。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;增加符号&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    如果要增加符号，比如字符串 hello，要用双引号包围，则可以按 &lt;kbd&gt;ysiw&#34;&lt;/kbd&gt;，按 surround.vim 帮助说明，可以把 y 记忆成 you，于是 &lt;kbd&gt;ysiw&#34;&lt;/kbd&gt; 意指 you surround inner word &amp;#8220;，同理，要用标签对的话则是按 &lt;kbd&gt;ysiw&lt;p&gt;&lt;/kbd&gt;，另外，surround.vim 还提供包围整行的方法，&lt;kbd&gt;yss&#34;&lt;/kbd&gt; &amp;#8211; you surround sentence &amp;#8220;；至于在增加 [] () &lt;&gt; 这样的符号时，有一点小小区别，比如 hello 这个单词，&lt;kbd&gt;ysiw[&lt;/kbd&gt; 会生成 [ hello ]，ysiw] 会成生 [hello]，hello 前后少一个空格，删除、修改亦然。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果要包围单行里的两个单词甚至更多，则可以使用可视模式，先进入 vim 的可视化模式选中要包围的单词，然后按 &lt;kbd&gt;S&#34;&lt;/kbd&gt; 就可以把这些单词用双引号包围。
  &lt;/p&gt;
  
  &lt;p&gt;
    非常便利。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-4&#34;&gt;扩展阅读&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-4&#34; href=&#34;#i-4&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.zfanw.com/blog/vundle-vim-plugin-management.html&#34;&gt;vim 插件安装的便利方法&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://github.com/tpope&#34;&gt;Tim Tpope 的各种其他 vim 插件&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ranger 文件管理器</title>
      <link>https://www.zfanw.com/blog/ranger.html</link>
      <pubDate>Sat, 15 Sep 2012 11:32:42 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/ranger.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_Ranger&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 安装 Ranger&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_ranger&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 使用 ranger&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    &lt;a href=&#34;http://ranger.nongnu.org/index.html&#34;&gt;Ranger&lt;/a&gt; 是一个终端窗口内的&lt;strong&gt;文件管理器&lt;/strong&gt;，使用 VI 键绑定。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果你习惯使用键盘，并且熟悉基本的 Vim 键组合，则 Ranger 是个非常不错的选择。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_Ranger&#34;&gt;安装 Ranger&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_Ranger&#34; href=&#34;#_Ranger&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    Ranger 的安装方法有多种。
  &lt;/p&gt;
  
  &lt;h3&gt;
    系统安装包
  &lt;/h3&gt;
  
  &lt;p&gt;
    某些 Linux 系统有打包好的 ranger 安装包，可直接安装，比如 Ubuntu：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ sudo apt-get install ranger
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    openSUSE 下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo zypper install ranger
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    但软件源提供的 Ranger 有可能不是最新，那么可以考虑下面一种方法。
  &lt;/p&gt;
  
  &lt;h3&gt;
    压缩包
  &lt;/h3&gt;
  
  &lt;p&gt;
    从 &lt;a href=&#34;http://ranger.nongnu.org/download.html&#34;&gt;ranger&lt;/a&gt; 网站下载压缩包，然后解压。
  &lt;/p&gt;
  
  &lt;p&gt;
    解压后的文件可以直接运行：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ tar xvf ranger-stable.tar.gz 
$ cd ranger-stable 
$ ./ranger.py
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    也可以安装后运行：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ tar xvf ranger-stable.tar.gz 
$ cd ranger-stable 
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这个办法同样可用于更新 Ranger，查看 Ranger 的版本命令为终端窗口输入：&lt;code&gt;ranger --version&lt;/code&gt;。
  &lt;/p&gt;
  
  &lt;h3&gt;
    git 源
  &lt;/h3&gt;
  
  &lt;p&gt;
    ranger 源代码通过 git 管理，所以，也可以从源代码库克隆一份，好处是最新的程序更新都能使用到，但稳定性不一定最佳：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ git clone git://git.savannah.nongnu.org/ranger.git 
$ cd ranger
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    之后按上一步的两个办法操作。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_ranger&#34;&gt;使用 ranger&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_ranger&#34; href=&#34;#_ranger&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    打开终端窗口，输入:&lt;code&gt;ranger&lt;/code&gt; 然后按 &lt;kbd&gt;Enter&lt;/kbd&gt; 进入 Ranger 界面。
  &lt;/p&gt;
  
  &lt;p&gt;
    Ranger 的界面分为三列，
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      中间列 &amp;#8211; 当前目录
    &lt;/li&gt;
    &lt;li&gt;
      左列 &amp;#8211; 上一级目录
    &lt;/li&gt;
    &lt;li&gt;
      右列 &amp;#8211; 可预览文件的内容，默认仅支持文本文件的预览，但是可以通过设置预览 html，图片，存档文件，pdf 甚至音视频信息。
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/09/ranger.png&#34;&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/09/ranger.png&#34; alt=&#34;ranger screenshot&#34; title=&#34;ranger&#34; width=&#34;610&#34; &#34;alignnone size-full wp-image-5552&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2012/09/ranger.png 810w, https://www.zfanw.com/blog/wp-content/uploads/2012/09/ranger-300x222.png 300w&#34; sizes=&#34;(max-width: 810px) 100vw, 810px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    因为 ranger 使用 VI 键绑定，所以对 Vim 熟悉的用户可以轻松上手，比如 j 表示光标下移，k 表示光标上移，h 表示返回上一级目录，l 表示进入光标所在的目录或打开光标所在的文件。
  &lt;/p&gt;
  
  &lt;p&gt;
    ranger 的键绑定很多，某些不常用的键，一时记不起是正常的，这时可以在 ranger 里按 &lt;kbd&gt;1?&lt;/kbd&gt; 打开键绑定的清单，&lt;kbd&gt;2?&lt;/kbd&gt; 则是命令清单，&lt;kbd&gt;3?&lt;/kbd&gt; 是设置项清单，&lt;kbd&gt;?&lt;/kbd&gt; 则是整个使用手册。按 &lt;kbd&gt;q&lt;/kbd&gt; 即可退出帮助界面。
  &lt;/p&gt;
  
  &lt;p&gt;
    在 ranger 里，可以像 Vim 一样按 &lt;kbd&gt;:&lt;/kbd&gt; 进入命令模式，然后调用 ranger 的命令。比如光标位置下的图片，我不想用系统默认的程序打开，则可以按 &lt;kbd&gt;:&lt;/kbd&gt; 进入命令模式，然后输入 open_with（可以按 &lt;kbd&gt;r&lt;/kbd&gt; 快速打开这个命令），再之后是要打开图片的程序，比如 feh，则整个命令的形式是：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;:open_with feh
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    当然，这种常用的操作 ranger 默认配备了一个 &lt;kbd&gt;r&lt;/kbd&gt; 快捷键。
  &lt;/p&gt;
  
  &lt;p&gt;
    又或者想删除文件，可以按空格键先做标记，或者将光标移动至要删除的文件上，然后进入命令模式，输入 delete 命令，回车，按 y 确定删除。要以 root 的身份启动程序也非常容易，在 open_with 后跟一个 &amp;#8220;r&amp;#8221; 标记(flag)，然后就会要求输入 root 用户密码。
  &lt;/p&gt;
  
  &lt;p&gt;
    复制文件按 yy，剪切按 dd，粘贴按 pp，E 编辑当前文件，重命名可以通过命令行 &lt;code&gt;:rename 新名字&lt;/code&gt;，ranger 还支持 midnight commander 的一些键用法，比如 f3 是显示文件，f4 是编辑文件，f5 是复制文件，f6 剪切文件。&lt;a href=&#34;http://www.gnu.org/software/mc/&#34;&gt;midnight commander&lt;/a&gt; 也是一个基于文本操作的文件管理器，双面板。与 Windows 系统下的 total commander 有相似之处。
  &lt;/p&gt;
  
  &lt;p&gt;
    显然，键绑定是可以修改的，首先，需要一个 rc.conf 配置文件（ranger 1.5 版本后）：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ ranger --copy-config=rc
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这样会在 ～/.config/ranger/ 下生成一个 rc.conf 文件，里面可以看到许多 map，类似 Vim 的键映射，可以根据需要进行修改。
  &lt;/p&gt;
  
  &lt;p&gt;
    文件的打开程序列表也可以通过配置文件修改：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;$ ranger --copy-config=rifle
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    以上命令在复制了一份 rifle.conf 到 ~/.config/ranger/ 目录，打开即可以编辑。
  &lt;/p&gt;
  
  &lt;p&gt;
    作为文件管理器，Ranger 可以快捷访问某些目录，比如 gh 访问主目录，gm 访问 /media 目录，实际上，当你按下 g 时，ranger 会在底部弹出一个辅助栏，提示可以通过 g（go to 的意思）访问到的目录。另外，目录也可以以书签形式组织，譬如当前目录可以按 &lt;kbd&gt;ma&lt;/kbd&gt; 加入书签中，然后 &lt;kbd&gt;`a&lt;/kbd&gt; 或者 &lt;kbd&gt;&#39;a&lt;/kbd&gt; 访问到该目录，这在 Vim 下是 quickmark 的操作，也很像 totalcommander 的 ctrl-d + 字符的操作。另外还可以在进入命令模式后按 tab 键自动补齐书签中的目录，不过前一个方法显然要更快捷。
  &lt;/p&gt;
  
  &lt;p&gt;
    以上略作介绍，更多内容请见 &lt;a href=&#34;http://ranger.nongnu.org/ranger.1.html&#34;&gt;ranger 使用手册&lt;/a&gt;，即 ranger 中按 &lt;kbd&gt;?&lt;/kbd&gt; 的结果。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>