<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端开发 on 陈三</title>
    <link>https://www.zfanw.com/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 前端开发 on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 08 Jul 2016 05:32:04 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>再谈浏览器缓存</title>
      <link>https://www.zfanw.com/blog/browser-cache.html</link>
      <pubDate>Fri, 08 Jul 2016 05:32:04 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/browser-cache.html</guid>
      <description>

&lt;p&gt;一个页面上的资源，可以简单分为两种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;url 可变，比如这个页面上的 css 文件，这次可能是 app.fe5a24f8ae.css，下次可能是 app.613e5f58f1.css&lt;/li&gt;
&lt;li&gt;url 不可能变，比如这个页面的 url&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;针对它们，我们的缓存方式可以不同。&lt;/p&gt;

&lt;p&gt;比如第一种，我们可以这样设置响应头：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cache-Control max-age=31536000, must-revalidate&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;表示这个资源一年内都有效，过期的话才要到服务器上验证。&lt;/p&gt;

&lt;p&gt;那么，我们如何保证资源修改后能及时更新到用户端？修改 url 即可。&lt;/p&gt;

&lt;p&gt;而针对第二种，因为 url 无法改变，我们就需要另外的方式。&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cache-Control no-cache&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;no-cache&lt;/code&gt; 不是表示不能缓存，而是说每次浏览器都要跟服务器做个确认 &amp;#8211; 通过 &lt;code&gt;ETag&lt;/code&gt; 或 &lt;code&gt;Last-Modified&lt;/code&gt;，这样就会多出一个请求 。&lt;/p&gt;

&lt;h2 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://jakearchibald.com/2016/caching-best-practices/&#34;&gt;Caching best practices &amp;amp; max-age gotchas &amp;#8211; JakeArchibald.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>peerDependencies</title>
      <link>https://www.zfanw.com/blog/peerdependencies.html</link>
      <pubDate>Thu, 30 Jun 2016 06:32:13 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/peerdependencies.html</guid>
      <description>&lt;p&gt;写 npm package 时，接触最多的，当属 &lt;a href=&#34;https://www.zfanw.com/blog/difference-between-dependencies-and-devdependencies.html&#34;&gt;dependencies 与 devDependencies&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如果一个包定义了 &lt;code&gt;dependencies&lt;/code&gt; 与 &lt;code&gt;devDependencies&lt;/code&gt;，则我们在安装这个包时，会连着它的依赖们一同安装。&lt;/p&gt;

&lt;p&gt;比如一个 react-native 的包，它依赖于 &lt;code&gt;react&lt;/code&gt; 与 &lt;code&gt;react-native&lt;/code&gt;，如果我们把 &lt;code&gt;react&lt;/code&gt; 及 &lt;code&gt;react-native&lt;/code&gt; 定义在 &lt;code&gt;dependencies&lt;/code&gt; 下，则安装完这个包后，它的目录结构是这样：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ProjectRoot/node_modules/package_name/node_modules/react&lt;/li&gt;
&lt;li&gt;ProjectRoot/node_modules/package_name/node_modules/react-native&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们又下载了一遍 react 与 react-native，这显得多余，可能还会导致冲突问题。&lt;/p&gt;

&lt;p&gt;这时我们就可以使用 &lt;a href=&#34;https://nodejs.org/en/blog/npm/peer-dependencies/&#34;&gt;&lt;code&gt;peerDependencies&lt;/code&gt;&lt;/a&gt;，通过它，我们能够声明第三方包正常运行的环境 &amp;#8211; 要安装我，你的环境该是如何，否则将无法运行。当然，没人会无聊到在一个 ember.js 项目中安装一个 react-native 的第三方包。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>react-native 滑动删除</title>
      <link>https://www.zfanw.com/blog/react-native-swipeable-listview.html</link>
      <pubDate>Tue, 28 Jun 2016 10:41:27 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/react-native-swipeable-listview.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：本文基于 react-native 0.29.0-rc.0，仅针对 iOS 平台。&lt;/p&gt;

&lt;p&gt;iOS 下的列表，通常都可以往左滑动，显示快捷菜单 &amp;#8211; 比如删除。&lt;/p&gt;

&lt;p&gt;只是 react-native 下的 ListView 不具备这种功能。&lt;/p&gt;

&lt;p&gt;但实际上，react-native 官方库里，就有一个 &lt;a href=&#34;https://github.com/facebook/react-native/tree/master/Libraries/Experimental/SwipeableRow&#34;&gt;SwipeableListView&lt;/a&gt;，只不过是放在 &lt;code&gt;Experimental&lt;/code&gt; 目录下，表示还不成熟 &amp;#8211; 目前也是没有文档的，只能自己阅读源代码。&lt;/p&gt;

&lt;p&gt;其实用法非常简单，大部分跟 ListView 是一致的，只是多了些 prop。&lt;/p&gt;

&lt;p&gt;来看一个示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;React&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color: #000000&#34;&gt;ScrollView&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;View&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;TouchableHighlight&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;Text&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;SwipeableListView&lt;/span&gt; } &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;react-native&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color: #000000&#34;&gt;connect&lt;/span&gt; } &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;react-redux&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;styles&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;./styles&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;formatListViewDataSource&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;../../utils/formatListViewDataSource&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #A90D91&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;WantHome&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;React&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;Component&lt;/span&gt; {
  &lt;span style=&#34;color: #000000&#34;&gt;componentDidMount&lt;/span&gt; () {
    &lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;dispatch&lt;/span&gt;({
      &lt;span style=&#34;color: #000000&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;USER_ENTERED_WANT_HOME&amp;#39;&lt;/span&gt;
    })
  }
  &lt;span style=&#34;color: #000000&#34;&gt;render&lt;/span&gt; () {
    &lt;span style=&#34;color: #A90D91&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ds&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;SwipeableListView&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;getNewDataSource&lt;/span&gt;()
    &lt;span style=&#34;color: #A90D91&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;formatListViewDataSource&lt;/span&gt;(&lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;want&lt;/span&gt;)
    &lt;span style=&#34;color: #000000&#34;&gt;ds&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;ds&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;cloneWithRowsAndSections&lt;/span&gt;(...&lt;span style=&#34;color: #000000&#34;&gt;obj&lt;/span&gt;)
    &lt;span style=&#34;color: #A90D91&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #000000&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #A90D91&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;want&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;length&lt;/span&gt;) {
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;View&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{[&lt;span style=&#34;color: #000000&#34;&gt;styles&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;container&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;styles&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;center&lt;/span&gt;]}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;Text&amp;gt;暂无内容，请点击右上角按钮添加&amp;lt;/Text&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
      )
    } &lt;span style=&#34;color: #A90D91&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; (
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;ScrollView&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{[&lt;span style=&#34;color: #000000&#34;&gt;styles&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;body&lt;/span&gt;]}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;SwipeableListView&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;bounceFirstRowOnMount&lt;/span&gt;
            &lt;span style=&#34;color: #000000&#34;&gt;maxSwipeDistance=&lt;/span&gt;{&lt;span style=&#34;color: #1C01CE&#34;&gt;100&lt;/span&gt;}
            &lt;span style=&#34;color: #000000&#34;&gt;dataSource=&lt;/span&gt;{&lt;span style=&#34;color: #000000&#34;&gt;ds&lt;/span&gt;}
            &lt;span style=&#34;color: #000000&#34;&gt;renderQuickActions=&lt;/span&gt;{(&lt;span style=&#34;color: #000000&#34;&gt;rowData&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;sectionID&lt;/span&gt;, &lt;span style=&#34;color: #000000&#34;&gt;rowID&lt;/span&gt;) &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; {
              &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; (
                &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;View&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                  &lt;span style=&#34;color: #000000&#34;&gt;flex:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;,
                  &lt;span style=&#34;color: #000000&#34;&gt;flexDirection:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;row&amp;#39;&lt;/span&gt;,
                  &lt;span style=&#34;color: #000000&#34;&gt;justifyContent:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;flex-end&amp;#39;&lt;/span&gt;,
                  &lt;span style=&#34;color: #000000&#34;&gt;alignItems:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;
                }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;TouchableHighlight&lt;/span&gt;
                    &lt;span style=&#34;color: #000000&#34;&gt;onPress=&lt;/span&gt;{() &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; {
                      &lt;span style=&#34;color: #000000&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;)
                    }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;View&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                      &lt;span style=&#34;color: #000000&#34;&gt;backgroundColor:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;,
                      &lt;span style=&#34;color: #000000&#34;&gt;flex:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;1&lt;/span&gt;,
                      &lt;span style=&#34;color: #000000&#34;&gt;alignItems:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;center&amp;#39;&lt;/span&gt;,
                      &lt;span style=&#34;color: #000000&#34;&gt;flexDirection:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;row&amp;#39;&lt;/span&gt;,
                      &lt;span style=&#34;color: #000000&#34;&gt;paddingHorizontal:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;10&lt;/span&gt;
                    }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                      &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;Text&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                        &lt;span style=&#34;color: #000000&#34;&gt;color:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;,
                        &lt;span style=&#34;color: #000000&#34;&gt;fontSize:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;16&lt;/span&gt;
                      }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;删除&amp;lt;/Text&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/TouchableHighlight&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
              )
            }}
            &lt;span style=&#34;color: #000000&#34;&gt;renderRow=&lt;/span&gt;{(&lt;span style=&#34;color: #000000&#34;&gt;rowData&lt;/span&gt;) &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; {
              &lt;span style=&#34;color: #A90D91&#34;&gt;return&lt;/span&gt; (
                &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;View&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                  &lt;span style=&#34;color: #000000&#34;&gt;paddingVertical:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;10&lt;/span&gt;,
                  &lt;span style=&#34;color: #000000&#34;&gt;backgroundColor:&lt;/span&gt; &lt;span style=&#34;color: #C41A16&#34;&gt;&amp;#39;#fff&amp;#39;&lt;/span&gt;
                }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;Text&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;style=&lt;/span&gt;{{
                    &lt;span style=&#34;color: #000000&#34;&gt;fontSize:&lt;/span&gt; &lt;span style=&#34;color: #1C01CE&#34;&gt;16&lt;/span&gt;
                  }}&lt;span style=&#34;color: #000000&#34;&gt;&amp;gt;&lt;/span&gt;
                    {&lt;span style=&#34;color: #000000&#34;&gt;rowData&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;text&lt;/span&gt;}
                  &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/Text&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/View&amp;gt;&lt;/span&gt;
              )
            }}
          &lt;span style=&#34;color: #000000&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;&amp;lt;/ScrollView&amp;gt;&lt;/span&gt;
      )
    }
  }
}
&lt;span style=&#34;color: #A90D91&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;mapStateToProps&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;) &lt;span style=&#34;color: #000000&#34;&gt;=&amp;gt;&lt;/span&gt; ({
  &lt;span style=&#34;color: #000000&#34;&gt;want:&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color: #000000&#34;&gt;want&lt;/span&gt;
})
&lt;span style=&#34;color: #A90D91&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #A90D91&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;connect&lt;/span&gt;(&lt;span style=&#34;color: #000000&#34;&gt;mapStateToProps&lt;/span&gt;)(&lt;span style=&#34;color: #000000&#34;&gt;WantHome&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里有几个需要注意的属性值：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dataSource&lt;/code&gt; &amp;#8211; 我们要渲染的数据列表。&lt;/p&gt;

&lt;p&gt;通常我们会有一个数组，比如 &lt;code&gt;[&#39;咸饭&#39;, &#39;粥&#39;]&lt;/code&gt;，数据需要处理成 &lt;code&gt;SwipeableListView&lt;/code&gt; 需要的格式，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
&#39;s1&#39;: &#39;标题&#39;,
&#39;r1&#39;: &#39;咸饭&#39;,
&#39;r2&#39;: &#39;粥&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这也是上面代码中 &lt;code&gt;formatListViewDataSource&lt;/code&gt; 函数起到的作用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
* @function formatListViewDataSource format data for ListView of react-native
* @param {Array} data - data to be formatted
* @return {Array}
* @example
*   let ds = formatListViewDataSource([1, 2, 3])
*   xxx.cloneWithRowsAndSections(...ds)
*/
export default function formatListViewDataSource (data) {
if (!Array.isArray(data)) {
throw new Error(&#39;function only accept Array&#39;)
}
var dataBlob = {}
var sectionIDs = [&#39;s1&#39;]
var rowIDs = [[]]
data.forEach(function (element, index) {
dataBlob[&#39;r&#39; + index] = {id: &#39;r&#39; + index, text: element}
rowIDs[0].push(&#39;r&#39; + index)
})
dataBlob[&#39;s1&#39;] = &#39;&#39;
return [
dataBlob,
sectionIDs,
rowIDs
]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;maxSwipeDistance&lt;/code&gt; &amp;#8211; 表示滑动的最大距离，必须设置，否则默认为 0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;renderQuickActions&lt;/code&gt; &amp;#8211; 这就是我们滑动后显示的快捷动作了&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;效果如下图：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/react-native-swipeablelist.gif&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/react-native-swipeablelist.gif&#34; alt=&#34;react native swipeableListView&#34; width=&#34;372&#34; class=&#34;alignnone size-full wp-image-18623&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>react-native Navigation Experimental 怎么用</title>
      <link>https://www.zfanw.com/blog/react-native-navigator-experimental-usage.html</link>
      <pubDate>Wed, 22 Jun 2016 06:50:48 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/react-native-navigator-experimental-usage.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：本文基于 react-native 0.29.0-rc.0，仅针对 iOS 平台。&lt;/p&gt;

&lt;p&gt;react-native 的 navigation experimental 是 &lt;a href=&#34;https://facebook.github.io/react-native/docs/navigator.html&#34;&gt;navigator&lt;/a&gt; 的继任，但因为还在开发中，目前没什么文档，API 也经常变动，示例没跟上，就让人看不懂。&lt;/p&gt;

&lt;p&gt;在 navigation experimental 下，&lt;a href=&#34;https://github.com/facebook/react-native/blob/master/Examples/UIExplorer/NavigationExperimental/NavigationCardStack-NavigationHeader-Tabs-example.js#L53&#34;&gt;路由只是些对象&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function createAppNavigationState(): Object {
  return  {
    // Three tabs.
    tabs: {
      index: 0,
      routes: [
        {key: &#39;apple&#39;},
        {key: &#39;banana&#39;},
        {key: &#39;orange&#39;},
      ],
    },
    // Scenes for the `apple` tab.
    apple: {
      index: 0,
      routes: [{key: &#39;Apple Home&#39;}],
    },
    // Scenes for the `banana` tab.
    banana: {
      index: 0,
      routes: [{key: &#39;Banana Home&#39;}],
    },
    // Scenes for the `orange` tab.
    orange: {
      index: 0,
      routes: [{key: &#39;Orange Home&#39;}],
    },
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的路由表示 app 有三个标签页，每个标签页各有各的子路由。&lt;/p&gt;

&lt;p&gt;我们不妨把路由想成一个族谱（family tree），循着每个树枝，我们能抵达到各个页面。而 &lt;code&gt;index&lt;/code&gt; 就是我们的指路牌。我们的页面间的切换，就是&lt;a href=&#34;https://github.com/facebook/react-native/blob/master/Examples/UIExplorer/NavigationExperimental/NavigationCardStack-NavigationHeader-Tabs-example.js#L84&#34;&gt;一个 action 修改 navigation state 的副作用&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;有了路由数据，就可以渲染对应的 scene 了，怎么做？&lt;/p&gt;

&lt;p&gt;我们来写一个简单页面，它的路由数据是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  index: 0,
  routes: [{
    key: &#39;Want Home&#39;
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们只有一个页面，&lt;code&gt;index&lt;/code&gt; 值表示这个页面处于激活状态中。&lt;/p&gt;

&lt;p&gt;页面组件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;
import React from &#39;react&#39;
import { View, Text, NavigationExperimental } from &#39;react-native&#39;
const {
  CardStack: NavigationCardStack,
  Header: NavigationHeader,
  PropTypes: NavigationPropTypes,
  StateUtils: NavigationStateUtils,
} = NavigationExperimental
class Want extends React.Component {
  renderScene = (sceneProps) =&amp;gt; {
    return (
      &amp;lt;View style={{flex: 1, marginTop: 64}}&amp;gt;
        &amp;lt;Text&amp;gt;haha&amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
    )
  }
  render () {
    return (
      &amp;lt;NavigationCardStack
        direction=&#39;vertical&#39;
        navigationState={{
          index: 0,
          routes: [{
            key: &#39;Want Home&#39;
          }]
        }}
        renderScene={this.renderScene}
        /&amp;gt;
    )
  }
}
export default Want
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;刷新 Simulator，我们能看到 &lt;code&gt;haha&lt;/code&gt; 文本，如果你用的是 react-native 0.28 版本，还会看到如下的错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ExceptionsManager.js:70 Warning: Failed propType: Required prop &lt;code&gt;onNavigate&lt;/code&gt; was not specified in &lt;code&gt;NavigationCardStack&lt;/code&gt;. Check the render method of &lt;code&gt;Want&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而在 0.29 中，&lt;code&gt;onNavigate&lt;/code&gt; &lt;a href=&#34;https://github.com/facebook/react-native/commit/fb0007d85323909ab652bf97166744fa7e17daab&#34;&gt;被移除了&lt;/a&gt;，更换为 &lt;code&gt;onNavigateBack&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果想给页面定义个 navigationBar，我们可以添加一个 &lt;code&gt;renderOverlay&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  renderOverlay = (sceneProps) =&amp;gt; {
    return (
      &amp;lt;NavigationHeader
        {...sceneProps}
        renderTitleComponent={() =&amp;gt; (
          &amp;lt;NavigationHeader.Title&amp;gt;
            想吃
          &amp;lt;/NavigationHeader.Title&amp;gt;
        )}
        /&amp;gt;
    )
  }
  render () {
    return (
      &amp;lt;NavigationCardStack
        direction=&#39;vertical&#39;
        navigationState={{
          index: 0,
          routes: [{
            key: &#39;Want Home&#39;
          }]
        }}
        renderScene={this.renderScene}
        renderOverlay={this.renderOverlay}
        /&amp;gt;
    )
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;刷新 simulator，我们能看到这样的界面：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-21-at-23.10.14.png&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-21-at-23.10.14.png&#34; alt=&#34;react native navigator experimental&#34; width=&#34;760&#34; class=&#34;alignnone size-full wp-image-18582&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-21-at-23.10.14.png 760w, https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-21-at-23.10.14-300x105.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-21-at-23.10.14-100x35.png 100w&#34; sizes=&#34;(max-width: 760px) 100vw, 760px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前我们还只有一个页面，没有路由切换，也没有动画效果。&lt;/p&gt;

&lt;p&gt;假定我们点击了 haha 文本会进入详情页面。&lt;/p&gt;

&lt;p&gt;在点击发生时，我们需要调整路由数据。&lt;/p&gt;

&lt;p&gt;我们要用到 &lt;a href=&#34;https://github.com/reactjs/redux&#34;&gt;redux&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;先创建一个 &lt;code&gt;navigation.js&lt;/code&gt; 的 reducer 文件，把上面的路由数据迁移过来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { PUSH_ROUTE, POP_ROUTE } from &#39;../actionTypes&#39;
import { NavigationExperimental } from &#39;react-native&#39;
const {StateUtils: NavigationStateUtils} = NavigationExperimental

const initialState = {
  index: 0,
  routes: [{
    key: &#39;Want Home&#39;
  }]
}

function navigationState (state = initialState, action) {
  switch (action.type) {
    case PUSH_ROUTE:
      if (state.routes[state.index].key === (action.route &amp;amp;&amp;amp; action.route.key)) return state
      return NavigationStateUtils.push(state, action.route)

    case POP_ROUTE:
      if (state.index === 0 || state.routes.length === 1) return state
      return NavigationStateUtils.pop(state)

    default:
      return state

  }
}

export default navigationState
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再添加一个 &lt;code&gt;navigation.js&lt;/code&gt; 的 action 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { PUSH_ROUTE, POP_ROUTE } from &#39;../actionTypes&#39;

export function push (route) {
  return {
    type: PUSH_ROUTE,
    route: route
  }
}

export function pop () {
  return {
    type: POP_ROUTE
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;Want&lt;/code&gt; 组件中，我们通过 react-redux 提供的 &lt;code&gt;connect&lt;/code&gt; 绑定 store 里的数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;
import React from &#39;react&#39;
import { View, Text, NavigationExperimental, TouchableHighlight } from &#39;react-native&#39;
import { connect } from &#39;react-redux&#39;
import { push, pop } from &#39;../actions/navigation&#39;
const {
  CardStack: NavigationCardStack,
  Header: NavigationHeader,
  PropTypes: NavigationPropTypes,
  StateUtils: NavigationStateUtils,
} = NavigationExperimental
class Want extends React.Component {
  goDetail = () =&amp;gt; {
    this.props.dispatch(push({
      key: &#39;Want Detail&#39;
    }))
  }
  renderScene = (sceneProps) =&amp;gt; {
    // 我们在这里通过 key 渲染不同组件，这里只是简单展示同一个组件
    return (
      &amp;lt;View style={{flex: 1, marginTop: 64}}&amp;gt;
        &amp;lt;TouchableHighlight onPress={this.goDetail}
          &amp;gt;&amp;lt;Text&amp;gt;haha&amp;lt;/Text&amp;gt;
        &amp;lt;/TouchableHighlight&amp;gt;
      &amp;lt;/View&amp;gt;
    )
  }
  renderOverlay = (sceneProps) =&amp;gt; {
    return (
      &amp;lt;NavigationHeader
        {...sceneProps}
        renderTitleComponent={() =&amp;gt; (
          &amp;lt;NavigationHeader.Title&amp;gt;
            想吃
          &amp;lt;/NavigationHeader.Title&amp;gt;
        )}
        /&amp;gt;
    )
  }
  render () {
    return (
      &amp;lt;NavigationCardStack
        direction=&#39;vertical&#39;
        navigationState={this.props.navigation}
        renderScene={this.renderScene}
        renderOverlay={this.renderOverlay}
        /&amp;gt;
    )
  }
}
const mapStateToProps = (state) =&amp;gt; ({
  navigation: state.navigation
})
export default connect(mapStateToProps)(Want)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，我们就有了一个简陋的页面切换：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/react-native-navigator.gif&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/react-native-navigator.gif&#34; alt=&#34;react-native-navigator&#34; width=&#34;372&#34; class=&#34;alignnone size-full wp-image-18588&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chrome 控制台中的 log 如下：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-22-at-11.16.27.png&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-22-at-11.16.27.png&#34; alt=&#34;Screen Shot 2016-06-22 at 11.16.27&#34; width=&#34;1400&#34; class=&#34;alignnone size-full wp-image-18590&#34; srcset=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-22-at-11.16.27.png 1400w, https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-22-at-11.16.27-300x196.png 300w, https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-22-at-11.16.27-768x502.png 768w, https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-22-at-11.16.27-1024x670.png 1024w, https://www.zfanw.com/blog/wp-content/uploads/2016/06/Screen-Shot-2016-06-22-at-11.16.27-100x65.png 100w&#34; sizes=&#34;(max-width: 1400px) 100vw, 1400px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上面的动画里可以看到，虽然我们没有给 &lt;code&gt;Want Detail&lt;/code&gt; 添加返回键，它默认却是已经有了。但是我们如果点击返回键，是没有效果的。&lt;/p&gt;

&lt;p&gt;我们需要给 &lt;code&gt;NavigationHeader&lt;/code&gt; 添加一个 &lt;code&gt;onNavigateBack&lt;/code&gt;，它定义了用户点击返回键时的效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;NavigationHeader
        {...sceneProps}
        onNavigateBack={
          () =&amp;gt; this.props.dispatch(pop())
        }
        renderTitleComponent={() =&amp;gt; (
          &amp;lt;NavigationHeader.Title&amp;gt;
            想吃
          &amp;lt;/NavigationHeader.Title&amp;gt;
        )}
        /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下图：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/react-native-navigator-with-back.gif&#34;&gt;&lt;img src=&#34;https://www.zfanw.com/blog/wp-content/uploads/2016/06/react-native-navigator-with-back.gif&#34; alt=&#34;react-native-navigator-with-back&#34; width=&#34;372&#34; class=&#34;alignnone size-full wp-image-18595&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个 react-native 下使用 redux 的错误</title>
      <link>https://www.zfanw.com/blog/react-native-redux-expected-a-component-class-got-object-object.html</link>
      <pubDate>Fri, 17 Jun 2016 08:15:47 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/react-native-redux-expected-a-component-class-got-object-object.html</guid>
      <description>&lt;p&gt;我在 react-native 项目里写的 &lt;code&gt;index.ios.js&lt;/code&gt; 文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;
import { AppRegistry } from &#39;react-native&#39;
import rn from &#39;./src/app&#39;
import { Provider } from &#39;react-redux&#39;
import configureStore from &#39;./src/store/configureStore&#39;
const store = configureStore()
const App = () =&amp;gt; {
  return (
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;rn /&amp;gt;
    &amp;lt;/Provider&amp;gt;
    )
}
AppRegistry.registerComponent(&#39;rn&#39;, () =&amp;gt; App)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行时一直报告这个错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Expected a component class, got [object Object].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;App&lt;/code&gt; 当然是一个 Component，问题出在哪？&lt;/p&gt;

&lt;p&gt;问题出在 &lt;code&gt;AppRegistry.registerComponent&lt;/code&gt; 注册的组件名也叫 &lt;code&gt;rn&lt;/code&gt;，而我在前头 &lt;code&gt;import&lt;/code&gt; 了同样的一个 &lt;code&gt;rn&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;修改如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;
import { AppRegistry } from &#39;react-native&#39;
import Root from &#39;./src/app&#39;
import { Provider } from &#39;react-redux&#39;
import configureStore from &#39;./src/store/configureStore&#39;
const store = configureStore()
const App = () =&amp;gt; {
  return (
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;Root /&amp;gt;
    &amp;lt;/Provider&amp;gt;
    )
}
AppRegistry.registerComponent(&#39;rn&#39;, () =&amp;gt; App)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就不再有问题了。&lt;/p&gt;

&lt;p&gt;一个非常简单却很容易忽略的错误。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>redux-saga 回调中执行 put</title>
      <link>https://www.zfanw.com/blog/redux-saga-put-in-callback.html</link>
      <pubDate>Sat, 11 Jun 2016 08:05:11 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/redux-saga-put-in-callback.html</guid>
      <description>&lt;p&gt;在 &lt;a href=&#34;https://github.com/yelouafi/redux-saga&#34;&gt;redux-saga&lt;/a&gt; 下，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postWithLoadingEffect(API.user, user).then(
    (response) =&amp;gt; {
      console.log(response)
      // yield put(userActions.setCurrentUser(response.data))
    }
  ).catch(
    (error) =&amp;gt; {
      console.error(error)
    }
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;yield put&lt;/code&gt; 放在回调中是不会执行的，因为回调函数并不是 generator 函数。&lt;/p&gt;

&lt;p&gt;但这种需求在实际代码里会经常出现。我们可以绕个圈子实现它：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  try {
    let response = yield call(postWithLoadingEffect, API.user, user)
    if (response) {
      console.log(response)
      window.localStorage.setItem(&#39;authToken&#39;, response.meta.jwt)
      yield put(userActions.setCurrentUser(response.data))
    }
  } catch (error) {
    console.error(error)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://yelouafi.github.io/redux-saga/docs/api/index.html#callfn-args&#34;&gt;call&lt;/a&gt; 是 redux-saga 提供的一个 effect，它会执行传递给它的函数。这样我们就取得了结果，可以正常使用 &lt;code&gt;yield put&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但很多时候，我觉得在 saga 中直接使用 &lt;code&gt;dispatch&lt;/code&gt; 会更方便，只是这样 redux-saga 的好处便又丢了 &amp;#8211; 不如回去写 redux-thunk。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>错误分类</title>
      <link>https://www.zfanw.com/blog/different-errors.html</link>
      <pubDate>Thu, 09 Jun 2016 08:41:15 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/different-errors.html</guid>
      <description>&lt;p&gt;​如果你在网页上看到错误提示，它们的来源大致有两种，一种来自前端，一种来自后端。&lt;/p&gt;

&lt;p&gt;比如说有一个邮箱地址的输入框，用户试图提交空值，我们会报告一个前端上的错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;请填写邮箱地址&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 react.js 里，这个错误是一个 &lt;a href=&#34;https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-shouldnt-go-in-state&#34;&gt;computed 值&lt;/a&gt;（计算值 &amp;#8211; 即依赖其它 state 计算出来的）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Email extends React.Component {
  state = {
    email: &#39;&#39;
  }
  render () {
    const computedError = email.trim() === &#39;&#39; ? &#39;请填写邮箱地址&#39; : &#39;&#39;
    return &amp;lt;div&amp;gt;
      &amp;lt;input type=&#39;text&#39; value={this.state.email}/&amp;gt;
      &amp;lt;span&amp;gt;{computedError}&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是因为，&lt;code&gt;state&lt;/code&gt; 多了，代码难以管理，所以有些数据我们要尽量从其它数据中推演，而不是新建一个。&lt;/p&gt;

&lt;p&gt;但上面的示例里，email 地址提交到服务端，还可能返回一种错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;该邮箱地址已经被人注册&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一种错误，并没办法通过 &lt;code&gt;email&lt;/code&gt; 数据推演，我的做法是，新建一个 state 用来存储。不过这类表单数据多了，整个组件就会非常庞大，很容易出错。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>加载中</title>
      <link>https://www.zfanw.com/blog/loading-indicator.html</link>
      <pubDate>Mon, 06 Jun 2016 01:43:29 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/loading-indicator.html</guid>
      <description>&lt;p&gt;在 app 上，我们经常见到“加载中”的图标。这是站在用户的角度看。如果切换到开发者角度，则会有一个疑惑，这个 loading 图标是即刻出现的吗？&lt;/p&gt;

&lt;p&gt;如果 http 响应很快，则一闪而过的 loading 对用户来说，体验并不好。&lt;/p&gt;

&lt;p&gt;可是，我们怎么知道一个响应是快还是慢？毕竟，网络的状况并不可控，一个响应在美国也许很快，在中国却异常的慢。&lt;/p&gt;

&lt;p&gt;一个更友好的解决办法，可能是这样：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;http 请求发起&lt;/li&gt;
&lt;li&gt;100ms 内响应，则不需要调出 loading&lt;/li&gt;
&lt;li&gt;如果 100ms 内还未响应，则调出 loading&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在 &lt;a href=&#34;https://www.nngroup.com/articles/progress-indicators/&#34;&gt;nngroup 进度指示条一文里&lt;/a&gt; ，作者提到一个参考时间：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This indicator should be reserved for actions that take between 2-10 seconds. For anything that takes less than 1 second to load, it is distracting to use a looped animation, because users cannot keep up with what happened and might feel anxious about whatever flashed on the screen.&lt;/p&gt;

&lt;p&gt;如果 1s 内能响应，就不该用循环动画来指示进度，因为用户没法跟上，可能会对屏幕上一闪而过的东西感到焦虑。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以上面的解决办法可以修改为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;http 请求发起&lt;/li&gt;
&lt;li&gt;10s 内响应，则不需要调出 loading&lt;/li&gt;
&lt;li&gt;如果 10s 内未响应，则调出 loading&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;只是这里会有一个问题出现，如果 http 请求在 11s 时响应，则 loading 还是一闪而过。 &amp;#8211; 在 web 的复杂环境下，这近于无解。&lt;/p&gt;

&lt;p&gt;至于代码实现上，我们通常需要封装一个专用的 API 来处理 http 请求。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>redux.js 的盛行</title>
      <link>https://www.zfanw.com/blog/redux-js-prevail.html</link>
      <pubDate>Wed, 01 Jun 2016 02:35:36 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/redux-js-prevail.html</guid>
      <description>&lt;p&gt;在 react.js 里，如果把一个组件写在另一个组件的 &lt;code&gt;render&lt;/code&gt; 方法里，则其它组件要用它的话，我们又要重复一遍代码。所以我们要抽取它，独立成一个组件。可是，这时它的 &lt;code&gt;state&lt;/code&gt; 应该放在哪里？&lt;/p&gt;

&lt;p&gt;如果我们把 &lt;code&gt;state&lt;/code&gt; 放在组件内部，则父组件有读取子组件数据的需求时，父组件内部就要创建一个变量，还要提供给子组件一个回调，这样，同样的 &lt;code&gt;state&lt;/code&gt; 我们会在父、子两个地方实现，则不如 &lt;code&gt;state&lt;/code&gt; 只定义在父组件中，通过 &lt;code&gt;props&lt;/code&gt; 传递给子组件，这样，子组件的功能就比较单一，便于复用。&lt;/p&gt;

&lt;p&gt;但是，又有一个新的问题产生。举一个 Email 组件来说，它可能在登录表单组件里使用，也可能在注册表单组件里使用，这两个父组件的逻辑是不一样的，无法复用，而它们在使用 Email 组件时，却都需要提供给 Email 组件一个变量及一个回调函数 &amp;#8211; 它们在两个父组件中显然又是重复的。&lt;/p&gt;

&lt;p&gt;比如我的一个使用 &lt;a href=&#34;https://github.com/mobxjs/mobx&#34;&gt;mobx&lt;/a&gt; 的注册组件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React, { Component } from &#39;react&#39;
import { observable, action, computed } from &#39;mobx&#39;
import Email from &#39;../common/Email&#39;

@observer
class Register extends Component {
  @observable email = &#39;&#39;
  @computed get emailError () {
    if (this.email.trim() === &#39;&#39;) {
      return &#39;请填写邮箱地址&#39;
    }
    if (!emailRegExp.test(this.email.trim())) {
      return &#39;请填写正确的邮箱地址&#39;
    }
    return &#39;&#39;
  }
  render () {
    return (
      &amp;lt;div&amp;gt;
          &amp;lt;Email email={this.email}
            changeEmail={this.changeEmail}
            emailError={this.emailError}
            /&amp;gt;
      &amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在登录组件中，几乎一模一样的代码，我又要重复一遍。&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t repeat yourself 说起来当然是简单，但做起来并不容易。就说我们上面所做的演进，目的是满足需求的同时消除重复，但结果我们只是把 repeat 从一个地方迁移到了另一个地方。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://redux.js.org/index.html&#34;&gt;Redux&lt;/a&gt; 能解决我们的问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将父组件中重复的变量存储到 store 中&lt;/li&gt;
&lt;li&gt;回调函数拆为 reducer + action&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样，我们就不必在多个父组件里重复变量及回调函数。但是，因为我们把变量存储在 store 里，把回调函数拆为 reducer + action，则我们在使用时，就又多了一个读取过程，在 redux.js 里，这通过 &lt;a href=&#34;https://github.com/reactjs/react-redux/blob/master/docs/api.md#api&#34;&gt;react-redux&lt;/a&gt; 实现。&lt;/p&gt;

&lt;p&gt;当然，像 redux 这样提取父组件中重复变量然后复用的做法并不能满足所有需求。很多时候，我们确实需要两份数据，这时，redux &lt;a href=&#34;https://github.com/reactjs/redux/issues/822#issuecomment-186614362&#34;&gt;也没有&lt;/a&gt;好的&lt;a href=&#34;https://github.com/reactjs/redux/issues/897#issuecomment-148233789&#34;&gt;解决办法&lt;/a&gt;，因为 action 没法复用，reducer 也没法复用。&lt;/p&gt;

&lt;p&gt;在 redux 的定义里，组件有两种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Container component&lt;/li&gt;
&lt;li&gt;Presentational component&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的例子里，Email 组件是 Presentational component，要做到它的复用十分容易，而登录或注册组件则属于 Container component，它们的复用性就非常低，代码上的重复也很难避免 &amp;#8211; 目前我还没看到较好的解决办法。&lt;/p&gt;

&lt;p&gt;如果你有，欢迎留言：）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React Native 下使用 emoji 的 Invalid hex-character pattern in string 问题</title>
      <link>https://www.zfanw.com/blog/react-native-emoji-invalid-hex-character-pattern-in-string.html</link>
      <pubDate>Sat, 07 May 2016 08:32:23 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/react-native-emoji-invalid-hex-character-pattern-in-string.html</guid>
      <description>&lt;p&gt;我在 react native 项目里用到了 emoji，比如笑脸 😁，当然，我不是直接使用表情，而是使用了 unicode。😁 的 unicode 值是 &lt;code&gt;U+1F601&lt;/code&gt;，在 react native 项目里，代码写成了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Text&amp;gt;{&amp;quot;\u{1F601}&amp;quot;}&amp;lt;/Text&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;项目在模拟器下，或 &lt;code&gt;Debug&lt;/code&gt; 模式下的设备上跑，都不会有问题，但是在 &lt;code&gt;Release&lt;/code&gt; 模式下跑设备上，就会出现问题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sat, 07 May 2016 07:02:29 GMT ReactNativePackager:SocketServer server got ipc message { type: &#39;createSocketServer&#39;,
  data: 
   { sockPath: &#39;/var/folders/xk/y5j8r_dd0qg9ckymx96qd81c0000gn/T/react-packager-e36f208f7a835e0174b01026652af058&#39;,
     options: 
      { projectRoots: [Object],
        assetRoots: [Object],
        blacklistRE: [Object],
        transformModulePath: &#39;/Users/sam/Documents/job/fz-app/node_modules/react-native/packager/transformer.js&#39; } } }
[3:02:30 PM] &amp;lt;START&amp;gt; Building Dependency Graph
[3:02:30 PM] &amp;lt;START&amp;gt; Crawling File System
Sat, 07 May 2016 07:02:30 GMT ReactNativePackager:SocketServer Process 45912 listening on socket path /var/folders/xk/y5j8r_dd0qg9ckymx96qd81c0000gn/T/react-packager-e36f208f7a835e0174b01026652af058 for server with options {&amp;quot;projectRoots&amp;quot;:[&amp;quot;/Users/sam/Documents/job/fz-app&amp;quot;],&amp;quot;assetRoots&amp;quot;:[&amp;quot;/Users/sam/Documents/job/fz-app&amp;quot;],&amp;quot;blacklistRE&amp;quot;:{},&amp;quot;transformModulePath&amp;quot;:&amp;quot;/Users/sam/Documents/job/fz-app/node_modules/react-native/packager/transformer.js&amp;quot;,&amp;quot;nonPersistent&amp;quot;:true}
Sat, 07 May 2016 07:02:30 GMT ReactNativePackager:SocketServer succesfully created server
Sat, 07 May 2016 07:02:30 GMT ReactNativePackager:SocketServer connection to server 45912
Sat, 07 May 2016 07:02:30 GMT ReactNativePackager:SocketServer got request { type: &#39;buildBundle&#39;,
  data: 
   { entryFile: &#39;index.ios.js&#39;,
     dev: false,
     minify: true,
     platform: &#39;ios&#39; },
  id: &#39;xru0e36&#39; }
[3:02:30 PM] &amp;lt;START&amp;gt; find dependencies
[3:02:36 PM] &amp;lt;END&amp;gt;   Crawling File System (6361ms)
[3:02:36 PM] &amp;lt;START&amp;gt; Building in-memory fs for JavaScript
[3:02:37 PM] &amp;lt;END&amp;gt;   Building in-memory fs for JavaScript (290ms)
[3:02:37 PM] &amp;lt;START&amp;gt; Building in-memory fs for Assets
[3:02:37 PM] &amp;lt;END&amp;gt;   Building in-memory fs for Assets (204ms)
[3:02:37 PM] &amp;lt;START&amp;gt; Building Haste Map
[3:02:37 PM] &amp;lt;START&amp;gt; Building (deprecated) Asset Map
[3:02:37 PM] &amp;lt;END&amp;gt;   Building (deprecated) Asset Map (105ms)
[3:02:37 PM] &amp;lt;END&amp;gt;   Building Haste Map (229ms)
[3:02:37 PM] &amp;lt;END&amp;gt;   Building Dependency Graph (7105ms)
[3:02:38 PM] &amp;lt;END&amp;gt;   find dependencies (7604ms)
Sat, 07 May 2016 07:02:45 GMT ReactNativePackager:SocketServer request error { message: &#39;Invalid hex-character pattern in string&#39;,
  filename: 0,
  line: 39,
  col: 1,
  pos: 1704,
  stack: &#39;Error\n    at new JS_Parse_Error (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1526:18)\n    at js_error (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1534:11)\n    at parse_error (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1647:9)\n    at hex_bytes (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1704:17)\n    at read_escaped_char (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1688:49)\n    at eval (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1730:27)\n    at eval (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1870:24)\n    at Object.next_token [as input] (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:1897:36)\n    at next (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:2012:25)\n    at expect_token (eval at &amp;lt;anonymous&amp;gt; (/Users/sam/Documents/job/fz-app/node_modules/uglify-js/tools/node.js:22:1), &amp;lt;anonymous&amp;gt;:2045:20)&#39; }
Sat, 07 May 2016 07:02:45 GMT ReactNativePackager:SocketServer request finished error
Worker Farm: Received message for unknown index for existing child. This should not happen!
Sat, 07 May 2016 07:03:16 GMT ReactNativePackager:SocketServer server dying 45912
Sat, 07 May 2016 07:03:16 GMT ReactNativePackager:SocketServer exit code: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重点在这一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sat, 07 May 2016 07:02:45 GMT ReactNativePackager:SocketServer request error { message: &#39;Invalid hex-character pattern in string&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么 &lt;code&gt;Debug&lt;/code&gt; 模式下没有问题？这是因为 &lt;code&gt;Release&lt;/code&gt; 模式下，会使用 uglifyjs 压缩代码，碰上 &lt;code&gt;\u{1F601}&lt;/code&gt; 导致的。&lt;/p&gt;

&lt;p&gt;解法有两个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;直接使用表情字符 😁&lt;/li&gt;
&lt;li&gt;或者使用 &lt;a href=&#34;https://github.com/jorilallo/react-native-emoji&#34;&gt;react-native-emoji&lt;/a&gt; 这样的第三方库。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SSH 远程端口转发</title>
      <link>https://www.zfanw.com/blog/ssh-remote-forwarding.html</link>
      <pubDate>Mon, 07 Mar 2016 06:28:37 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/ssh-remote-forwarding.html</guid>
      <description>&lt;p&gt;我在&lt;a href=&#34;https://www.zfanw.com/blog/telegram-bot-with-nodejs.html&#34; title=&#34;使用 hapi.js 开发 telegram 机器人&#34;&gt;开发 Telegram bot&lt;/a&gt; 时，是先在本地写好代码，上传到服务器再测试的。因为 telegram 的 &lt;a href=&#34;https://core.telegram.org/bots/api#setwebhook&#34;&gt;setWebhook&lt;/a&gt; 指定的网址是线上的。这一点，与微信公众号开发时的&lt;a href=&#34;https://mp.weixin.qq.com/wiki/8/f9a0b8382e0b77d87b3bcc1ce6fbc104.html#.E7.AC.AC.E4.B8.80.E6.AD.A5.EF.BC.9A.E5.A1.AB.E5.86.99.E6.9C.8D.E5.8A.A1.E5.99.A8.E9.85.8D.E7.BD.AE&#34; title=&#34;微信开发者文档&#34;&gt;接入服务器配置&lt;/a&gt;是一样的。&lt;/p&gt;

&lt;p&gt;当然，这样谈不上什么开发效率。&lt;/p&gt;

&lt;p&gt;网上有些端口映射的工具，比如 ngrok，但 SSH 本身就带了这样一个工具。&lt;/p&gt;

&lt;p&gt;假设我 telegram webhook 地址是 &lt;a href=&#34;https://www.zfanw.com/telegram，服务器运行在&#34;&gt;https://www.zfanw.com/telegram，服务器运行在&lt;/a&gt; 3344 端口，本地的开发环境运行在 localhost:3344 地址上，则运行如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -R 3344:localhost:3344 admin@zfanw.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以完成远程端口转发到本地。这样，telegram 往 &lt;a href=&#34;https://www.zfanw.com/telegram&#34;&gt;https://www.zfanw.com/telegram&lt;/a&gt; 地址 POST 的数据都会被转发到我本地上的 localhost:3344。&lt;/p&gt;

&lt;p&gt;等等，要怎么断掉转发？首先，SSH 连接并不稳定，很容易就断掉。如果万幸不掉，则输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;回车即可退出。&lt;/p&gt;

&lt;p&gt;当然，我们也可以按 &lt;kbd&gt;CTRL - C&lt;/kbd&gt; 强制退出。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js 开发 Telegram bot</title>
      <link>https://www.zfanw.com/blog/telegram-bot-with-nodejs.html</link>
      <pubDate>Sat, 27 Feb 2016 14:16:36 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/telegram-bot-with-nodejs.html</guid>
      <description>&lt;p&gt;昨天 Ingress 厦门的 telegram 群里大家在逗机器人，于是自己也想开发一个玩。&lt;/p&gt;

&lt;p&gt;首先，在 telegram 里找 &lt;a href=&#34;https://telegram.me/botfather&#34;&gt;@BotFather&lt;/a&gt; ，跟它对话，让它创建一个 bot，并且讨要一个 token，token 大概长这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，我们与 bot 对话，或是在带了 bot 玩的群里说话，bot 都能够读取到，它相当于中间的传话者，服务器与 bot 对话的方式有两种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://core.telegram.org/bots/api#getupdates&#34;&gt;getUpdates&lt;/a&gt; &amp;#8211; 我们的服务器主动读取&lt;/p&gt;

&lt;p&gt;拿上面那个假 token 说，GET &lt;code&gt;https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/getUpdates&lt;/code&gt; 就可以得到数据。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://core.telegram.org/bots/api#setwebhook&#34;&gt;setWebhook&lt;/a&gt; &amp;#8211; telegram bot 在得到消息后，会主动往我们通过 setWebhook 接口设定的服务器 url POST 数据。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setWebhook&lt;/code&gt; 的用法是，在浏览器中访问 &lt;code&gt;https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/setWebhook?url=https://example.org&lt;/code&gt;，页面会返回结果：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{&amp;#8220;ok&amp;#8221;:true,&amp;#8221;result&amp;#8221;:true,&amp;#8221;description&amp;#8221;:&amp;#8221;Webhook was set&amp;#8221;}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;返回结果表示 Webhook 设定成功，之后 telegram 就会往 &lt;a href=&#34;https://example.org&#34;&gt;https://example.org&lt;/a&gt; 地址 POST 新数据。&lt;/p&gt;

&lt;p&gt;webhook 的地址必需是 https 的，telegram 文档中有提到证书 &amp;#8211; 除非你的网站是自己签名的，否则可以不理会该参数。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外，&lt;code&gt;getUpdates&lt;/code&gt; 方法与 &lt;code&gt;setWebhook&lt;/code&gt; 只能二选一，不能同时使用。&lt;/p&gt;

&lt;p&gt;我用的 node.js 框架是 &lt;a href=&#34;http://hapijs.com/&#34;&gt;hapi.js&lt;/a&gt;，整个代码大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const Hapi = require(&#39;hapi&#39;)
const ajax = require(&#39;request&#39;)

// Create a server with a host and port
const server = new Hapi.Server()
const token = require(&#39;./token&#39;)
const api = `https://api.telegram.org/bot${token}/`

server.connection({
  host: &#39;localhost&#39;,
  port: 8888
})

// Add the route
server.route({
  method: &#39;GET&#39;,
  path: &#39;/&#39;,
  handler: function (request, reply) {
    return reply(&#39;hello world&#39;)
  }
})
server.route({
  method: &#39;POST&#39;,
  path: &#39;/&#39; + token,
  handler: function (req, reply) {
    reply(&#39;done&#39;)
    const message = req.payload.message
    const chat_id = message.from.id
    ajax.post(api + &#39;sendMessage&#39;,
          {
            form: {chat_id: chat_id, text: message.text}
          }, (err, response, body) =&amp;gt; {
            if (err) console.log(err)
            console.log(&#39;everything is ok: &#39;, body)
          })
  }
})

// Start the server
server.start((err) =&amp;gt; {
  if (err) {
    throw err
  }
  console.log(&#39;Server running at:&#39;, server.info.uri)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把代码上传到 vps 上，通过 &lt;a href=&#34;http://pm2.keymetrics.io/docs/usage/quick-start/&#34;&gt;pm2&lt;/a&gt; 启动，并配置 Apache，将&lt;a href=&#34;https://www.zfanw.com/blog/apache-proxy-node-js.html&#34;&gt;指定路由的流量全部转发给 node.js 服务器上&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache 代理 Node.js 服务器</title>
      <link>https://www.zfanw.com/blog/apache-proxy-node-js.html</link>
      <pubDate>Sun, 07 Feb 2016 04:05:35 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/apache-proxy-node-js.html</guid>
      <description>&lt;p&gt;我在&lt;a href=&#34;https://www.zfanw.com/blog/linode-vps-install-ghost.html#_Apache_Ghost&#34;&gt;安装 Ghost 博客&lt;/a&gt;时，需要转发 Apache 请求给 node.js 服务器，当时为了快速搞定，找了些资料，拷了些配置，看它可以运行，也就没再搭理。&lt;/p&gt;

&lt;p&gt;说来，我根本不知道为什么要加个 &lt;code&gt;ProxyPassReverse&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;前些天写的 blog &lt;a href=&#34;https://www.zfanw.com/blog/react-js-server-render.html&#34;&gt;React.js 服务端渲染&lt;/a&gt;里，同样需要让示例在服务器上运行。与安装 Ghost 时唯一的区别是，我的 blog 现在已经换成了 https。&lt;/p&gt;

&lt;p&gt;所以配置过程是这样的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开 &lt;code&gt;/etc/httpd/conf.d/vhost.conf&lt;/code&gt; 文件，这是 CentOS 系统下 Apache2 的配置文件路径，添加以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:443&amp;gt;
 # 其它内容，这里不显示
  &amp;lt;Location /react/server-render&amp;gt;
    ProxyPass http://localhost:2222
    ProxyPassReverse http://localhost:2222
 &amp;lt;/Location&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/react/react-render&lt;/code&gt; 是我存放项目的路径，3000 端口是 node.js 运行的服务器端口 &amp;#8211; 我使用了 &lt;a href=&#34;https://github.com/Unitech/pm2&#34;&gt;PM2&lt;/a&gt; 来管理生产环境中的 node.js 项目。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sudo service httpd restart&lt;/code&gt; 重启 Apache 服务器。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以 &lt;code&gt;ProxyPassReverse&lt;/code&gt; 做什么用的？还是看&lt;a href=&#34;https://httpd.apache.org/docs/2.4/mod/mod_proxy.html#proxypassreverse&#34;&gt;官方文档&lt;/a&gt;吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>React.js 服务端渲染</title>
      <link>https://www.zfanw.com/blog/react-js-server-render.html</link>
      <pubDate>Fri, 05 Feb 2016 14:01:43 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/react-js-server-render.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#renderToString&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; renderToString&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 准备工作&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 按部就班&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_bundlejs&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 构建 bundle.js&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    是否多此一举？
  &lt;/p&gt;
  
  &lt;p&gt;
    毕竟，从服务端渲染走到客户端渲染这一步，前端界可花了不少时间。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果你对服务端渲染的必要性心存疑虑，不妨先看看&lt;a href=&#34;http://alistapart.com/article/interaction-is-an-enhancement&#34;&gt;这一篇&lt;/a&gt;文章。
  &lt;/p&gt;
  
  &lt;p&gt;
    但我还是在这儿简单介绍下，为什么这些客户端渲染的框架们要踏入服务端渲染的领域。
  &lt;/p&gt;
  
  &lt;p&gt;
    在客户端渲染时，我们的页面通常很简洁，比如，你可能见过这样的 HTML 文件：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;这是陈三&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script src=&#39;http://code.jquery.com/jquery-2.1.4.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&#39;http://example.com/test.bundle.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    陈三在打开这个页面后，浏览器会加载：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      jquery-2.1.4.min.js
    &lt;/li&gt;
    &lt;li&gt;
      test.bundle.js
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    在这两个文件加载完成并执行以前，陈三只能看到一片空白。等了十来秒后，页面还没有动静，陈三找来专业人士，哦，jquery-2.1.4.min.js 文件不知道怎么回事，加载失败，导致 test.bundle.js 无法构建 HTML 代码。
  &lt;/p&gt;
  
  &lt;p&gt;
    实际上：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      任何 js 代码问题都可能导致陈三看不到页面
    &lt;/li&gt;
    &lt;li&gt;
      搜索引擎可能无法索引这样的页面（对，&lt;a href=&#34;https://googlewebmastercentral.blogspot.com/2015/10/deprecating-our-ajax-crawling-scheme.html&#34;&gt;Google 可以做到&lt;/a&gt;，但不是所有搜索引擎都是 Google）
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    那么，我们可以做得更好吗？
  &lt;/p&gt;
  
  &lt;p&gt;
    这正是 Ember.js、Angular.js 等努力的方向。这一篇，则是介绍 react.js 在这方面的情况。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;renderToString&#34;&gt;renderToString&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyrenderToString&#34; href=&#34;#renderToString&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    react 官网文档在服务端渲染上&lt;a href=&#34;https://facebook.github.io/react/docs/top-level-api.html#reactdomserver&#34;&gt;着墨不多&lt;/a&gt;：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      Render a ReactElement to its initial HTML. This should only be used on the server. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.
    &lt;/p&gt;
    
    &lt;p&gt;
      If you call ReactDOM.render() on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    简单说，&lt;code&gt;renderToString&lt;/code&gt; 方法在服务器上先渲染出组件的 HTML 结构，客户端上 react 在执行到 &lt;code&gt;render()&lt;/code&gt; 方法时，会检查是否有服务端渲染过的代码，如果有，则仅仅往上添加事件处理器。我们不妨这样认为，原来在客户端要执行的 js 代码被拆成两个部分：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      渲染 HTML 结构
    &lt;/li&gt;
    &lt;li&gt;
      往 HTML 结构上附加事件处理器
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    前者在服务端上完成，后者在客户端上完成。
  &lt;/p&gt;
  
  &lt;p&gt;
    那么，我们要怎么入手 react.js 服务端渲染？react.js 初期开发者 Pete Hunt 给了些&lt;a href=&#34;https://github.com/petehunt/react-howto#learning-server-rendering&#34;&gt;建议&lt;/a&gt;：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      Server rendering still requires a lot of tooling to get right. Since it transparently supports React components written without server rendering in mind, you should build your app first and worry about server rendering later. You won&amp;#8217;t need to rewrite all of your components to support it.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    要做服务端渲染，我们要干的事还很多，但通常可以先构建 app，再来关心服务端渲染。我们并不会需要全部重写所有的组件。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;准备工作&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    我们要先解决以下问题：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;
        server 端用什么框架？
      &lt;/p&gt;
      
      &lt;p&gt;
        对前端开发来说，基于 node.js 的框架通常更易于上手，所以这里选用了 &lt;a href=&#34;http://expressjs.com/&#34;&gt;expressjs&lt;/a&gt;。
      &lt;/p&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        要构建出前端使用的 js 文件，要用什么工具？
      &lt;/p&gt;
      
      &lt;p&gt;
        不论是 requirejs 还是 browserify 或 jspm 都可以用，这里使用 webpack。
      &lt;/p&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        react.js 在后端 render 时，如果要用 jsx 语法，要怎么解决？
      &lt;/p&gt;
      
      &lt;p&gt;
        使用 &lt;a href=&#34;https://www.zfanw.com/blog/babel-6.html#babel-register&#34;&gt;babel-register&lt;/a&gt;。
      &lt;/p&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        如果我想用 es2015 语法后 express.js 程序，要怎么做？
      &lt;/p&gt;
      
      &lt;p&gt;
        同第 3 点。
      &lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    接下来就是安装 react、react-dom、babel，并且配置 babel，&lt;a href=&#34;https://github.com/chenxsan/react-server-render/tree/810b2cd13ccdc9d59784e97f1937efe949de21ff&#34;&gt;点击查看项目代码&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    好了，我们可以开始写代码了。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;按部就班&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    首先，我们添加一个 Home 组件，代码如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;
export default class Home extends React.Component {
  render () {
    return (&amp;lt;div&amp;gt;
              hello from 陈三。
            &amp;lt;/div&amp;gt;)
  }
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这个组件目前只是渲染一段 div。
  &lt;/p&gt;
  
  &lt;p&gt;
    接下来是在 app.js 文件中引用它并渲染成 HTML：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;import express from &#39;express&#39;
import React from &#39;react&#39;
import ReactDOM from &#39;react-dom/server&#39;
import Home from &#39;./components/Home&#39;
let app = express()
app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  res.send(ReactDOM.renderToString(React.createFactory(Home)()))
})
app.listen(3000, () =&amp;gt; {
  console.log(&#39;listen on 3000&#39;)
})

&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这里用到的两个方法：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring&#34;&gt;renderToString&lt;/a&gt; &amp;#8211; 将组件渲染成字符串。
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://facebook.github.io/react/docs/top-level-api.html#react.createfactory&#34;&gt;createFactory&lt;/a&gt; &amp;#8211; 生成一个组件工厂方法，用于生成组件。之所以用它，是因为 renderToString 接受的参数是 ReactElement element，所以我们不能使用 jsx 的形式 &lt;code&gt;&amp;lt;Home /&amp;gt;&lt;/code&gt;。
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    执行 &lt;code&gt;node index.js&lt;/code&gt; 命令，可以在 http://localhost:3000 网址看到：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      hello from 陈三。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    点击&lt;a href=&#34;https://github.com/chenxsan/react-server-render/tree/82ab7be8078743c31fa2e92cf62d0ffd9af69ad6&#34;&gt;查看这一步的项目代码&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    目前为止，我们还没给组件添加任何交互行为，比如点击一下，&lt;strong&gt;字体颜色变化&lt;/strong&gt;。下面我们就来尝试给 Home 组件添加这一交互。
  &lt;/p&gt;
  
  &lt;p&gt;
    我们将 Home 组件改造如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;
export default class Home extends React.Component {
  constructor (props) {
    super(props)
    this.clickToChangeColor = this.clickToChangeColor.bind(this)
    this.state = {
      color: &#39;#&#39; + (Math.random() * 0xFFFFFF &amp;lt;&amp;lt; 0).toString(16)
    }
  }
  clickToChangeColor (e) {
    this.setState({
      color: &#39;#&#39; + (Math.random() * 0xFFFFFF &amp;lt;&amp;lt; 0).toString(16)
    })
  }
  render () {
    return (&amp;lt;div onClick={this.clickToChangeColor} style={{color: this.state.color}}&amp;gt;
              hello from 陈三。
            &amp;lt;/div&amp;gt;)
  }
}

&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    现在点击 div 块，字体颜色并不会出现任何变化，因为，目前为止，我们只是在后端渲染了 HTML 结构，事件绑定等工作，要在前端上完成。
  &lt;/p&gt;
  
  &lt;p&gt;
    但现在，我们还只是简单的生成一个页面，只有一个 &lt;code&gt;div&lt;/code&gt; 块，没有 &lt;code&gt;html&lt;/code&gt; 标签，没有 &lt;code&gt;meta&lt;/code&gt; 标签，也没有引用任何脚本。
  &lt;/p&gt;
  
  &lt;p&gt;
    我们需要一个完整的页面，这里，使用 &lt;a href=&#34;http://expressjs.com/en/guide/using-template-engines.html&#34;&gt;jade 模板引擎&lt;/a&gt;来生成页面。
  &lt;/p&gt;
  
  &lt;p&gt;
    我们在 views 目录下增加一个 &lt;code&gt;index.jade&lt;/code&gt; 模板：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;doctype html
html
    head
        title=&#39;react 服务端渲染&#39;
        meta(charset=&#39;utf-8&#39;)
    body
        #root!= react
        script(src=&#39;/bundle.js&#39;)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    app.js 内容修改成：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;import express from &#39;express&#39;
import React from &#39;react&#39;
import ReactDOM from &#39;react-dom/server&#39;
import Home from &#39;./components/Home&#39;
let app = express()
app.use(express.static(&#39;public&#39;))
app.set(&#39;views&#39;, &#39;./views&#39;)
app.set(&#39;view engine&#39;, &#39;jade&#39;)
let html = ReactDOM.renderToString(React.createFactory(Home)())
app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  res.render(&#39;index&#39;, {react: html})
})
app.listen(3000, () =&amp;gt; {
  console.log(&#39;listen on 3000&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    目前为止，我们还没有一个叫 &lt;code&gt;bundle.js&lt;/code&gt; 的文件，它将由 webpack 来构建。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_bundlejs&#34;&gt;构建 bundle.js&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_bundlejs&#34; href=&#34;#_bundlejs&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    如果对 webpack 的构建不熟悉，可以先看看 &lt;a href=&#34;https://www.zfanw.com/blog/webpack-tutorial.html&#34;&gt;我写的 webpack 教程&lt;/a&gt;。这里跳过安装 webpack、babel 等步骤。
  &lt;/p&gt;
  
  &lt;p&gt;
    上面说到的 app.js 是服务端的入口文件，前端上同样需要一个入口，且把它叫 client.js：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;import Home from &#39;./components/Home&#39;
import ReactDOM from &#39;react-dom&#39;
import React from &#39;react&#39;
ReactDOM.render(&amp;lt;Home /&amp;gt;, document.getElementById(&#39;root&#39;))
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    另外，我们再定义一个 webpack.config.js 文件：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;var path = require(&#39;path&#39;)
module.exports = {
  entry: &#39;./src/client&#39;,
  output: {
    filename: &#39;bundle.js&#39;,
    path: path.join(__dirname, &#39;public&#39;)
  },
  module: {
    loaders: [
      {test: /\.js$/,
        loaders: [&#39;babel?presets[]=react,presets[]=es2015&#39;],
        include: [path.join(__dirname, &#39;src&#39;)]
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    在项目根目录下执行 &lt;code&gt;webpack&lt;/code&gt;，我们就会得到 &lt;code&gt;public/bundle.js&lt;/code&gt;，刷新我们的主页，点击 div 就能看到文字的颜色在改变了。
  &lt;/p&gt;
  
  &lt;p&gt;
    就这样，我们完成了一趟轻松、简单的 react.js 服务端渲染之旅。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果对完整的代码有兴趣，请点击 &lt;a href=&#34;https://github.com/chenxsan/react-server-render&#34;&gt;github 上的 react-server-render 仓库&lt;/a&gt;，还可以点击&lt;a href=&#34;https://www.zfanw.com/react/server-render/&#34;&gt;示例&lt;/a&gt;查看最终效果。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>babel 6 教程</title>
      <link>https://www.zfanw.com/blog/babel-6.html</link>
      <pubDate>Fri, 29 Jan 2016 10:25:05 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/babel-6.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#babel-cli&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; babel-cli&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#babel&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; babel 插件&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 预置套餐&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#babel-polyfill&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; babel-polyfill&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#babel-runtime&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; babel-runtime&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#webpack_babel-loader&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;6&lt;/span&gt; webpack 中定义 babel-loader&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#babel-register&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;7&lt;/span&gt; babel-register&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;8&lt;/span&gt; 扩展阅读&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    babel 5.x -&gt; 6.x 的变化非常大，许多模块分离出去，只是一些文档还语焉不详，这里略作整理。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;babel-cli&#34;&gt;babel-cli&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heybabel-cli&#34; href=&#34;#babel-cli&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    如果你用过 CoffeeScript，或 TypeScript，那你对它们的编译过程一定很熟悉，&lt;a href=&#34;https://babeljs.io/docs/usage/cli/&#34;&gt;babel-cli&lt;/a&gt; 模块同样也是一个编译的作用。
  &lt;/p&gt;
  
  &lt;p&gt;
    比如有一个 test.js 文件，内容如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;let fun = () =&amp;gt; console.log(&#39;babel&#39;)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    那么执行 &lt;code&gt;babel test.js&lt;/code&gt;，会输出以下内容：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&#34;use strict&#34;;

var fun = function fun() {
  return console.log(&#39;babel&#39;);
};
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    除了 &lt;code&gt;babel&lt;/code&gt; 命令外，babel-cli 包另有一个 &lt;code&gt;babel-node&lt;/code&gt; 命令，它近似于 node，只不过它在运行代码前会预先编译 ES2015 的代码。
  &lt;/p&gt;
  
  &lt;p&gt;
    不论是 &lt;code&gt;babel&lt;/code&gt; 命令还是 &lt;code&gt;babel-node&lt;/code&gt; 命令，我们都可以通过命令行参数修改它们的行为，还可以通过新建一个 &lt;code&gt;.babelrc&lt;/code&gt; 文件来配置。
  &lt;/p&gt;
  
  &lt;p&gt;
    但以上是 babel 5.x 的用法。
  &lt;/p&gt;
  
  &lt;p&gt;
    如果在 babel 6 里，执行 &lt;code&gt;babel test.js&lt;/code&gt;，只会输出原样的文本，因为 &lt;code&gt;babel&lt;/code&gt; 不再包含任何 transform 功能，babel 6 里把它们作为插件（plugin）分割出去，需要我们自己定义，见下文说明。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;babel&#34;&gt;babel 插件&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heybabel&#34; href=&#34;#babel&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    在 babel 6 里，要转换 ES2015 的代码，需要自己配置插件，比如上面的示例：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;let fun = () =&amp;gt; console.log(&#39;babel&#39;)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    我们执行 &lt;code&gt;babel test.js&lt;/code&gt;，babel 不会对文件做任何转换。我们需要一个 &lt;a href=&#34;http://babeljs.io/docs/plugins/transform-es2015-arrow-functions/&#34;&gt;ES2015 arrow functions transform&lt;/a&gt; 插件。
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;
        安装插件
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;npm install babel-plugin-transform-es2015-arrow-functions
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        在目录下创建一个 .babelrc 文件，用于配置 babel，添加如下内容：
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;{
  &#34;plugins&#34;: [&#34;transform-es2015-arrow-functions&#34;]
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        再执行 &lt;code&gt;babel test.js&lt;/code&gt;，我们得到如下转换结果：
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;let fun = function () {
  return console.log(&#39;babel&#39;);
};
&lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;
        基本上 ES2015/ES7 的各种功能，babel 都提供了相应的插件用于转换，但如果我们要一个一个配置 &amp;#8211; 那就太恼人了。所以 babel 还提供了一个方法：presets。
      &lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;预置套餐&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    我们不妨把 presets 理解为套餐，不同套餐有不同的插件组合，比如 &lt;a href=&#34;http://babeljs.io/docs/plugins/preset-es2015/&#34;&gt;ES2015 preset&lt;/a&gt; 里打包了所有用于转换 ES2015 代码的插件，&lt;a href=&#34;http://babeljs.io/docs/plugins/preset-react/&#34;&gt;React preset&lt;/a&gt; 则打包了转换 react.js jsx 语法的插件。它们的用法同上面一致：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;
        安装 preset
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;npm install babel-preset-es2015
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        配置 .babelrc 文件
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;{
  &#34;presets&#34;: [&#34;es2015&#34;]
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        再执行 &lt;code&gt;babel test.js&lt;/code&gt;，我们会得到与 babel 5.x 一样的转换结果：
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;
var fun = function fun() {
  return console.log(&#39;babel&#39;);
};
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;babel-polyfill&#34;&gt;babel-polyfill&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heybabel-polyfill&#34; href=&#34;#babel-polyfill&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    babel 虽然可以转换各种 ES2015 语法及 jsx，但浏览器未提供原生支持的许多功能还是需要 polyfill，比如 Promise。
  &lt;/p&gt;
  
  &lt;p&gt;
    我们只要在代码中引入 babel-polyfill 就可以模拟出一个 ES2015 的环境，用法如下：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;
        安装 &lt;code&gt;babel-polyfill&lt;/code&gt;
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;npm install babel-polyfill --save
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        在入口文件中引用：
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;import babel-polyfill
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;babel-runtime&#34;&gt;babel-runtime&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heybabel-runtime&#34; href=&#34;#babel-runtime&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    与 babel-polyfill 一样，babel-runtime 的作用也是模拟 ES2015 环境。只不过，babel-polyfill 是针对全局环境的，引入它，我们的浏览器就好像具备了规范里定义的完整的特性 &amp;#8211; 虽然原生并未实现。
  &lt;/p&gt;
  
  &lt;p&gt;
    babel-runtime 更像是分散的 polyfill 模块，我们可以在自己的模块里单独引入，比如 &lt;code&gt;require(‘babel-runtime/core-js/promise’)&lt;/code&gt; ，它们不会在全局环境添加未实现的方法，只是，这样手动引用每个 polyfill 会非常低效。我们借助 &lt;a href=&#34;http://babeljs.io/docs/plugins/transform-runtime/&#34;&gt;Runtime transform&lt;/a&gt; 插件来自动化处理这一切。
  &lt;/p&gt;
  
  &lt;p&gt;
    至于要用 babel-polyfill 还是 babel-runtime，则需要根据具体需求。举个例子，如果一个库里引用了 babel-polyfill，别人的库也引用了 babel-polyfill，我们很可能会跑两个 babel-polyfill 实例，这里，使用 babel-runtime 会更合适。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;webpack_babel-loader&#34;&gt;webpack 中定义 babel-loader&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heywebpack_babel-loader&#34; href=&#34;#webpack_babel-loader&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    在 &lt;code&gt;webpack.config.js&lt;/code&gt; 里这样定义：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;module: {
  loaders:  [
    {
      test: /\.js/,
      loader: &#39;babel?presets[]=es2015,presets[]=react,plugins[]=transform-runtime&#39;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;babel-register&#34;&gt;babel-register&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heybabel-register&#34; href=&#34;#babel-register&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    &lt;a href=&#34;https://babeljs.io/docs/usage/require/&#34;&gt;babel-register&lt;/a&gt; 是放在 node 里使用的。它的作用是替代 node 的 &lt;code&gt;require&lt;/code&gt; 命令，与 node 自身的 &lt;code&gt;require&lt;/code&gt; 不同，它可以加载 es2015、jsx 等类型文件。
  &lt;/p&gt;
  
  &lt;p&gt;
    用法如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;require(&#39;babel-register&#39;)({presets: [&#39;es2015&#39;, &#39;react&#39;]})
require(&#39;./app&#39;)
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这样我们在 app 文件中就可以使用 es2015 与 jsx 语法了。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;扩展阅读&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;https://medium.com/@jcse/clearing-up-the-babel-6-ecosystem-c7678a314bf3#a7d5&#34;&gt;Clearing up the Babel 6 Ecosystem&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>