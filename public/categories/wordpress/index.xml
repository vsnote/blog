<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wordpress on 陈三</title>
    <link>https://www.zfanw.com/blog/categories/wordpress/</link>
    <description>Recent content in Wordpress on 陈三</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 14 Nov 2014 05:24:37 +0000</lastBuildDate>
    <atom:link href="https://www.zfanw.com/blog/categories/wordpress/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>WordPress 插件更新失败</title>
      <link>https://www.zfanw.com/blog/wordpress-fail-to-update-plugin.html</link>
      <pubDate>Fri, 14 Nov 2014 05:24:37 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-fail-to-update-plugin.html</guid>
      <description>

&lt;p&gt;在我升级 WordPress 插件时，碰到如下错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Downloading update from &lt;a href=&#34;https://downloads.wordpress.org/plugin/akismet.3.0.3.zip…&#34;&gt;https://downloads.wordpress.org/plugin/akismet.3.0.3.zip…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unpacking the update…&lt;/p&gt;

&lt;p&gt;Could not create directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原因是 WordPress 没有权限创建新文件夹。&lt;/p&gt;

&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;终端窗口执行 &lt;code&gt;ls -l&lt;/code&gt; 命令&lt;/p&gt;

&lt;p&gt;查看 &lt;em&gt;wp-content&lt;/em&gt; 目录当前所有者（owner）与所属的组（group），结果是 _sam : users_。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查看 Apache 服务的所有者（owner）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ps aux | grep apache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我的 openSUSE 13.2 上显示 &lt;strong&gt;wwwrun&lt;/strong&gt;，与第一步得到的用户不一样。我们&lt;strong&gt;需要修改 wp-content 的所有者与组&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;执行如下命令查看 wwwrun 用户所属的组：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ groups wwwrun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用户 wwwrun 属于 www 组。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;修改 wp-content 目录的所有者与组：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chown -R wwwrun:www wp-content
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来就能成功更新插件。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 图片上传问题</title>
      <link>https://www.zfanw.com/blog/wordpress-upload-image-problem.html</link>
      <pubDate>Wed, 05 Nov 2014 11:24:34 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-upload-image-problem.html</guid>
      <description>&lt;p&gt;博客从虚拟主机迁到 VPS 后，开始水土不服，曝各种问题 &amp;#8211; 当然，水土不服是屁话，WordPress 运行环境不一样，各种配置需要做调整才是真的。&lt;/p&gt;

&lt;p&gt;比如这 WordPress 后台上传图片的问题：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are no HTTP transports available which can complete the requested request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有人说是缺少 &lt;em&gt;php5-curl&lt;/em&gt; 模块的缘故，我服务器系统跑的是 openSUSE 13.1 64位，检查 &lt;em&gt;php5-curl&lt;/em&gt; 的情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zypper info php5-curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Information for package php5-curl:
----------------------------------
Repository: openSUSE-13.1-Update
Name: php5-curl
Version: 5.4.20-30.1
Arch: i586
Vendor: openSUSE
Installed: No
Status: not installed
Installed Size: 70.2 KiB
Summary: PHP5 Extension Module
Description: 
PHP interface to libcurl that allows you to connect to and communicate
with servers of many different types, using protocols of many different
types.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请注意 &lt;strong&gt;Installed: No&lt;/strong&gt;，确实未曾安装。&lt;/p&gt;

&lt;p&gt;且安装一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo zypper install php5-curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后重启服务器上的 Apache：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /usr/sbin/rcapache2 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后图片就可以上传，不再报错。有些人说要改 php.ini 文件配置，我的情况则不需要。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 标签</title>
      <link>https://www.zfanw.com/blog/how-to-use-wordpress-tag.html</link>
      <pubDate>Tue, 04 Nov 2014 05:45:59 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/how-to-use-wordpress-tag.html</guid>
      <description>&lt;p&gt;我开始用 WordPress 写博客时，根本不清楚 tag （标签） 怎么用合适。看上去好像理所当然，譬如我这一篇，会提到 _WordPress_、_博客_、_标签_，所以这三样都写入标签。但是，我已经有一个 &lt;a href=&#34;http://www.zfanw.com/blog/category/wordpress-info&#34;&gt;WordPress&lt;/a&gt; 分类，现在又多了一个 &lt;a href=&#34;http://www.zfanw.com/blog/tag/wordpress&#34;&gt;WordPress&lt;/a&gt; 标签。它们俩 URL 地址不一样，但页面上的内容基乎一模一样。对搜索引擎来说，这可能就是&lt;a href=&#34;https://support.google.com/webmasters/answer/66359?hl=en&#34;&gt;重复内容&lt;/a&gt;了 &amp;#8211; 看，搜索引擎已经扬起鞭子，就差落下。所谓 URL，就是指向唯一的资源，如果这两个资源几乎一样，那么搜索引擎会建议做 301 或 302 重定向。譬如我博客首页 URL 其实有两个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zfanw.com/blog&#34;&gt;http://www.zfanw.com/blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zfanw.com/blog&#34;&gt;http://zfanw.com/blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因为它们指向一模一样的内容，只是 URL 不同，所以我做了 301 重定向，将网址统一到 _&lt;a href=&#34;http://www.zfanw.com/blog_。&#34;&gt;http://www.zfanw.com/blog_。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;再回到标签上，就容易得出一个结论，假如博客已经有某一分类，那么再用这个分类名称做标签的意义就不大了。那么标签的意义是什么？跟分类一样，标签的意义也在于_组织近似的主题_，但它更像是分类的一个辅助。一个网站上，分类数量有限，但标签可以无限。如果说分类是主角，串起一个网站的主要线索，那标签就是配角 &amp;#8211; 同样不可或缺，但也不要太抢主角的风头。&lt;/p&gt;

&lt;p&gt;所以你看，我这篇就没有加 WordPress 标签。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 迁移</title>
      <link>https://www.zfanw.com/blog/wordpress-move.html</link>
      <pubDate>Sun, 02 Nov 2014 01:11:55 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-move.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 备份旧服务器上的数据库&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 备份旧服务器上的文件&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 导入旧数据库到新服务器&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-4&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; 复制旧文件到新服务器&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-5&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; 解析域名&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-6&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;6&lt;/span&gt; 错误情况&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    前些日子我终于下定决心买 VPS，然后就把这个博客从虚拟主机上迁移过去。因为域名不变，只是换空间，所以大部分步骤是按 &lt;a href=&#34;http://codex.wordpress.org/Moving_WordPress#Keeping_Your_Domain_Name_and_URLs&#34;&gt;WordPress 提供的文档&lt;/a&gt;操作。不过过程中碰上不少问题，最终且算是解决了，所以做一总结。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;备份旧服务器上的数据库&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    旧的虚拟主机上提供有 cPanel 界面，所以&lt;a href=&#34;http://codex.wordpress.org/Backing_Up_Your_Database&#34;&gt;操作&lt;/a&gt;十分简单。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;备份旧服务器上的文件&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    同样可以借助 cPanel。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;导入旧数据库到新服务器&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    因为 VPS 上没有 cPanel，所以数据库的导入是通过&lt;a href=&#34;http://codex.wordpress.org/Restoring_Your_Database_From_Backup&#34;&gt;命令行执行&lt;/a&gt;的。
  &lt;/p&gt;
  
  &lt;p&gt;
    首先通过 &lt;a href=&#34;http://www.zfanw.com/blog/ssh-usage.html&#34;&gt;SSH 登录&lt;/a&gt;到服务器：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;ssh zfanw
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    然后执行 MySQL 命令：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sam@zfanw.com: mysql -u mysqlusername -p databaseName &amp;lt; zfanw.com.bak.sql
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    导入的过程非常快，如果不确信是否成功，可以执行 MySQL 命令查看：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;use zfanwcom;
show tables;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    结果如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+---------------------------+
| Tables_in_zfanwcom |
+---------------------------+
| wp_PopularPostsdata       |
| wp_commentmeta            |
| wp_comments               |
| wp_links                  |
| wp_options                |
| wp_postmeta               |
| wp_posts                  |
| wp_sucuri_lastlogins      |
| wp_term_relationships     |
| wp_term_taxonomy          |
| wp_terms                  |
| wp_usermeta               |
| wp_users                  |
+---------------------------+
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-4&#34;&gt;复制旧文件到新服务器&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-4&#34; href=&#34;#i-4&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    数据库导入完成后，将虚拟主机上备份的文件上传到 VPS 并解压到相应目录。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-5&#34;&gt;解析域名&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-5&#34; href=&#34;#i-5&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    将域名重新解析到新的 IP 上。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-6&#34;&gt;错误情况&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-6&#34; href=&#34;#i-6&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    解析完成后访问新 IP 上的博客，就出现了各种情况。
  &lt;/p&gt;
  
  &lt;p&gt;
    先来看下 &lt;em&gt;/etc/apache2/vhosts.d/&lt;/em&gt; 目录下 &lt;em&gt;zfanw.com.conf&lt;/em&gt; 这个虚拟主机文件的配置：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
    ServerName zfanw.com
    ServerAlias www.zfanw.com
    ServerAdmin chenxsan@gmail.com

    DocumentRoot /srv/www/vhosts/zfanw.com

    &amp;lt;Directory &#34;/srv/www/vhosts/zfanw.com&#34;&amp;gt;
        AllowOverride All
        Options FollowSymLinks

        Order allow,deny
        Allow from all

    &amp;lt;/Directory&amp;gt;

&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h3&gt;
    404 错误
  &lt;/h3&gt;
  
  &lt;p&gt;
    我碰到的情况中，有一种错误是这样：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      Object not found!
    &lt;/p&gt;
    
    &lt;p&gt;
      The requested URL was not found on this server. The link on the referring page seems to be wrong or outdated. Please inform the author of that page about the error.
    &lt;/p&gt;
    
    &lt;p&gt;
      If you think this is a server error, please contact the webmaster.
    &lt;/p&gt;
    
    &lt;p&gt;
      Error 404
    &lt;/p&gt;
    
    &lt;p&gt;
      www.zfanw.com
    &lt;/p&gt;
    
    &lt;p&gt;
      Apache/2.4.6 (Linux/SUSE)
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    网上的资料有说是 &lt;em&gt;.htaccess&lt;/em&gt; 文件的问题，因为我自定义了 WordPress 的固定链接。但我的 &lt;em&gt;.htaccess&lt;/em&gt; 文件内容如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;# BEGIN WordPress
&amp;lt;IfModule mod_rewrite.c&amp;gt;
RewriteEngine On
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
&amp;lt;/IfModule&amp;gt;
# END WordPress
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这是 &lt;a href=&#34;http://codex.wordpress.org/htaccess#Basic_WP&#34;&gt;WordPress 默认&lt;/a&gt;的。另外，使用&lt;a href=&#34;http://www.zfanw.com/blog/apache-mod_deflate.html&#34;&gt;上一篇&lt;/a&gt;介绍的方法，可以看到我的服务器上已经安装了 &lt;em&gt;mod_rewrite&lt;/em&gt; 模块。
  &lt;/p&gt;
  
  &lt;p&gt;
    我的情况下，问题出在 &lt;em&gt;/etc/apache2/httpd.conf&lt;/em&gt; 文件，&lt;a href=&#34;http://codex.wordpress.org/Permalinks#Fixing_Other_Issues&#34;&gt;WordPress 说明如下&lt;/a&gt;：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      Your server may not have the AllowOverride directive enabled. If the AllowOverride directive is set to None in your Apache httpd.config file, then .htaccess files are completely ignored. In this case, the server will not even attempt to read .htaccess files in the filesystem. When this directive is set to All, then any directive which has the .htaccess Context is allowed in .htaccess files.
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    如果 Apache 的 &lt;em&gt;httpd.conf&lt;/em&gt; (openSUSE 下安装的 Apache 里配置文件是叫这个) 中 &lt;code&gt;AllowOverride&lt;/code&gt; 被设置为 &lt;em&gt;None&lt;/em&gt;，则 &lt;em&gt;.htaccess&lt;/em&gt; 文件完全被忽视，所以我需要修改 &lt;em&gt;httpd.conf&lt;/em&gt; 文件内容，结果如下：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt; &amp;lt;Directory /&amp;gt;
    Options FollowSymLinks
    AllowOverride All
 &amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    重启 Apache 服务器：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo rcapache2 restart
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    再度访问博客，问题消失了。
  &lt;/p&gt;
  
  &lt;p&gt;
    不过这篇是事后整理，碰上的许多枝末问题已经遗忘，不一定完整。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>如何安装使用 Apache mod_deflate 模块</title>
      <link>https://www.zfanw.com/blog/apache-mod_deflate.html</link>
      <pubDate>Fri, 31 Oct 2014 14:20:58 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/apache-mod_deflate.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 安装&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 启用&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-3&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; 配置&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    最近把博客从虚拟主机搬到 VPS 上，自然一番折腾。估计围绕这一过程，写三四篇博客不是梦。
  &lt;/p&gt;
  
  &lt;p&gt;
    这是第一篇，服务器端的压缩功能 &amp;#8211; 服务器在返回内容前先对内容做 gzip 压缩，以减小传输的文件大小 &amp;#8211; 照 &lt;a href=&#34;https://developers.google.com/speed/docs/insights/EnableCompression&#34;&gt;Google 的说法&lt;/a&gt;，能减小 90%，但这也不是重点，重点是服务器端不开启 gzip 压缩的话，Google PageSpeed 的测试就会&lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/?url=http://www.zfanw.com/blog/&amp;tab=desktop&#34;&gt;扣分&lt;/a&gt; &amp;#8211; 我个人特别在意这个分数。
  &lt;/p&gt;
  
  &lt;p&gt;
    Apache 下，压缩功能由 &lt;a href=&#34;http://httpd.apache.org/docs/2.4/mod/mod_deflate.html&#34;&gt;mod_deflate&lt;/a&gt; 模块控制。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;安装&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    我的 VPS 系统装的是 openSUSE 13.1 64 位系统，Apache 版本为 2.4。首先查看下系统中是否已经安装 &lt;em&gt;mod_deflate&lt;/em&gt;模块，我知道的有两种方法：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;
        当前用户下 执行命令 &lt;code&gt;httpd2 -M&lt;/code&gt;，输出的内容大致如下：
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;chenxsan@zfanw.com:~&amp;gt; httpd2 -M
[Fri Oct 31 13:13:59.278203 2014] [so:warn] [pid 9292] AH01574: module deflate_module is already loaded, skipping
Loaded Modules:
core_module (static)
access_compat_module (static)
so_module (static)
http_module (static)
mpm_prefork_module (static)
unixd_module (static)
systemd_module (static)
actions_module (shared)
alias_module (shared)
auth_basic_module (shared)
authn_file_module (shared)
authz_host_module (shared)
authz_groupfile_module (shared)
authz_user_module (shared)
autoindex_module (shared)
cgi_module (shared)
dir_module (shared)
env_module (shared)
expires_module (shared)
include_module (shared)
log_config_module (shared)
mime_module (shared)
negotiation_module (shared)
setenvif_module (shared)
ssl_module (shared)
userdir_module (shared)
reqtimeout_module (shared)
authn_core_module (shared)
authz_core_module (shared)
php5_module (shared)
rewrite_module (shared)
deflate_module (shared)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/li&gt;
    
    &lt;li&gt;
      &lt;p&gt;
        查看 &lt;em&gt;/etc/sysconfig/apache2&lt;/em&gt; 文件内容，可以直接打开文件，也可以使用 &lt;code&gt;grep&lt;/code&gt; 命令：
      &lt;/p&gt;
      
      &lt;pre&gt;&lt;code&gt;grep &#34;APACHE_MODULES=&#34; /etc/sysconfig/apache2
&lt;/code&gt;&lt;/pre&gt;
      
      &lt;p&gt;
        得出的结果大致如下：
      &lt;/p&gt;
      
      &lt;blockquote&gt;
        &lt;p&gt;
          APACHE_MODULES=&amp;#8221;actions alias auth_basic authn_file authz_host authz_groupfile authz_user autoindex cgi dir env expires include log_config mime negotiation setenvif ssl userdir reqtimeout authn_core authz_core mod-userdir php5 mod_rewrite mod_deflate deflate&amp;#8221;
        &lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    我这里显示的结果是已经安装加载了 &lt;em&gt;mod_deflate&lt;/em&gt; 模块。
  &lt;/p&gt;
  
  &lt;p&gt;
    假如没有，则使用 &lt;a href=&#34;http://man.he.net/man8/a2enmod&#34;&gt;&lt;code&gt;a2enmod&lt;/code&gt;&lt;/a&gt; 来启用：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo a2enmod deflate
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    等等，为什么没说安装直接进入启用阶段？因为 &lt;em&gt;mod_deflate&lt;/em&gt; 模块在安装 Apache 时已经捎带装上，所以可以跳过安装这个步骤。
  &lt;/p&gt;
  
  &lt;p&gt;
    启用 &lt;em&gt;mod_deflate&lt;/em&gt; 模块后，需要&lt;a href=&#34;https://activedoc.opensuse.org/book/opensuse-reference/chapter-20-the-apache-http-server#sec.apache2.start_stop&#34;&gt;重启 Apache 服务器&lt;/a&gt;：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo rcapache2 restart
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;启用&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    如上所述。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-3&#34;&gt;配置&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-3&#34; href=&#34;#i-3&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    启用 &lt;em&gt;mod_deflate&lt;/em&gt; 模块后，就可以开始配置了。
  &lt;/p&gt;
  
  &lt;p&gt;
    可以照 openSUSE 的&lt;a href=&#34;https://en.opensuse.org/SDB:Linux_Apache_MySQL_PHP#mod_deflate&#34;&gt;操作说明&lt;/a&gt;一步步来，也可以粗野直接点，修改 &lt;em&gt;/etc/apache2/httpd.conf&lt;/em&gt; 文件，在文件末加入如下代码：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;SetOutputFilter DEFLATE
SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png)$ \
    no-gzip dont-vary
SetEnvIfNoCase Request_URI \
    \.(?:exe|t?gz|zip|bz2|sit|rar|7z)$ \
    no-gzip dont-vary
SetEnvIfNoCase Request_URI \.pdf$ no-gzip dont-vary

BrowserMatch ^Mozilla/4 gzip-only-text/html
BrowserMatch ^Mozilla/4\.0[678] no-gzip
BrowserMatch \bMSIE !no-gzip !gzip-only-text/html
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    或者可以考虑 h5bp 提供的&lt;a href=&#34;https://github.com/h5bp/server-configs-apache/blob/master/src/web_performance/compression.conf&#34;&gt;配置&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    然后重启 Apache：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;sudo rcapache2 restart
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    再跑一趟 PageSpeed，就不会再提服务器压缩的事 &amp;#8211; 恭喜，你已经压缩掉 90% 的传输文件大小，为用户节省大量带宽与时间。
  &lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress body_class添加自定义类</title>
      <link>https://www.zfanw.com/blog/wordpress-body_class-customize.html</link>
      <pubDate>Sat, 09 Aug 2014 14:47:51 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-body_class-customize.html</guid>
      <description>&lt;p&gt;WordPress的PHP代码里，有如下一段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body &amp;lt;?php body_class(); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:13295-1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:13295-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;根据当前页面的状态，输出相应的CSS类，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body class=&amp;quot;single single-post postid-13295 single-format-standard logged-in&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这些CSS类都是WordPress自动计算的，如果我们要添加自定义的CSS类，却不能直接在PHP代码中添加。而需要通过WordPress提供的filter。&lt;/p&gt;

&lt;p&gt;打开functions.php文件，添加如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function add_custom_body_class( $classes ) {
  global $post;
  if ( isset( $post ) ) {
    $classes[] = &#39;Grid&#39;;
  }
  return $classes;
}
add_filter( &#39;body_class&#39;, &#39;add_custom_body_class&#39; );
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就给WordPress的&lt;code&gt;body&lt;/code&gt;标签加了一个&lt;code&gt;Grid&lt;/code&gt;的CSS自定义类。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:13295-1&#34;&gt;&lt;a href=&#34;http://codex.wordpress.org/Function_Reference/body_class&#34;&gt;Function Reference/body class « WordPress Codex&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:13295-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress html 标签的 lang 属性</title>
      <link>https://www.zfanw.com/blog/wordpress-html-tag-lang-attribute.html</link>
      <pubDate>Tue, 15 Apr 2014 14:50:58 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-html-tag-lang-attribute.html</guid>
      <description>&lt;p&gt;WordPress 的 header.php 文件里，html 标签是这么写的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html &amp;lt;?php language_attributes(); ?&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你安装 WordPress 时下载的是中文包，则前台页面输出后的 html 标签为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html lang=&amp;quot;zh-CN&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但如果你安装时下载的是英文包，那么前台页面页面输出的 html 标签里 lang 属性为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html lang=&amp;quot;en-US&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;W3 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12320-1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12320-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;有论述添加这个属性的种种好处。&lt;/p&gt;

&lt;p&gt;可如果你安装了英文包，写的内容却是中文，或说你现在想把 lang 属性值设置为 &amp;#8220;zh-CN&amp;#8221;。&lt;code&gt;language_attributes()&lt;/code&gt; 帮不了忙，WordPress 文档会建议你安装一个中文语言包&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12320-2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12320-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;但我只想修改前台页面输出，后端界面是中文或英文倒是无所谓，所以一个最快捷的方法，是直接硬编码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html lang=&amp;quot;zh-CN&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对硬编码反感者来说，这行代码可能罪大恶极 &amp;#8211; 那还是建议安装一个中文语言包，参考脚注2。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:12320-1&#34;&gt;&lt;a href=&#34;http://www.w3.org/International/questions/qa-lang-why.en&#34;&gt;Why use the language attribute?&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12320-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:12320-2&#34;&gt;&lt;a href=&#34;http://codex.wordpress.org/Installing_WordPress_in_Your_Language&#34;&gt;Installing WordPress in Your Language « WordPress Codex&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12320-2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 设置 HTTP 响应头</title>
      <link>https://www.zfanw.com/blog/wordpress-send-http-header.html</link>
      <pubDate>Sat, 05 Apr 2014 07:36:15 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-send-http-header.html</guid>
      <description>

&lt;p&gt;如果要给 WordPress 设置一个 HTTP 响应头(header)，却在搜索引擎中搜索 「WordPress header 设置」，结果可能会让你失望。因为 WordPress 有一个文件叫 header.php，搜索引擎很容易误会你的意图。&lt;/p&gt;

&lt;p&gt;当然，这一篇说的是设置 HTTP 响应头，与 header.php 文件无关。&lt;/p&gt;

&lt;p&gt;譬如你要给 WordPress 加一个 &lt;em&gt;X-Frame-Options&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12062-1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12062-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;响应头，防止其他网站使用 iframe 嵌入你的网站，则可以通过 WordPress 的 _send&lt;em&gt;headers&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:12062-2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:12062-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;勾子。&lt;/p&gt;

&lt;p&gt;打开 &lt;strong&gt;functions.php&lt;/strong&gt; 文件，加入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add_action( &#39;send_headers&#39;, &#39;avoid_clickjacking_attacks&#39; );
function avoid_clickjacking_attacks() {
    header( &#39;X-Frame-Options: SAMEORIGIN&#39; ); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;非同源的站点如果使用 iframe 嵌入你的网站，浏览器会拒绝渲染。Firefox 控制台会提示错误如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Load denied by X-Frame-Options: &lt;a href=&#34;http://www.zfanw.com/blog/ember-js-template-add-html5-attribute.html&#34;&gt;http://www.zfanw.com/blog/ember-js-template-add-html5-attribute.html&lt;/a&gt; does not permit cross-origin framing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;

&lt;p&gt;以下是两个 iframe，左边一个 src 指向 Vice，右边一个 src 指向 Google 首页。因为 Google 定义了 X-Frame-Options 响应头，所以右边一个 iframe 内容无法渲染，显示一片空白：&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:12062-1&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options&#34;&gt;The X-Frame-Options response header &amp;#8211; HTTP | MDN&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12062-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:12062-2&#34;&gt;&lt;a href=&#34;https://codex.wordpress.org/Plugin_API/Action_Reference/send_headers&#34;&gt;Plugin API/Action Reference/send headers « WordPress Codex&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:12062-2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 脚注</title>
      <link>https://www.zfanw.com/blog/wordpress-footnote.html</link>
      <pubDate>Thu, 26 Dec 2013 23:03:47 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-footnote.html</guid>
      <description>&lt;p&gt;至今为止，我的博客末尾，都是一个「扩展阅读」的外部链接。很多时候，其实想以脚注&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11153-1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11153-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;的形式展现，但 WordPress 并没有便捷的工具；写 HTML 代码的话，又嫌冗繁，也就没弄。&lt;/p&gt;

&lt;p&gt;前些日子在某个 feed 里看到 Bigfoot &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11153-2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11153-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;这个 jQuery 脚注插件，便收藏起来，想着有空试试。今天一试，还是要写不少 HTML 代码，而我在 WordPress 里是用 Markdown  &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11153-3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11153-3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;写的。要在 Markdown 简洁的语法中混入 HTML 代码，于我实在不忍心。想着又要放弃，结果莫名地又查了遍 PHP Markdown Extra &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:11153-4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:11153-4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;的文档，赫然发现有脚注的用法。&lt;/p&gt;

&lt;p&gt;用法非常简单。&lt;/p&gt;

&lt;p&gt;首先，在要插入脚注的位置插入 &lt;code&gt;[^1]&lt;/code&gt; 这样的内容。&lt;/p&gt;

&lt;p&gt;然后在底部插入 &lt;code&gt;[^1]: 这里是脚注的内容&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Markdown Extra 插件会自动生成相应的 HTML 代码。需要注意，如果有多个脚注内容，它们之间要换行隔开，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[^1]: 我是脚注内容1

[^2]: 我是脚注内容2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终效果见文末。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:11153-1&#34;&gt;&lt;a href=&#34;http://zh.wikipedia.org/wiki/Help:脚注&#34;&gt;脚注的概念&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11153-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11153-2&#34;&gt;&lt;a href=&#34;http://cmsauve.com/labs/bigfoot/&#34;&gt;Bigfoot&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11153-2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11153-3&#34;&gt;&lt;a href=&#34;http://www.zfanw.com/blog/wordpress-markdown.html&#34;&gt;WordPress 的 Markdown 用法&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11153-3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:11153-4&#34;&gt;&lt;a href=&#34;http://michelf.ca/projects/php-markdown/extra/#footnotes&#34;&gt;PHP Markdown Extra 文档&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:11153-4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 代码高亮插件 Highlight.js</title>
      <link>https://www.zfanw.com/blog/wordpress-plugin-syntax-highlight-js.html</link>
      <pubDate>Wed, 24 Apr 2013 23:40:46 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-plugin-syntax-highlight-js.html</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://highlightjs.org/&#34;&gt;Highlight.js&lt;/a&gt; 支持71种程序代码的语法高亮，提供&lt;a href=&#34;http://highlightjs.org/static/test.html&#34;&gt;44种样式&lt;/a&gt;及各种&lt;a href=&#34;http://softwaremaniacs.org/soft/highlight/en/addons/&#34;&gt;扩展插件&lt;/a&gt;，其中包括 &lt;a href=&#34;http://wordpress.org/extend/plugins/wp-highlightjs/&#34;&gt;WordPress 插件&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但用 WordPress 插件做&lt;strong&gt;代码高亮&lt;/strong&gt;时，&lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights&#34;&gt;Google PageSpeed 测试中&lt;/a&gt;，会出现如下建议：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The following external CSS files were included after an external JavaScript file in &lt;a href=&#34;http://www.zfanw.com/blog/wordpress-add-jquery.html&#34;&gt;http://www.zfanw.com/blog/wordpress-add-jquery.html&lt;/a&gt;. To ensure CSS files are downloaded in parallel, always include external CSS before external JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zfanw.com/blog/wp-content/plugins/wp-highlightjs/styles/default.css&#34;&gt;http://www.zfanw.com/blog/wp-content/plugins/wp-highlightjs/styles/default.css&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Highlight.js 插件将 CSS 文件附加到 JS 文件后，并且插件设置中没有提供任何调整顺序的选项。这会导致 CSS 文件不能并行请求。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;类似于 Google 提供的第三方库 CDN 服务，Yandex(俄罗斯的搜索引擎) 也有提供&lt;a href=&#34;http://api.yandex.ru/jslibs/libs.xml&#34;&gt;类似的公共服务&lt;/a&gt;，并且有 highlight.js，我可以在 WordPress 里直接引用 highlight 的 js 与 css 文件，文件出现的顺序就变得可控。&lt;/p&gt;

&lt;p&gt;打开 WordPress 的 functions.php 文件，加入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    function zfanw_add_highlight_js(){
        wp_enqueue_style(&#39;highlightcss&#39;,&#39;http://yandex.st/highlightjs/8.0/styles/default.min.css&#39;);
        wp_enqueue_script(&#39;highlightjs&#39;,&#39;http://yandex.st/highlightjs/8.0/highlight.min.js&#39;,array(),null,true);
    }
    add_action(&#39;wp_enqueue_scripts&#39;, &#39;zfanw_add_highlight_js&#39;);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后在 Footer.php 或 Header.php 文件中触发：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后，highlight.js 会查找页面内的代码片段，自动判断语言类型，并根据 CSS 样式主题高亮显示不同语法。如本页面所示的代码样式。&lt;/p&gt;

&lt;p&gt;如果要换掉代码高亮的样式主题，则只要将调用的 CSS 路径替换掉即可，比如，要从默认主题换成 Zenburn 主题：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; wp_enqueue_style(&#39;highlightcss&#39;,&#39;http://yandex.st/highlightjs/8.0/styles/zenburn.min.css&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/isagalaev/highlight.js&#34;&gt;highlight.js 说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codex.wordpress.org/Function_Reference/wp_enqueue_script&#34;&gt;wp_enqueue_script&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>WordPress RSS 标题重复</title>
      <link>https://www.zfanw.com/blog/wordpress-rss-title-duplicate.html</link>
      <pubDate>Mon, 18 Mar 2013 13:17:47 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-rss-title-duplicate.html</guid>
      <description>&lt;p&gt;我的博客标题为「陈三」，RSS 地址为 &lt;a href=&#34;http://www.zfanw.com/blog/feed&#34;&gt;http://www.zfanw.com/blog/feed&lt;/a&gt;，古怪的是，这个 feed 地址的标题重复了一次，显示为「陈三陈三」。&lt;/p&gt;

&lt;p&gt;WordPress 网站上也有人报告过&lt;a href=&#34;http://wordpress.org/support/topic/rss-feed-title-doubled&#34;&gt;同样问题&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在本地安装了全新的 WordPress 3.5.1，然后逐个安装插件进行排查，依然没有结果。至于以前安装的插件是否造成现在的影响，则是不得而知了。&lt;/p&gt;

&lt;p&gt;一个粗暴、简单的解决办法是，打开 &lt;code&gt;wp-include/feed-rss2.php&lt;/code&gt; 文件，查找如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;channel&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;?php bloginfo_rss(&#39;name&#39;);wp_title_rss(); ?&amp;gt;&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 &lt;code&gt;bloginfo_rss(&#39;name&#39;)&lt;/code&gt; 部分移除。&lt;/p&gt;

&lt;p&gt;但是，如上所说的，这个方法太过粗暴了。&lt;/p&gt;

&lt;p&gt;根据 &lt;a href=&#34;http://codex.wordpress.org/Plugin_API/Filter_Reference/wp_title&#34;&gt;WordPress&lt;/a&gt; 上关于 wp_title 过滤器的说明，则是我在写 wp_title 这个 filter 时少写了如下判断语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ( is_feed() )
    return $title;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 wp_title 函数中增加该语句后，RSS 的标题就不再重复了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BackWPup 更新至3.0.4</title>
      <link>https://www.zfanw.com/blog/backwpup-3-0-4.html</link>
      <pubDate>Mon, 04 Mar 2013 23:39:22 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/backwpup-3-0-4.html</guid>
      <description>&lt;p&gt;BackWPup 是我用的一个免费 WordPress 插件，用于定期将网站数据库、文件备份至 Dropbox，但从版本3开始后，在备份数据库过程出现如下错误：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ERROR: No MySQLi extension found. Please install it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为 BackWPup 自版本3起使用 MySQLi 扩展备份数据库，服务器不曾安装 MySQLi，数据库的备份只能失败并抛出错误。&lt;/p&gt;

&lt;p&gt;而且，看作者的意思，是不打算做任何 fallback 的。&lt;/p&gt;

&lt;p&gt;所以，解决办法是，在服务器上安装 MySQLi 这个 PHP 扩展，或者继续使用 BackWPup 2.xx 版本。&lt;/p&gt;

&lt;p&gt;附：&lt;a href=&#34;http://wordpress.org/extend/plugins/backwpup/changelog/&#34;&gt;它的版本变化说明&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;2014.4.9 目前 BackWpup 已经更新至3.1.2版本，并且我的情况可正常备份，不知道是作者想不开又继续支持 MySQL 还是主机商安装 MySQLi 了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web 前端优化 – 缓存页面组件</title>
      <link>https://www.zfanw.com/blog/caching-in-http.html</link>
      <pubDate>Wed, 31 Oct 2012 06:28:08 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/caching-in-http.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 设置方法&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 参考&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    在 Web 前端优化里，缓存页面组件是很重要的一项。不常改动的图片、CSS 、JavaScript 文件等，可以缓存在浏览器中，这样，用户再次访问时，浏览器直接从缓存中读取文件，一来减少浏览器请求数，加快用户访问速度，二来服务器需要返回的内容少了，减轻服务器负担。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;设置方法&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    缓存页面组件的方法有多种，这一种是修改 HTTP 头。
  &lt;/p&gt;
  
  &lt;p&gt;
    假设服务器是 Apache，可以通过配置 .htaccess 文件来启用缓存：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;&amp;lt;IfModule mod_expires.c&amp;gt;
    # 启用缓存
    ExpiresActive On

    #默认缓存时间为 1 天
    ExpiresDefault &#34;access plus 1 day&#34;

    #图片的缓存时间设置为一周
    ExpiresByType image/x-icon &#34;access plus 7 days&#34;
    ExpiresByType image/jpeg &#34;access plus 7 days&#34;
    ExpiresByType image/png &#34;access plus 7 days&#34;
    ExpiresByType image/gif &#34;access plus 7 days&#34;


    ExpiresByType application/x-shockwave-flash &#34;access plus 7 days&#34;

    #CSS 的缓存时间也设置成一周
    ExpiresByType text/css &#34;access plus 7 day&#34;

    #Javascript 的缓存时间同样设置为一周
    ExpiresByType text/javascript &#34;access plus 7 day&#34;
    ExpiresByType application/x-javascript &#34;access plus 7 day&#34;


    ExpiresByType text/html &#34;access plus 10 minutes&#34;
    ExpiresByType application/xhtml+xml &#34;access plus 10 minutes&#34;
&amp;lt;/IfModule&amp;gt;
&amp;lt;IfModule mod_headers.c&amp;gt;
    #设置代理缓存
  &amp;lt;FilesMatch &#34;\.(js|css|xml|gz|html)$&#34;&amp;gt;
    Header append Vary: Accept-Encoding
  &amp;lt;/FilesMatch&amp;gt;
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    以上配置针对&lt;a href=&#34;http://en.wikipedia.org/wiki/Internet_media_type&#34;&gt;不同类型文件&lt;/a&gt;设置不同有效期限，比如 jpeg/png/gif 图片，从用户第一次访问算起，7 天内有效，如果用户在 7 天内还访问这个网站，则直接从浏览器缓存中读取该图片，无需服务器上再返回。
  &lt;/p&gt;
  
  &lt;p&gt;
    打开 firebug，启用 Net 面板，刷新页面，如果看到有返回状态码 304 Not Modified 的文件，说明设置成功。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;参考&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html&#34;&gt;w3 &amp;#8211; caching in http&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://www.mnot.net/cache_docs/&#34;&gt;cache docs&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://httpd.apache.org/docs/2.2/mod/mod_expires.html&#34;&gt;Apache mod_expires&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://httpd.apache.org/docs/current/mod/mod_headers.html#header&#34;&gt;Apache mod_headers&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WordPress 使用 Markdown 语法</title>
      <link>https://www.zfanw.com/blog/wordpress-markdown.html</link>
      <pubDate>Fri, 28 Sep 2012 16:59:07 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/wordpress-markdown.html</guid>
      <description>

&lt;p&gt;现在很多网站都支持 &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; 语法，比如 StackOverflow，tumblr。WordPress 官方目前没有提供 Markdown 支持，不过 WordPress 扩展性很强，有插件可以使用。&lt;/p&gt;

&lt;p&gt;我安装的这个 WordPress 插件叫 PHP Markdown，安装很简单：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先从&lt;a href=&#34;http://michelf.ca/projects/php-markdown/&#34;&gt;它的网站&lt;/a&gt;下载 zip 压缩包&lt;/li&gt;
&lt;li&gt;登录 WordPress 后台&lt;/li&gt;
&lt;li&gt;选择 插件 -&amp;gt; 新插件&lt;/li&gt;
&lt;li&gt;选择下载的 zip 包，安装并启用插件&lt;/li&gt;
&lt;li&gt;此后新建的 post 及 page 的内容区域都将默认使用 Markdown 语法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PHP Markdown 所应用的 Markdown 语法是忠于原语法的，更加适用平时仅仅是写作的人们使用。而如果要处理其他，比如很多代码，则会带来一些麻烦。譬如我要在 post 里输入代码，则需要按四个空格或一个 Tab 缩进来表示，这还算好，如果要在列表里输入代码呢？需要空出八个空格或两个 Tab 缩进来表示。当然，我可以用 wp-sytax 这样的代码高亮工具管理，但这是题外话。&lt;/p&gt;

&lt;p&gt;也因此，上面介绍的这款插件其实还有加强版的，&lt;a href=&#34;http://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;。在这个加强版里，可以做到很多超出 Markdown 默认语法的东西，比如，可以给标题加 id：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##这是用 Markdown 语法写的标题二 {#markdown}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转换成 html 后是下面这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2 id=&amp;quot;markdown&amp;quot;&amp;gt;这是用 Markdown 语法写的标题二&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过，目前这种用法仅限于标题。&lt;/p&gt;

&lt;p&gt;另外，代码块还可以使用上下两条波浪线包围，注意它们的数量必须大于或等于 3,并且上下两条线数量要一致：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~~~
~~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而如果是表格，可以使用以下格式，而不用直接书写 table、thead 等一堆 HTML 代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;语文|英语|数学
---|---|----
80|90|100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果是如下表格：&lt;/p&gt;

&lt;table class=&#34;table table-bordered table-striped table-condensed&#34;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      语文
    &lt;/th&gt;
    
    &lt;th&gt;
      英语
    &lt;/th&gt;
    
    &lt;th&gt;
      数学
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      80
    &lt;/td&gt;
    
    &lt;td&gt;
      90
    &lt;/td&gt;
    
    &lt;td&gt;
      100
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;比直接书写 table 的代码快捷。&lt;/p&gt;

&lt;p&gt;这样，很多时候，我甚至不用启动 &lt;a href=&#34;http://www.zfanw.com/blog/zencoding-vim-tutorial-chinese.html&#34;&gt;vim + zencoding.vim 写 html 代码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;附一张用 Markdown 写的这篇 blog 的截图，这比满屏的 html 代码可读性强多了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.zfanw.com/blog/wp-content/uploads/2012/09/Screenshot-from-2012-09-28-231357.png&#34; alt=&#34;php markdown 内容&#34; width=&#34;590&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;：2014.8.28 发现评论区域也可以使用 Markdown。&lt;/p&gt;

&lt;h2 id=&#34;扩展阅读&#34;&gt;扩展阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/List_of_Markdown_implementations&#34;&gt;markdown 的各种实施&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>NO WWW</title>
      <link>https://www.zfanw.com/blog/no-www.html</link>
      <pubDate>Tue, 25 Sep 2012 05:39:04 +0000</pubDate>
      
      <guid>https://www.zfanw.com/blog/no-www.html</guid>
      <description>&lt;div id=&#34;toc_container&#34; class=&#34;ml-l u-floatRight pure-u-1-1 pure-u-sm-2-5 toc_white no_bullets&#34;&gt;
  &lt;nav id=&#34;myaffix&#34;&gt;
  
  &lt;p class=&#34;toc-title&#34;&gt;
    目录
  &lt;/p&gt;
  
  &lt;ul class=&#34;toc-list nav&#34; role=&#34;menu&#34;&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#_no-www&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;1&lt;/span&gt; 为什么要 no-www&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;2&lt;/span&gt; 具体实践情况&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#no-www_301_www&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;3&lt;/span&gt; no-www 301 重定向到 www&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#www_301_no-www&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;4&lt;/span&gt; www 301 重定向到 no-www&lt;/a&gt;
    &lt;/li&gt;
    &lt;li class=&#34;toc-list__item&#34; role=&#34;menuitem&#34;&gt;
      &lt;a href=&#34;#i-2&#34;&gt;&lt;span class=&#34;toc_number toc_depth_1&#34;&gt;5&lt;/span&gt; 鸣谢&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/nav&gt;
&lt;/div&gt;

&lt;div class=&#34;&#34;&gt;
  &lt;p&gt;
    首先，这标题绝非我拒绝使用 WWW （互联网）的意思。只是在讲域名中不要加 www。另外，这也不是我的主张，只是看到互联网上有&lt;a href=&#34;http://no-www.org/&#34;&gt;这么个主张&lt;/a&gt;，就介绍一下。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;_no-www&#34;&gt;为什么要 no-www&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;hey_no-www&#34; href=&#34;#_no-www&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    对普通互联网使用者来说，域名中 www 或 no-www 其实并无关系，只要能正常访问网站即可。但按 &lt;a href=&#34;http://no-www.org/&#34;&gt;No-WWW&lt;/a&gt; 网站的说法，则 www 其实是多余的：
  &lt;/p&gt;
  
  &lt;blockquote&gt;
    &lt;p&gt;
      默认情况下，所有流行的浏览器都默认 HTTP 协议。如此，浏览器就会在请求的 URL 地址前自动补上 ‘http://’，然后自动连接 HTTP 服务器上的 80 端口&amp;#8230;&amp;#8230;Web 服务器允许通过主域名访问页面，除非指定特殊子域名。
    &lt;/p&gt;
    
    &lt;p&gt;
      简单说，使用 www 子域名根本是多余的，空耗费连接时间。
    &lt;/p&gt;
  &lt;/blockquote&gt;
  
  &lt;p&gt;
    当然，有说 no-www 的，肯定就有 &lt;a href=&#34;http://www.yes-www.org/&#34;&gt;yes-www&lt;/a&gt; 的，理由也不少。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i&#34;&gt;具体实践情况&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi&#34; href=&#34;#i&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    那么来看下具体实践的情况。
  &lt;/p&gt;
  
  &lt;p&gt;
    这是 Quantcast 美国的 &lt;a href=&#34;http://www.quantcast.com/top-sites&#34;&gt;top sites&lt;/a&gt; 数据。我抽取前 20 名来做个统计：
  &lt;/p&gt;
  
  &lt;table class=&#34;table table-striped table-hover table-bordered table-condensed&#34;&gt;
    &lt;tr&gt;
      &lt;th&gt;
        no-www&amp;nbsp;&amp;rarr;&amp;nbsp;www
      &lt;/th&gt;
      
      &lt;th&gt;
        www&amp;nbsp;&amp;rarr;&amp;nbsp;no-www
      &lt;/th&gt;
      
      &lt;th&gt;
        未曾做重定向
      &lt;/th&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        google.com
      &lt;/td&gt;
      
      &lt;td&gt;
        twitter.com
      &lt;/td&gt;
      
      &lt;td&gt;
        ask.com
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        youtube.com
      &lt;/td&gt;
      
      &lt;td&gt;
        vimeo.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        facebook.com
      &lt;/td&gt;
      
      &lt;td&gt;
        pinterest.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        msn.com
      &lt;/td&gt;
      
      &lt;td&gt;
        wordpress.org
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        yahoo.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        amazon.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        wikipedia.org
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        ebay.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        microsoft.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        huffingtonpost.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        bing.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        ehow.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        blogspot.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        answers.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
      &lt;td&gt;
        blogger.com
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
      
      &lt;td&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  
  &lt;p&gt;
    可以看到，除了 ask 不曾统一网址外，所有其他网站均做了网址的重定向，或 no-www 重定向到 www，或 www 重定向到 no-www。
  &lt;/p&gt;
  
  &lt;p&gt;
    其实按我理解，则重定向网址的需求更多不是因为 no-www 或 yes-www 提出的理由，而是出于&lt;a href=&#34;http://www.mattcutts.com/blog/seo-advice-url-canonicalization/&#34;&gt;讨好搜索引擎的需要&lt;/a&gt;。
  &lt;/p&gt;
  
  &lt;p&gt;
    举我的博客为例，如果不做重定向，则以下网址访问的内容其实是一致的：
  &lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      http://www.zfanw.com/blog
    &lt;/li&gt;
    &lt;li&gt;
      http://zfanw.com/blog
    &lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;p&gt;
    用户可能不关心它是有 www 还是没有，但搜索引擎会注意到这点。具体可以看 Google 网站工具上“&lt;a href=&#34;http://support.google.com/webmasters/bin/answer.py?hl=zh-Hans&amp;hlrm=en&amp;answer=139066&#34;&gt;规范化&lt;/a&gt;&amp;#8220;的说明。
  &lt;/p&gt;
  
  &lt;p&gt;
    那么如何实现 no-www 到 www 或是 www 到 no-www 的 301 重定向？简单的办法是通过 .htaccess 文件设置。
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;no-www_301_www&#34;&gt;no-www 301 重定向到 www&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyno-www_301_www&#34; href=&#34;#no-www_301_www&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    在 .htaccess 文件中加入以下代码：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;#####301 跳转所有 no-www 到 www
RewriteEngine On
RewriteCond %{HTTP_HOST} ^[^.]+\.[^.]+$ [NC]
RewriteRule ^(.*)$ http://www.%{http_host}/$1 [R=301,NC]
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这样，输入网址 http://zfanw.com/blog 就会跳转到网址 http://www.zfanw.com/blog
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;www_301_no-www&#34;&gt;www 301 重定向到 no-www&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heywww_301_no-www&#34; href=&#34;#www_301_no-www&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;p&gt;
    类似的，在 .htaccess 文件加入如下代码：
  &lt;/p&gt;
  
  &lt;pre&gt;&lt;code&gt;#####301 跳转所有 www 到 no-www
RewriteEngine On
RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
RewriteRule ^(.*)$ http://%1/$1 [R=301,L] 
&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;
    这样，输入网址 http://www.zfanw.com/blog 就会跳转到网址 http://zfanw.com/blog
  &lt;/p&gt;
  
  &lt;h2 class=&#34;storycontent-h2&#34;&gt;
    &lt;span id=&#34;i-2&#34;&gt;鸣谢&lt;/span&gt;&lt;a title=&#34;标题链接地址&#34; class=&#34;u-floatRight hidden&#34; id=&#34;heyi-2&#34; href=&#34;#i-2&#34;&gt;&lt;span class=&#34;&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/span&gt;&lt;/a&gt;
  &lt;/h2&gt;
  
  &lt;ol&gt;
    &lt;li&gt;
      &lt;a href=&#34;http://wiki.apache.org/httpd/CanonicalHostNames&#34;&gt;apache wiki&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>